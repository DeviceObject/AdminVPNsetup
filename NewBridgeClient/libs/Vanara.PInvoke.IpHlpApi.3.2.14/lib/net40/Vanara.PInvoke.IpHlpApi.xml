<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vanara.PInvoke.IpHlpApi</name>
    </assembly>
    <members>
        <member name="T:Vanara.PInvoke.IpHlpApi">
            <summary>Items from the IpHlpApi.dll</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.PIO_APC_ROUTINE">
            <summary>The routine that is called when the calling thread is in an alertable thread and an ICMPv6 reply arrives.</summary>
            <param name="ApcContext">
            The ApcContext parameter passed to the Icmp6SendEcho2 function. This parameter can be used by the application to identify the
            Icmp6SendEcho2 request that the callback function is responding to.
            </param>
            <param name="IoStatusBlock">
            A pointer to a IO_STATUS_BLOCK. This variable contains the final completion status and information about the operation. The
            number of bytes actually received in the reply is returned in the Information member of the IO_STATUS_BLOCK struct.
            </param>
            <param name="Reserved">This parameter is reserved.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.Icmp6CreateFile">
            <summary>The <c>Icmp6CreateFile</c> function opens a handle on which IPv6 ICMP echo requests can be issued.</summary>
            <returns>
            The <c>Icmp6CreateFile</c> function returns an open handle on success. On failure, the function returns
            <c>INVALID_HANDLE_VALUE</c>. Call the GetLastError function for extended error information.
            </returns>
            <remarks>
            <para>
            The <c>Icmp6CreateFile</c> function opens a handle on which IPv6 ICMP echo requests can be issued. The Icmp6SendEcho2 function is
            used to send the IPv6 ICMP echo requests. The Icmp6ParseReplies function is used to parse the IPv6 ICMP replies. The
            IcmpCloseHandle function is used to close the ICMP handle opened by the <c>Icmp6CreateFile</c> function.
            </para>
            <para>For IPv4, use the IcmpCreateFile function.</para>
            <para>For IPv4, use the IcmpCreateFile, <c>IcmpSendEcho</c>, IcmpSendEcho2, IcmpSendEcho2Ex, and IcmpParseReplies functions.</para>
            <para>Note that the include directive for Iphlpapi.h header file must be placed before the Icmpapi.h header file.</para>
            <para>Examples</para>
            <para>The following example opens a handle on which IPv6 ICMP echo requests can be issued.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.Icmp6ParseReplies(System.IntPtr,System.UInt32)">
            <summary>
            The <c>Icmp6ParseReplies</c> function parses the reply buffer provided and returns an IPv6 ICMPv6 echo response reply if found.
            </summary>
            <param name="ReplyBuffer">
            A pointer to the buffer passed to the Icmp6SendEcho2 function. This parameter is points to an ICMPV6_ECHO_REPLY structure to hold
            the response.
            </param>
            <param name="ReplySize">The size, in bytes, of the buffer pointed to by the ReplyBuffer parameter.</param>
            <returns>
            <para>
            The <c>Icmp6ParseReplies</c> function returns 1 on success. In this case, the <c>Status</c> member in the ICMPV6_ECHO_REPLY
            structure pointed to by the ReplyBuffer parameter will be either <c>IP_SUCCESS</c> if the target node responded or <c>IP_TTL_EXPIRED_TRANSIT</c>.
            </para>
            <para>If the return value is zero, extended error information is available through GetLastError.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_GEN_FAILURE</term>
            <term>
            A general failure occurred. This error is returned if the ReplyBuffer parameter is a NULL pointer or the ReplySize parameter is zero.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>Icmp6ParseReplies</c> function is used by IPv6 to parse replies that result from an ICMPv6 echo request. The
            <c>Icmp6ParseReplies</c> function parses a reply buffer previously passed to the Icmp6SendEcho2 function. Use the
            <c>Icmp6ParseReplies</c> function only with the <c>Icmp6SendEcho2</c> function.
            </para>
            <para>
            The <c>Icmp6ParseReplies</c> function cannot be used on a reply buffer previously passed to IcmpSendEcho or IcmpSendEcho2 for IPv4.
            </para>
            <para>For IPv4, use the IcmpCreateFile, <c>IcmpSendEcho</c>, IcmpSendEcho2, IcmpSendEcho2Ex, and IcmpParseReplies functions.</para>
            <para>Note that the include directive for Iphlpapi.h header file must be placed before the Icmpapi.h header file.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.Icmp6SendEcho2(Vanara.PInvoke.IpHlpApi.SafeIcmpHandle,Vanara.PInvoke.HANDLE,Vanara.PInvoke.IpHlpApi.PIO_APC_ROUTINE,System.IntPtr,Vanara.PInvoke.Ws2_32.SOCKADDR_IN6@,Vanara.PInvoke.Ws2_32.SOCKADDR_IN6@,System.IntPtr,System.UInt16,Vanara.PInvoke.IpHlpApi.IP_OPTION_INFORMATION@,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            The <c>Icmp6SendEcho2</c> function sends an IPv6 ICMPv6 echo request and returns either immediately (if Event or ApcRoutine is
            non- <c>NULL</c>) or returns after the specified time-out. The ReplyBuffer contains the IPv6 ICMPv6 echo response, if any.
            </summary>
            <param name="IcmpHandle">The open handle returned by Icmp6CreateFile.</param>
            <param name="Event">
            <para>
            An event to be signaled whenever an ICMPv6 response arrives. If this parameter is specified, it requires a handle to a valid
            event object. Use the CreateEvent or CreateEventEx function to create this event object.
            </para>
            <para>For more information on using events, see Event Objects.</para>
            </param>
            <param name="ApcRoutine">
            <para>
            The routine that is called when the calling thread is in an alertable thread and an ICMPv6 reply arrives. On Windows Vista and
            later, <c>PIO_APC_ROUTINE_DEFINED</c> must be defined to force the datatype for this parameter to <c>PIO_APC_ROUTINE</c> rather
            than <c>FARPROC</c>.
            </para>
            <para>
            On Windows Server 2003 and Windows XP, <c>PIO_APC_ROUTINE_DEFINED</c> must not be defined to force the datatype for this
            parameter to <c>FARPROC</c>.
            </para>
            </param>
            <param name="ApcContext">
            An optional parameter passed to the callback routine specified in the ApcRoutine parameter whenever an ICMPv6 response arrives or
            an error occurs.
            </param>
            <param name="SourceAddress">The IPv6 source address on which to issue the echo request, in the form of a sockaddr structure.</param>
            <param name="DestinationAddress">The IPv6 destination address of the echo request, in the form of a sockaddr structure.</param>
            <param name="RequestData">A pointer to a buffer that contains data to send in the request.</param>
            <param name="RequestSize">The size, in bytes, of the request data buffer pointed to by the RequestData parameter.</param>
            <param name="RequestOptions">
            <para>
            A pointer to the IPv6 header options for the request, in the form of an IP_OPTION_INFORMATION structure. On a 64-bit platform,
            this parameter is in the form for an IP_OPTION_INFORMATION32 structure.
            </para>
            <para>This parameter may be NULL if no IP header options need to be specified.</para>
            <para>
            <c>Note</c> On Windows Server 2003 and Windows XP, the RequestOptions parameter is not optional and must not be NULL and only the
            <c>Ttl</c> and <c>Flags</c> members are used.
            </para>
            </param>
            <param name="ReplyBuffer">
            A pointer to a buffer to hold replies to the request. Upon return, the buffer contains an ICMPV6_ECHO_REPLY structure followed by
            the message body from the ICMPv6 echo response reply data. The buffer must be large enough to hold at least one
            <c>ICMPV6_ECHO_REPLY</c> structure plus the number of bytes of data specified in the RequestSize parameter. This buffer should
            also be large enough to also hold 8 more bytes of data (the size of an ICMP error message) plus space for an
            <c>IO_STATUS_BLOCK</c> structure.
            </param>
            <param name="ReplySize">
            The size, in bytes, of the reply buffer pointed to by the ReplyBuffer parameter. This buffer should be large enough to hold at
            least one ICMPV6_ECHO_REPLY structure plus RequestSize bytes of data. This buffer should also be large enough to also hold 8 more
            bytes of data (the size of an ICMP error message) plus space for an <c>IO_STATUS_BLOCK</c> structure.
            </param>
            <param name="Timeout">
            The time, in milliseconds, to wait for replies. This parameter is only used if the <c>Icmp6SendEcho2</c> function is called
            synchronously. So this parameter is not used if either the ApcRoutine or Eventparameter are not <c>NULL</c>.
            </param>
            <returns>
            <para>
            When called synchronously, the <c>Icmp6SendEcho2</c> function returns the number of replies received and stored in ReplyBuffer.
            If the return value is zero, call GetLastError for extended error information.
            </para>
            <para>
            When called asynchronously, the <c>Icmp6SendEcho2</c> function returns ERROR_IO_PENDING to indicate the operation is in progress.
            The results can be retrieved later when the event specified in the Event parameter signals or the callback function in the
            ApcRoutine parameter is called.
            </para>
            <para>If the return value is zero, call GetLastError for extended error information.</para>
            <para>If the function fails, the extended error code returned by GetLastError can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_CALL_NOT_IMPLEMENTED</term>
            <term>This function is not supported on this system.</term>
            </item>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The data area passed to a system call is too small. This error is returned if the ReplySize parameter indicates that the buffer
            pointed to by the ReplyBuffer parameter is too small.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One of the parameters is invalid. This error is returned if the IcmpHandle parameter contains an invalid handle.</term>
            </item>
            <item>
            <term>ERROR_IO_PENDING</term>
            <term>
            The operation is in progress. This value is returned by a successful asynchronous call to Icmp6SendEcho2 and is not an indication
            of an error.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Not enough memory is available to process this command.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported. This error is returned if no IPv6 stack is on the local computer.</term>
            </item>
            <item>
            <term>IP_BUF_TOO_SMALL</term>
            <term>The size of the ReplyBuffer specified in the ReplySize parameter was too small.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>Icmp6SendEcho2</c> function is called synchronously if the ApcRoutine or Event parameters are <c>NULL</c>. When called
            synchronously, the return value contains the number of replies received and stored in ReplyBuffer after waiting for the time
            specified in the Timeout parameter. If the return value is zero, call GetLastError for extended error information.
            </para>
            <para>
            The <c>Icmp6SendEcho2</c> function is called asynchronously when either the ApcRoutine or Event parameters are specified. When
            called asynchronously, the ReplyBuffer and ReplySize parameters are required to accept the response. ICMP response data is copied
            to the ReplyBuffer provided and the application is signaled (when the Event parameter is specified) or the callback function is
            called (when the ApcRoutine parameter is specified). The application must parse the data pointed to by ReplyBuffer parameter
            using the Icmp6ParseReplies function.
            </para>
            <para>
            If the Event parameter is specified, the <c>Icmp6SendEcho2</c> function is called asynchronously. The event specified in the
            Event parameter is signaled whenever an ICMPv6 response arrives. Use the CreateEvent function to create this event object.
            </para>
            <para>
            If the ApcRoutine parameter is specified, the <c>Icmp6SendEcho2</c> function is called asynchronously. The ApcRoutine parameter
            should point to a user-defined callback function. The callback function specified in the ApcRoutine parameter is called whenever
            an ICMPv6 response arrives. The invocation of the callback function specified in the ApcRoutine parameter is serialized.
            </para>
            <para>
            If both the Event and ApcRoutine parameters are specified, the event specified in the Event parameter is signaled whenever an
            ICMPv6 response arrives, but the callback function specified in the ApcRoutine parameter is ignored .
            </para>
            <para>
            On Windows Vista and later, any application that calls <c>Icmp6SendEcho2</c> function asynchronously using the ApcRoutine
            parameter must define <c>PIO_APC_ROUTINE_DEFINED</c> to force the datatype for the ApcRoutine parameter to <c>PIO_APC_ROUTINE</c>
            rather than <c>FARPROC</c>.
            </para>
            <para>
            On Windows Vista and later, the callback function pointed to by the ApcRoutine must be defined as a function of type <c>VOID</c>
            with the following syntax:
            </para>
            <para>On Windows Vista and later, the parameters passed to the callback function include the following:</para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>IN PVOID ApcContext</term>
            <term>
            The ApcContext parameter passed to the Icmp6SendEcho2 function. This parameter can be used by the application to identify the
            Icmp6SendEcho2 request that the callback function is responding to.
            </term>
            </item>
            <item>
            <term>IN PIO_STATUS_BLOCK IoStatusBlock</term>
            <term>
            A pointer to a IO_STATUS_BLOCK. This variable contains the final completion status and information about the operation. The
            number of bytes actually received in the reply is returned in the Information member of the IO_STATUS_BLOCK struct. The
            IO_STATUS_BLOCK structure is defined in the Wdm.h header file.
            </term>
            </item>
            <item>
            <term>IN ULONG Reserved</term>
            <term>This parameter is reserved.</term>
            </item>
            </list>
            <para>
            On Windows Server 2003 and Windows XP, any application that calls the <c>Icmp6SendEcho2</c> function asynchronously using the
            ApcRoutine parameter must not define <c>PIO_APC_ROUTINE_DEFINED</c> to force the datatype for the ApcRoutine parameter to
            <c>FARPROC</c> rather than <c>PIO_APC_ROUTINE</c>.
            </para>
            <para>
            On Windows Server 2003 and Windows XP, the callback function pointed to by the ApcRoutine must be defined as a function of type
            <c>VOID</c> with the following syntax:
            </para>
            <para>On Windows Server 2003 and Windows XP, the parameters passed to the callback function include the following:</para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>IN PVOID ApcContext</term>
            <term>
            The ApcContext parameter passed to the Icmp6SendEcho2 function. This parameter can be used by the application to identify the
            Icmp6SendEcho2 request that the callback function is responding to.
            </term>
            </item>
            </list>
            <para>
            The callback function specified in the ApcRoutine parameter must be implemented in the same process as the application calling
            the <c>Icmp6SendEcho2</c> function. If the callback function is in a separate DLL, then the DLL should be loaded before calling
            the <c>Icmp6SendEcho2</c> function.
            </para>
            <para>For IPv4, use the IcmpCreateFile, <c>IcmpSendEcho</c>, IcmpSendEcho2, IcmpSendEcho2Ex, and IcmpParseReplies functions.</para>
            <para>Note that the include directive for Iphlpapi.h header file must be placed before the Icmpapi.h header file.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.Icmp6SendEcho2(Vanara.PInvoke.IpHlpApi.SafeIcmpHandle,Vanara.PInvoke.HANDLE,Vanara.PInvoke.IpHlpApi.PIO_APC_ROUTINE,System.IntPtr,Vanara.PInvoke.Ws2_32.SOCKADDR_IN6@,Vanara.PInvoke.Ws2_32.SOCKADDR_IN6@,System.IntPtr,System.UInt16,System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            The <c>Icmp6SendEcho2</c> function sends an IPv6 ICMPv6 echo request and returns either immediately (if Event or ApcRoutine is
            non- <c>NULL</c>) or returns after the specified time-out. The ReplyBuffer contains the IPv6 ICMPv6 echo response, if any.
            </summary>
            <param name="IcmpHandle">The open handle returned by Icmp6CreateFile.</param>
            <param name="Event">
            <para>
            An event to be signaled whenever an ICMPv6 response arrives. If this parameter is specified, it requires a handle to a valid
            event object. Use the CreateEvent or CreateEventEx function to create this event object.
            </para>
            <para>For more information on using events, see Event Objects.</para>
            </param>
            <param name="ApcRoutine">
            <para>
            The routine that is called when the calling thread is in an alertable thread and an ICMPv6 reply arrives. On Windows Vista and
            later, <c>PIO_APC_ROUTINE_DEFINED</c> must be defined to force the datatype for this parameter to <c>PIO_APC_ROUTINE</c> rather
            than <c>FARPROC</c>.
            </para>
            <para>
            On Windows Server 2003 and Windows XP, <c>PIO_APC_ROUTINE_DEFINED</c> must not be defined to force the datatype for this
            parameter to <c>FARPROC</c>.
            </para>
            </param>
            <param name="ApcContext">
            An optional parameter passed to the callback routine specified in the ApcRoutine parameter whenever an ICMPv6 response arrives or
            an error occurs.
            </param>
            <param name="SourceAddress">The IPv6 source address on which to issue the echo request, in the form of a sockaddr structure.</param>
            <param name="DestinationAddress">The IPv6 destination address of the echo request, in the form of a sockaddr structure.</param>
            <param name="RequestData">A pointer to a buffer that contains data to send in the request.</param>
            <param name="RequestSize">The size, in bytes, of the request data buffer pointed to by the RequestData parameter.</param>
            <param name="RequestOptions">
            <para>
            A pointer to the IPv6 header options for the request, in the form of an IP_OPTION_INFORMATION structure. On a 64-bit platform,
            this parameter is in the form for an IP_OPTION_INFORMATION32 structure.
            </para>
            <para>This parameter may be NULL if no IP header options need to be specified.</para>
            <para>
            <c>Note</c> On Windows Server 2003 and Windows XP, the RequestOptions parameter is not optional and must not be NULL and only the
            <c>Ttl</c> and <c>Flags</c> members are used.
            </para>
            </param>
            <param name="ReplyBuffer">
            A pointer to a buffer to hold replies to the request. Upon return, the buffer contains an ICMPV6_ECHO_REPLY structure followed by
            the message body from the ICMPv6 echo response reply data. The buffer must be large enough to hold at least one
            <c>ICMPV6_ECHO_REPLY</c> structure plus the number of bytes of data specified in the RequestSize parameter. This buffer should
            also be large enough to also hold 8 more bytes of data (the size of an ICMP error message) plus space for an
            <c>IO_STATUS_BLOCK</c> structure.
            </param>
            <param name="ReplySize">
            The size, in bytes, of the reply buffer pointed to by the ReplyBuffer parameter. This buffer should be large enough to hold at
            least one ICMPV6_ECHO_REPLY structure plus RequestSize bytes of data. This buffer should also be large enough to also hold 8 more
            bytes of data (the size of an ICMP error message) plus space for an <c>IO_STATUS_BLOCK</c> structure.
            </param>
            <param name="Timeout">
            The time, in milliseconds, to wait for replies. This parameter is only used if the <c>Icmp6SendEcho2</c> function is called
            synchronously. So this parameter is not used if either the ApcRoutine or Eventparameter are not <c>NULL</c>.
            </param>
            <returns>
            <para>
            When called synchronously, the <c>Icmp6SendEcho2</c> function returns the number of replies received and stored in ReplyBuffer.
            If the return value is zero, call GetLastError for extended error information.
            </para>
            <para>
            When called asynchronously, the <c>Icmp6SendEcho2</c> function returns ERROR_IO_PENDING to indicate the operation is in progress.
            The results can be retrieved later when the event specified in the Event parameter signals or the callback function in the
            ApcRoutine parameter is called.
            </para>
            <para>If the return value is zero, call GetLastError for extended error information.</para>
            <para>If the function fails, the extended error code returned by GetLastError can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_CALL_NOT_IMPLEMENTED</term>
            <term>This function is not supported on this system.</term>
            </item>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The data area passed to a system call is too small. This error is returned if the ReplySize parameter indicates that the buffer
            pointed to by the ReplyBuffer parameter is too small.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One of the parameters is invalid. This error is returned if the IcmpHandle parameter contains an invalid handle.</term>
            </item>
            <item>
            <term>ERROR_IO_PENDING</term>
            <term>
            The operation is in progress. This value is returned by a successful asynchronous call to Icmp6SendEcho2 and is not an indication
            of an error.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Not enough memory is available to process this command.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported. This error is returned if no IPv6 stack is on the local computer.</term>
            </item>
            <item>
            <term>IP_BUF_TOO_SMALL</term>
            <term>The size of the ReplyBuffer specified in the ReplySize parameter was too small.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>Icmp6SendEcho2</c> function is called synchronously if the ApcRoutine or Event parameters are <c>NULL</c>. When called
            synchronously, the return value contains the number of replies received and stored in ReplyBuffer after waiting for the time
            specified in the Timeout parameter. If the return value is zero, call GetLastError for extended error information.
            </para>
            <para>
            The <c>Icmp6SendEcho2</c> function is called asynchronously when either the ApcRoutine or Event parameters are specified. When
            called asynchronously, the ReplyBuffer and ReplySize parameters are required to accept the response. ICMP response data is copied
            to the ReplyBuffer provided and the application is signaled (when the Event parameter is specified) or the callback function is
            called (when the ApcRoutine parameter is specified). The application must parse the data pointed to by ReplyBuffer parameter
            using the Icmp6ParseReplies function.
            </para>
            <para>
            If the Event parameter is specified, the <c>Icmp6SendEcho2</c> function is called asynchronously. The event specified in the
            Event parameter is signaled whenever an ICMPv6 response arrives. Use the CreateEvent function to create this event object.
            </para>
            <para>
            If the ApcRoutine parameter is specified, the <c>Icmp6SendEcho2</c> function is called asynchronously. The ApcRoutine parameter
            should point to a user-defined callback function. The callback function specified in the ApcRoutine parameter is called whenever
            an ICMPv6 response arrives. The invocation of the callback function specified in the ApcRoutine parameter is serialized.
            </para>
            <para>
            If both the Event and ApcRoutine parameters are specified, the event specified in the Event parameter is signaled whenever an
            ICMPv6 response arrives, but the callback function specified in the ApcRoutine parameter is ignored .
            </para>
            <para>
            On Windows Vista and later, any application that calls <c>Icmp6SendEcho2</c> function asynchronously using the ApcRoutine
            parameter must define <c>PIO_APC_ROUTINE_DEFINED</c> to force the datatype for the ApcRoutine parameter to <c>PIO_APC_ROUTINE</c>
            rather than <c>FARPROC</c>.
            </para>
            <para>
            On Windows Vista and later, the callback function pointed to by the ApcRoutine must be defined as a function of type <c>VOID</c>
            with the following syntax:
            </para>
            <para>On Windows Vista and later, the parameters passed to the callback function include the following:</para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>IN PVOID ApcContext</term>
            <term>
            The ApcContext parameter passed to the Icmp6SendEcho2 function. This parameter can be used by the application to identify the
            Icmp6SendEcho2 request that the callback function is responding to.
            </term>
            </item>
            <item>
            <term>IN PIO_STATUS_BLOCK IoStatusBlock</term>
            <term>
            A pointer to a IO_STATUS_BLOCK. This variable contains the final completion status and information about the operation. The
            number of bytes actually received in the reply is returned in the Information member of the IO_STATUS_BLOCK struct. The
            IO_STATUS_BLOCK structure is defined in the Wdm.h header file.
            </term>
            </item>
            <item>
            <term>IN ULONG Reserved</term>
            <term>This parameter is reserved.</term>
            </item>
            </list>
            <para>
            On Windows Server 2003 and Windows XP, any application that calls the <c>Icmp6SendEcho2</c> function asynchronously using the
            ApcRoutine parameter must not define <c>PIO_APC_ROUTINE_DEFINED</c> to force the datatype for the ApcRoutine parameter to
            <c>FARPROC</c> rather than <c>PIO_APC_ROUTINE</c>.
            </para>
            <para>
            On Windows Server 2003 and Windows XP, the callback function pointed to by the ApcRoutine must be defined as a function of type
            <c>VOID</c> with the following syntax:
            </para>
            <para>On Windows Server 2003 and Windows XP, the parameters passed to the callback function include the following:</para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>IN PVOID ApcContext</term>
            <term>
            The ApcContext parameter passed to the Icmp6SendEcho2 function. This parameter can be used by the application to identify the
            Icmp6SendEcho2 request that the callback function is responding to.
            </term>
            </item>
            </list>
            <para>
            The callback function specified in the ApcRoutine parameter must be implemented in the same process as the application calling
            the <c>Icmp6SendEcho2</c> function. If the callback function is in a separate DLL, then the DLL should be loaded before calling
            the <c>Icmp6SendEcho2</c> function.
            </para>
            <para>For IPv4, use the IcmpCreateFile, <c>IcmpSendEcho</c>, IcmpSendEcho2, IcmpSendEcho2Ex, and IcmpParseReplies functions.</para>
            <para>Note that the include directive for Iphlpapi.h header file must be placed before the Icmpapi.h header file.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IcmpCloseHandle(System.IntPtr)">
            <summary>The <c>IcmpCloseHandle</c> function closes a handle opened by a call to the IcmpCreateFile or Icmp6CreateFile functions.</summary>
            <param name="IcmpHandle">The handle to close. This handle must have been returned by a call to IcmpCreateFile or Icmp6CreateFile.</param>
            <returns>
            If the handle is closed successfully the return value is <c>TRUE</c>, otherwise <c>FALSE</c>. Call the GetLastError function for
            extended error information.
            </returns>
            <remarks>
            <para>
            The <c>IcmpCloseHandle</c> function is exported from the Icmp.dll on Windows 2000. The <c>IcmpCloseHandle</c> function is
            exported from the Iphlpapi.dll on Windows XP and later. Windows version checking is not recommended to use this function.
            Applications requiring portability with this function across Windows 2000, Windows XP, Windows Server 2003 and later Windows
            versions should not statically link to either the Icmp.lib or the Iphlpapi.lib file. Instead, the application should check for
            the presence of <c>IcmpCloseHandle</c> in the Iphlpapi.dll with calls to LoadLibrary and GetProcAddress. Failing that, the
            application should check for the presence of <c>IcmpCloseHandle</c> in the Icmp.dll with calls to <c>LoadLibrary</c> and <c>GetProcAddress</c>.
            </para>
            <para>Note that the include directive for Iphlpapi.h header file must be placed before the Icmpapi.h header file.</para>
            <para>Examples</para>
            <para>The following example opens and closes a handle on which ICMP echo requests can be issued.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IcmpCreateFile">
            <summary>The <c>IcmpCreateFile</c> function opens a handle on which IPv4 ICMP echo requests can be issued.</summary>
            <returns>
            The <c>IcmpCreateFile</c> function returns an open handle on success. On failure, the function returns
            <c>INVALID_HANDLE_VALUE</c>. Call the GetLastError function for extended error information.
            </returns>
            <remarks>
            <para>
            The <c>IcmpCreateFile</c> function is exported from the Icmp.dll on Windows 2000. The <c>IcmpCreateFile</c> function is exported
            from the Iphlpapi.dll on Windows XP and later. Windows version checking is not recommended to use this function. Applications
            requiring portability with this function across Windows 2000, Windows XP, Windows Server 2003 and later Windows versions should
            not statically link to either the Icmp.lib or the Iphlpapi.lib file. Instead, the application should check for the presence of
            <c>IcmpCreateFile</c> in the Iphlpapi.dll with calls to LoadLibrary and GetProcAddress. Failing that, the application should
            check for the presence of <c>IcmpCreateFile</c> in the Icmp.dll with calls to <c>LoadLibrary</c> and <c>GetProcAddress</c>.
            </para>
            <para>For IPv6, use the Icmp6CreateFile, Icmp6SendEcho2, and Icmp6ParseReplies functions.</para>
            <para>Note that the include directive for Iphlpapi.h header file must be placed before the Icmpapi.h header file.</para>
            <para>Examples</para>
            <para>The following example opens a handle on which ICMP echo requests can be issued.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IcmpParseReplies(System.IntPtr,System.UInt32)">
            <summary>
            The <c>IcmpParseReplies</c> function parses the reply buffer provided and returns the number of ICMP echo request responses found.
            </summary>
            <param name="ReplyBuffer">
            <para>The buffer passed to IcmpSendEcho2. This is rewritten to hold an array of ICMP_ECHO_REPLY structures, its type is <c>PICMP_ECHO_REPLY</c>.</para>
            <para>On a 64-bit plaform, this buffer is rewritten to hold an array of ICMP_ECHO_REPLY32 structures, its type is <c>PICMP_ECHO_REPLY32</c>.</para>
            </param>
            <param name="ReplySize">The size, in bytes, of the buffer pointed to by the ReplyBuffer parameter.</param>
            <returns>
            The <c>IcmpParseReplies</c> function returns the number of ICMP responses found on success. The function returns zero on error.
            Call GetLastError for additional error information.
            </returns>
            <remarks>
            <para>
            The <c>IcmpParseReplies</c> function should not be used on a reply buffer previously passed to IcmpSendEcho. The
            <c>IcmpSendEcho</c> function parses that buffer before returning to the user. Use this function only with IcmpSendEcho2.
            </para>
            <para>
            The <c>IcmpParseReplies</c> function is exported from the Icmp.dll on Windows 2000. The <c>IcmpParseReplies</c> function is
            exported from the Iphlpapi.dll on Windows XP and later. Windows version checking is not recommended to use this function.
            Applications requiring portability with this function across Windows 2000, Windows XP, Windows Server 2003 and later Windows
            versions should not statically link to either the Icmp.lib or the Iphlpapi.lib file. Instead, the application should check for
            the presence of <c>IcmpParseReplies</c> in the Iphlpapi.dll with calls to LoadLibrary and GetProcAddress. Failing that, the
            application should check for the presence of <c>IcmpParseReplies</c> in the Icmp.dll with calls to <c>LoadLibrary</c> and <c>GetProcAddress</c>.
            </para>
            <para>Note that the include directive for Iphlpapi.h header file must be placed before the Icmpapi.h header file.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IcmpSendEcho(Vanara.PInvoke.IpHlpApi.SafeIcmpHandle,Vanara.PInvoke.Ws2_32.IN_ADDR,System.IntPtr,System.UInt16,Vanara.PInvoke.IpHlpApi.IP_OPTION_INFORMATION@,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            The <c>IcmpSendEcho</c> function sends an IPv4 ICMP echo request and returns any echo response replies. The call returns when the
            time-out has expired or the reply buffer is filled.
            </summary>
            <param name="IcmpHandle">The open handle returned by the IcmpCreateFile function.</param>
            <param name="DestinationAddress">The IPv4 destination address of the echo request, in the form of an IPAddr structure.</param>
            <param name="RequestData">A pointer to a buffer that contains data to send in the request.</param>
            <param name="RequestSize">The size, in bytes, of the request data buffer pointed to by the RequestData parameter.</param>
            <param name="RequestOptions">
            <para>
            A pointer to the IP header options for the request, in the form of an IP_OPTION_INFORMATION structure. On a 64-bit platform, this
            parameter is in the form for an IP_OPTION_INFORMATION32 structure.
            </para>
            <para>This parameter may be <c>NULL</c> if no IP header options need to be specified.</para>
            </param>
            <param name="ReplyBuffer">
            A buffer to hold any replies to the echo request. Upon return, the buffer contains an array of ICMP_ECHO_REPLY structures
            followed by the options and data for the replies. The buffer should be large enough to hold at least one <c>ICMP_ECHO_REPLY</c>
            structure plus RequestSize bytes of data.
            </param>
            <param name="ReplySize">
            <para>
            The allocated size, in bytes, of the reply buffer. The buffer should be large enough to hold at least one ICMP_ECHO_REPLY
            structure plus RequestSize bytes of data.
            </para>
            <para>This buffer should also be large enough to also hold 8 more bytes of data (the size of an ICMP error message).</para>
            </param>
            <param name="Timeout">The time, in milliseconds, to wait for replies.</param>
            <returns>
            <para>
            The <c>IcmpSendEcho</c> function returns the number of ICMP_ECHO_REPLY structures stored in the ReplyBuffer. The status of each
            reply is contained in the structure. If the return value is zero, call GetLastError for additional error information.
            </para>
            <para>If the function fails, the extended error code returned by GetLastError can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The data area passed to a system call is too small. This error is returned if the ReplySize parameter indicates that the buffer
            pointed to by the ReplyBuffer parameter is too small.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the IcmpHandle parameter contains an invalid handle.
            This error can also be returned if the ReplySize parameter specifies a value less than the size of an ICMP_ECHO_REPLY structure.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Not enough memory is available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported. This error is returned if no IPv4 stack is on the local computer.</term>
            </item>
            <item>
            <term>IP_BUF_TOO_SMALL</term>
            <term>The size of the ReplyBuffer specified in the ReplySize parameter was too small.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>IcmpSendEcho</c> function send an ICMP echo request to the specified address and returns the number of replies received
            and stored in ReplyBuffer. The <c>IcmpSendEcho</c> function is a synchronous function and returns after waiting for the time
            specified in the Timeout parameter for a response. If the return value is zero, call GetLastError for extended error information.
            </para>
            <para>
            The IcmpSendEcho2 and IcmpSendEcho2Ex functions are enhanced version of <c>IcmpSendEcho</c> that support asynchronous operation.
            The <c>IcmpSendEcho2Ex</c> function also allows the source IP address to be specified. This feature is useful on computers with
            multiple network interfaces.
            </para>
            <para>For IPv6, use the Icmp6CreateFile, Icmp6SendEcho2, and Icmp6ParseReplies functions.</para>
            <para>
            The <c>IcmpSendEcho</c> function is exported from the Icmp.dll on Windows 2000. The <c>IcmpSendEcho</c> function is exported from
            the Iphlpapi.dll on Windows XP and later. Windows version checking is not recommended to use this function. Applications
            requiring portability with this function across Windows 2000, Windows XP, Windows Server 2003 and later Windows versions should
            not statically link to either the Icmp.lib or the Iphlpapi.lib file. Instead, the application should check for the presence of
            <c>IcmpSendEcho</c> in the Iphlpapi.dll with calls to LoadLibrary and GetProcAddress. Failing that, the application should check
            for the presence of <c>IcmpSendEcho</c> in the Icmp.dll with calls to <c>LoadLibrary</c> and <c>GetProcAddress</c>.
            </para>
            <para>Note that the include directive for Iphlpapi.h header file must be placed before the Icmpapi.h header file.</para>
            <para>Examples</para>
            <para>
            The following example sends an ICMP echo request to the IP address specified on the command line and prints the information
            received from the first response.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IcmpSendEcho(Vanara.PInvoke.IpHlpApi.SafeIcmpHandle,Vanara.PInvoke.Ws2_32.IN_ADDR,System.IntPtr,System.UInt16,System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            The <c>IcmpSendEcho</c> function sends an IPv4 ICMP echo request and returns any echo response replies. The call returns when the
            time-out has expired or the reply buffer is filled.
            </summary>
            <param name="IcmpHandle">The open handle returned by the IcmpCreateFile function.</param>
            <param name="DestinationAddress">The IPv4 destination address of the echo request, in the form of an IPAddr structure.</param>
            <param name="RequestData">A pointer to a buffer that contains data to send in the request.</param>
            <param name="RequestSize">The size, in bytes, of the request data buffer pointed to by the RequestData parameter.</param>
            <param name="RequestOptions">
            <para>
            A pointer to the IP header options for the request, in the form of an IP_OPTION_INFORMATION structure. On a 64-bit platform, this
            parameter is in the form for an IP_OPTION_INFORMATION32 structure.
            </para>
            <para>This parameter may be <c>NULL</c> if no IP header options need to be specified.</para>
            </param>
            <param name="ReplyBuffer">
            A buffer to hold any replies to the echo request. Upon return, the buffer contains an array of ICMP_ECHO_REPLY structures
            followed by the options and data for the replies. The buffer should be large enough to hold at least one <c>ICMP_ECHO_REPLY</c>
            structure plus RequestSize bytes of data.
            </param>
            <param name="ReplySize">
            <para>
            The allocated size, in bytes, of the reply buffer. The buffer should be large enough to hold at least one ICMP_ECHO_REPLY
            structure plus RequestSize bytes of data.
            </para>
            <para>This buffer should also be large enough to also hold 8 more bytes of data (the size of an ICMP error message).</para>
            </param>
            <param name="Timeout">The time, in milliseconds, to wait for replies.</param>
            <returns>
            <para>
            The <c>IcmpSendEcho</c> function returns the number of ICMP_ECHO_REPLY structures stored in the ReplyBuffer. The status of each
            reply is contained in the structure. If the return value is zero, call GetLastError for additional error information.
            </para>
            <para>If the function fails, the extended error code returned by GetLastError can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The data area passed to a system call is too small. This error is returned if the ReplySize parameter indicates that the buffer
            pointed to by the ReplyBuffer parameter is too small.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the IcmpHandle parameter contains an invalid handle.
            This error can also be returned if the ReplySize parameter specifies a value less than the size of an ICMP_ECHO_REPLY structure.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Not enough memory is available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported. This error is returned if no IPv4 stack is on the local computer.</term>
            </item>
            <item>
            <term>IP_BUF_TOO_SMALL</term>
            <term>The size of the ReplyBuffer specified in the ReplySize parameter was too small.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>IcmpSendEcho</c> function send an ICMP echo request to the specified address and returns the number of replies received
            and stored in ReplyBuffer. The <c>IcmpSendEcho</c> function is a synchronous function and returns after waiting for the time
            specified in the Timeout parameter for a response. If the return value is zero, call GetLastError for extended error information.
            </para>
            <para>
            The IcmpSendEcho2 and IcmpSendEcho2Ex functions are enhanced version of <c>IcmpSendEcho</c> that support asynchronous operation.
            The <c>IcmpSendEcho2Ex</c> function also allows the source IP address to be specified. This feature is useful on computers with
            multiple network interfaces.
            </para>
            <para>For IPv6, use the Icmp6CreateFile, Icmp6SendEcho2, and Icmp6ParseReplies functions.</para>
            <para>
            The <c>IcmpSendEcho</c> function is exported from the Icmp.dll on Windows 2000. The <c>IcmpSendEcho</c> function is exported from
            the Iphlpapi.dll on Windows XP and later. Windows version checking is not recommended to use this function. Applications
            requiring portability with this function across Windows 2000, Windows XP, Windows Server 2003 and later Windows versions should
            not statically link to either the Icmp.lib or the Iphlpapi.lib file. Instead, the application should check for the presence of
            <c>IcmpSendEcho</c> in the Iphlpapi.dll with calls to LoadLibrary and GetProcAddress. Failing that, the application should check
            for the presence of <c>IcmpSendEcho</c> in the Icmp.dll with calls to <c>LoadLibrary</c> and <c>GetProcAddress</c>.
            </para>
            <para>Note that the include directive for Iphlpapi.h header file must be placed before the Icmpapi.h header file.</para>
            <para>Examples</para>
            <para>
            The following example sends an ICMP echo request to the IP address specified on the command line and prints the information
            received from the first response.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IcmpSendEcho2(Vanara.PInvoke.IpHlpApi.SafeIcmpHandle,Vanara.PInvoke.HANDLE,Vanara.PInvoke.IpHlpApi.PIO_APC_ROUTINE,System.IntPtr,Vanara.PInvoke.Ws2_32.IN_ADDR,System.IntPtr,System.UInt16,Vanara.PInvoke.IpHlpApi.IP_OPTION_INFORMATION@,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            The <c>IcmpSendEcho2</c> function sends an IPv4 ICMP echo request and returns either immediately (if Event or ApcRoutine is non-
            <c>NULL</c>) or returns after the specified time-out. The ReplyBuffer contains the ICMP echo responses, if any.
            </summary>
            <param name="IcmpHandle">The open handle returned by the ICMPCreateFile function.</param>
            <param name="Event">
            <para>
            An event to be signaled whenever an ICMP response arrives. If this parameter is specified, it requires a handle to a valid event
            object. Use the CreateEvent or CreateEventEx function to create this event object.
            </para>
            <para>For more information on using events, see Event Objects.</para>
            </param>
            <param name="ApcRoutine">
            <para>
            The routine that is called when the calling thread is in an alertable thread and an ICMPv4 reply arrives. On Windows Vista and
            later, <c>PIO_APC_ROUTINE_DEFINED</c> must be defined to force the datatype for this parameter to <c>PIO_APC_ROUTINE</c> rather
            than <c>FARPROC</c>.
            </para>
            <para>
            On Windows Server 2003, Windows XP, and Windows 2000, <c>PIO_APC_ROUTINE_DEFINED</c> must not be defined to force the datatype
            for this parameter to <c>FARPROC</c>.
            </para>
            </param>
            <param name="ApcContext">
            An optional parameter passed to the callback routine specified in the ApcRoutine parameter whenever an ICMP response arrives or
            an error occurs.
            </param>
            <param name="DestinationAddress">The IPv4 destination of the echo request, in the form of an IPAddr structure.</param>
            <param name="RequestData">A pointer to a buffer that contains data to send in the request.</param>
            <param name="RequestSize">The size, in bytes, of the request data buffer pointed to by the RequestData parameter.</param>
            <param name="RequestOptions">
            <para>
            A pointer to the IP header options for the request, in the form of an IP_OPTION_INFORMATION structure. On a 64-bit platform, this
            parameter is in the form for an IP_OPTION_INFORMATION32 structure.
            </para>
            <para>This parameter may be <c>NULL</c> if no IP header options need to be specified.</para>
            </param>
            <param name="ReplyBuffer">
            <para>
            A pointer to a buffer to hold any replies to the request. Upon return, the buffer contains an array of ICMP_ECHO_REPLY structures
            followed by options and data. The buffer must be large enough to hold at least one <c>ICMP_ECHO_REPLY</c> structure plus
            RequestSize bytes of data.
            </para>
            <para>
            This buffer should also be large enough to also hold 8 more bytes of data (the size of an ICMP error message) plus space for an
            <c>IO_STATUS_BLOCK</c> structure.
            </para>
            </param>
            <param name="ReplySize">
            <para>
            The allocated size, in bytes, of the reply buffer. The buffer should be large enough to hold at least one ICMP_ECHO_REPLY
            structure plus RequestSize bytes of data.
            </para>
            <para>
            This buffer should also be large enough to also hold 8 more bytes of data (the size of an ICMP error message) plus space for an
            <c>IO_STATUS_BLOCK</c> structure.
            </para>
            </param>
            <param name="Timeout">The time, in milliseconds, to wait for replies.</param>
            <returns>
            <para>
            When called synchronously, the <c>IcmpSendEcho2</c> function returns the number of replies received and stored in ReplyBuffer. If
            the return value is zero, call GetLastError for extended error information.
            </para>
            <para>
            When called asynchronously, the <c>IcmpSendEcho2</c> function returns ERROR_IO_PENDING to indicate the operation is in progress.
            The results can be retrieved later when the event specified in the Event parameter signals or the callback function in the
            ApcRoutine parameter is called.
            </para>
            <para>If the return value is zero, call GetLastError for extended error information.</para>
            <para>If the function fails, the extended error code returned by GetLastError can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the IcmpHandle parameter contains an invalid handle.
            This error can also be returned if the ReplySize parameter specifies a value less than the size of an ICMP_ECHO_REPLY structure.
            </term>
            </item>
            <item>
            <term>ERROR_IO_PENDING</term>
            <term>
            The operation is in progress. This value is returned by a successful asynchronous call to IcmpSendEcho2 and is not an indication
            of an error.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Not enough memory is available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported. This error is returned if no IPv4 stack is on the local computer.</term>
            </item>
            <item>
            <term>IP_BUF_TOO_SMALL</term>
            <term>The size of the ReplyBuffer specified in the ReplySize parameter was too small.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>IcmpSendEcho2</c> function is called synchronously if the ApcRoutine or Event parameters are <c>NULL</c>. When called
            synchronously, the return value contains the number of replies received and stored in ReplyBuffer after waiting for the time
            specified in the Timeout parameter. If the return value is zero, call GetLastError for extended error information.
            </para>
            <para>
            The <c>IcmpSendEcho2</c> function is called asynchronously when either the ApcRoutine or Event parameters are specified. When
            called asynchronously, the ReplyBuffer and ReplySize parameters are required to accept the response. ICMP response data is copied
            to the ReplyBuffer provided and the application is signaled (when the Event parameter is specified) or the callback function is
            called (when the ApcRoutine parameter is specified). The application must parse the data pointed to by ReplyBuffer parameter
            using the IcmpParseReplies function.
            </para>
            <para>
            If the Event parameter is specified, the <c>IcmpSendEcho2</c> function is called asynchronously. The event specified in the Event
            parameter is signaled whenever an ICMP response arrives. Use the CreateEvent function to create this event object.
            </para>
            <para>
            If the ApcRoutine parameter is specified, the <c>IcmpSendEcho2</c> function is called asynchronously. The ApcRoutine parameter
            should point to a user-defined callback function. The callback function specified in the ApcRoutine parameter is called whenever
            an ICMP response arrives. The invocation of the callback function specified in the ApcRoutine parameter is serialized.
            </para>
            <para>
            If both the Event and ApcRoutine parameters are specified, the event specified in the Event parameter is signaled whenever an
            ICMP response arrives, but the callback function specified in the ApcRoutine parameter is ignored .
            </para>
            <para>
            On Windows Vista and later, any application that calls <c>IcmpSendEcho2</c> function asynchronously using the ApcRoutine
            parameter must define <c>PIO_APC_ROUTINE_DEFINED</c> to force the datatype for the ApcRoutine parameter to <c>PIO_APC_ROUTINE</c>
            rather than <c>FARPROC</c>.
            </para>
            <para>
            On Windows Vista and later, the callback function pointed to by the ApcRoutine must be defined as a function of type <c>VOID</c>
            with the following syntax:
            </para>
            <para>On Windows Vista and later, the parameters passed to the callback function include the following:</para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>IN PVOID ApcContext</term>
            <term>
            The ApcContext parameter passed to the IcmpSendEcho2 function. This parameter can be used by the application to identify the
            IcmpSendEcho2 request that the callback function is responding to.
            </term>
            </item>
            <item>
            <term>IN PIO_STATUS_BLOCK IoStatusBlock</term>
            <term>
            A pointer to a IO_STATUS_BLOCK. This variable contains the final completion status and information about the operation. The
            number of bytes actually received in the reply is returned in the Information member of the IO_STATUS_BLOCK struct. The
            IO_STATUS_BLOCK structure is defined in the Wdm.h header file.
            </term>
            </item>
            <item>
            <term>IN ULONG Reserved</term>
            <term>This parameter is reserved.</term>
            </item>
            </list>
            <para>
            On Windows Server 2003, Windows XP, and Windows 2000, any application that calls the <c>IcmpSendEcho2</c> function asynchronously
            using the ApcRoutine parameter must not define <c>PIO_APC_ROUTINE_DEFINED</c> to force the datatype for the ApcRoutine parameter
            to <c>FARPROC</c> rather than <c>PIO_APC_ROUTINE</c>.
            </para>
            <para>
            On Windows Server 2003 and Windows XP, the callback function pointed to by the ApcRoutine must be defined as a function of type
            <c>VOID</c> with the following syntax:
            </para>
            <para>On Windows Server 2003, Windows XP, and Windows 2000, the parameters passed to the callback function include the following:</para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>IN PVOID ApcContext</term>
            <term>
            The ApcContext parameter passed to the IcmpSendEcho2 function. This parameter can be used by the application to identify the
            IcmpSendEcho2 request that the callback function is responding to.
            </term>
            </item>
            </list>
            <para>
            The callback function specified in the ApcRoutine parameter must be implemented in the same process as the application calling
            the <c>IcmpSendEcho2</c> function. If the callback function is in a separate DLL, then the DLL should be loaded before calling
            the <c>IcmpSendEcho2</c> function.
            </para>
            <para>
            The <c>IcmpSendEcho2</c> function is exported from the Icmp.dll on Windows 2000. The <c>IcmpSendEcho2</c> function is exported
            from the Iphlpapi.dll on Windows XP and later. Windows version checking is not recommended to use this function. Applications
            requiring portability with this function across Windows 2000, Windows XP, Windows Server 2003 and later Windows versions should
            not statically link to either the Icmp.lib or the Iphlpapi.lib file. Instead, the application should check for the presence of
            <c>IcmpSendEcho2</c> in the Iphlpapi.dll with calls to LoadLibrary and GetProcAddress. Failing that, the application should check
            for the presence of <c>IcmpSendEcho2</c> in the Icmp.dll with calls to <c>LoadLibrary</c> and <c>GetProcAddress</c>.
            </para>
            <para>For IPv6, use the Icmp6CreateFile, Icmp6SendEcho2, and Icmp6ParseReplies functions.</para>
            <para>Note that the include directive for Iphlpapi.h header file must be placed before the Icmpapi.h header file.</para>
            <para>Examples</para>
            <para>
            The following example calls the <c>IcmpSendEcho2</c> function synchronously. The example sends an ICMP echo request to the IP
            address specified on the command line and prints the information received from the first response.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IcmpSendEcho2(Vanara.PInvoke.IpHlpApi.SafeIcmpHandle,Vanara.PInvoke.HANDLE,Vanara.PInvoke.IpHlpApi.PIO_APC_ROUTINE,System.IntPtr,Vanara.PInvoke.Ws2_32.IN_ADDR,System.IntPtr,System.UInt16,System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            The <c>IcmpSendEcho2</c> function sends an IPv4 ICMP echo request and returns either immediately (if Event or ApcRoutine is non-
            <c>NULL</c>) or returns after the specified time-out. The ReplyBuffer contains the ICMP echo responses, if any.
            </summary>
            <param name="IcmpHandle">The open handle returned by the ICMPCreateFile function.</param>
            <param name="Event">
            <para>
            An event to be signaled whenever an ICMP response arrives. If this parameter is specified, it requires a handle to a valid event
            object. Use the CreateEvent or CreateEventEx function to create this event object.
            </para>
            <para>For more information on using events, see Event Objects.</para>
            </param>
            <param name="ApcRoutine">
            <para>
            The routine that is called when the calling thread is in an alertable thread and an ICMPv4 reply arrives. On Windows Vista and
            later, <c>PIO_APC_ROUTINE_DEFINED</c> must be defined to force the datatype for this parameter to <c>PIO_APC_ROUTINE</c> rather
            than <c>FARPROC</c>.
            </para>
            <para>
            On Windows Server 2003, Windows XP, and Windows 2000, <c>PIO_APC_ROUTINE_DEFINED</c> must not be defined to force the datatype
            for this parameter to <c>FARPROC</c>.
            </para>
            </param>
            <param name="ApcContext">
            An optional parameter passed to the callback routine specified in the ApcRoutine parameter whenever an ICMP response arrives or
            an error occurs.
            </param>
            <param name="DestinationAddress">The IPv4 destination of the echo request, in the form of an IPAddr structure.</param>
            <param name="RequestData">A pointer to a buffer that contains data to send in the request.</param>
            <param name="RequestSize">The size, in bytes, of the request data buffer pointed to by the RequestData parameter.</param>
            <param name="RequestOptions">
            <para>
            A pointer to the IP header options for the request, in the form of an IP_OPTION_INFORMATION structure. On a 64-bit platform, this
            parameter is in the form for an IP_OPTION_INFORMATION32 structure.
            </para>
            <para>This parameter may be <c>NULL</c> if no IP header options need to be specified.</para>
            </param>
            <param name="ReplyBuffer">
            <para>
            A pointer to a buffer to hold any replies to the request. Upon return, the buffer contains an array of ICMP_ECHO_REPLY structures
            followed by options and data. The buffer must be large enough to hold at least one <c>ICMP_ECHO_REPLY</c> structure plus
            RequestSize bytes of data.
            </para>
            <para>
            This buffer should also be large enough to also hold 8 more bytes of data (the size of an ICMP error message) plus space for an
            <c>IO_STATUS_BLOCK</c> structure.
            </para>
            </param>
            <param name="ReplySize">
            <para>
            The allocated size, in bytes, of the reply buffer. The buffer should be large enough to hold at least one ICMP_ECHO_REPLY
            structure plus RequestSize bytes of data.
            </para>
            <para>
            This buffer should also be large enough to also hold 8 more bytes of data (the size of an ICMP error message) plus space for an
            <c>IO_STATUS_BLOCK</c> structure.
            </para>
            </param>
            <param name="Timeout">The time, in milliseconds, to wait for replies.</param>
            <returns>
            <para>
            When called synchronously, the <c>IcmpSendEcho2</c> function returns the number of replies received and stored in ReplyBuffer. If
            the return value is zero, call GetLastError for extended error information.
            </para>
            <para>
            When called asynchronously, the <c>IcmpSendEcho2</c> function returns ERROR_IO_PENDING to indicate the operation is in progress.
            The results can be retrieved later when the event specified in the Event parameter signals or the callback function in the
            ApcRoutine parameter is called.
            </para>
            <para>If the return value is zero, call GetLastError for extended error information.</para>
            <para>If the function fails, the extended error code returned by GetLastError can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the IcmpHandle parameter contains an invalid handle.
            This error can also be returned if the ReplySize parameter specifies a value less than the size of an ICMP_ECHO_REPLY structure.
            </term>
            </item>
            <item>
            <term>ERROR_IO_PENDING</term>
            <term>
            The operation is in progress. This value is returned by a successful asynchronous call to IcmpSendEcho2 and is not an indication
            of an error.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Not enough memory is available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported. This error is returned if no IPv4 stack is on the local computer.</term>
            </item>
            <item>
            <term>IP_BUF_TOO_SMALL</term>
            <term>The size of the ReplyBuffer specified in the ReplySize parameter was too small.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>IcmpSendEcho2</c> function is called synchronously if the ApcRoutine or Event parameters are <c>NULL</c>. When called
            synchronously, the return value contains the number of replies received and stored in ReplyBuffer after waiting for the time
            specified in the Timeout parameter. If the return value is zero, call GetLastError for extended error information.
            </para>
            <para>
            The <c>IcmpSendEcho2</c> function is called asynchronously when either the ApcRoutine or Event parameters are specified. When
            called asynchronously, the ReplyBuffer and ReplySize parameters are required to accept the response. ICMP response data is copied
            to the ReplyBuffer provided and the application is signaled (when the Event parameter is specified) or the callback function is
            called (when the ApcRoutine parameter is specified). The application must parse the data pointed to by ReplyBuffer parameter
            using the IcmpParseReplies function.
            </para>
            <para>
            If the Event parameter is specified, the <c>IcmpSendEcho2</c> function is called asynchronously. The event specified in the Event
            parameter is signaled whenever an ICMP response arrives. Use the CreateEvent function to create this event object.
            </para>
            <para>
            If the ApcRoutine parameter is specified, the <c>IcmpSendEcho2</c> function is called asynchronously. The ApcRoutine parameter
            should point to a user-defined callback function. The callback function specified in the ApcRoutine parameter is called whenever
            an ICMP response arrives. The invocation of the callback function specified in the ApcRoutine parameter is serialized.
            </para>
            <para>
            If both the Event and ApcRoutine parameters are specified, the event specified in the Event parameter is signaled whenever an
            ICMP response arrives, but the callback function specified in the ApcRoutine parameter is ignored .
            </para>
            <para>
            On Windows Vista and later, any application that calls <c>IcmpSendEcho2</c> function asynchronously using the ApcRoutine
            parameter must define <c>PIO_APC_ROUTINE_DEFINED</c> to force the datatype for the ApcRoutine parameter to <c>PIO_APC_ROUTINE</c>
            rather than <c>FARPROC</c>.
            </para>
            <para>
            On Windows Vista and later, the callback function pointed to by the ApcRoutine must be defined as a function of type <c>VOID</c>
            with the following syntax:
            </para>
            <para>On Windows Vista and later, the parameters passed to the callback function include the following:</para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>IN PVOID ApcContext</term>
            <term>
            The ApcContext parameter passed to the IcmpSendEcho2 function. This parameter can be used by the application to identify the
            IcmpSendEcho2 request that the callback function is responding to.
            </term>
            </item>
            <item>
            <term>IN PIO_STATUS_BLOCK IoStatusBlock</term>
            <term>
            A pointer to a IO_STATUS_BLOCK. This variable contains the final completion status and information about the operation. The
            number of bytes actually received in the reply is returned in the Information member of the IO_STATUS_BLOCK struct. The
            IO_STATUS_BLOCK structure is defined in the Wdm.h header file.
            </term>
            </item>
            <item>
            <term>IN ULONG Reserved</term>
            <term>This parameter is reserved.</term>
            </item>
            </list>
            <para>
            On Windows Server 2003, Windows XP, and Windows 2000, any application that calls the <c>IcmpSendEcho2</c> function asynchronously
            using the ApcRoutine parameter must not define <c>PIO_APC_ROUTINE_DEFINED</c> to force the datatype for the ApcRoutine parameter
            to <c>FARPROC</c> rather than <c>PIO_APC_ROUTINE</c>.
            </para>
            <para>
            On Windows Server 2003 and Windows XP, the callback function pointed to by the ApcRoutine must be defined as a function of type
            <c>VOID</c> with the following syntax:
            </para>
            <para>On Windows Server 2003, Windows XP, and Windows 2000, the parameters passed to the callback function include the following:</para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>IN PVOID ApcContext</term>
            <term>
            The ApcContext parameter passed to the IcmpSendEcho2 function. This parameter can be used by the application to identify the
            IcmpSendEcho2 request that the callback function is responding to.
            </term>
            </item>
            </list>
            <para>
            The callback function specified in the ApcRoutine parameter must be implemented in the same process as the application calling
            the <c>IcmpSendEcho2</c> function. If the callback function is in a separate DLL, then the DLL should be loaded before calling
            the <c>IcmpSendEcho2</c> function.
            </para>
            <para>
            The <c>IcmpSendEcho2</c> function is exported from the Icmp.dll on Windows 2000. The <c>IcmpSendEcho2</c> function is exported
            from the Iphlpapi.dll on Windows XP and later. Windows version checking is not recommended to use this function. Applications
            requiring portability with this function across Windows 2000, Windows XP, Windows Server 2003 and later Windows versions should
            not statically link to either the Icmp.lib or the Iphlpapi.lib file. Instead, the application should check for the presence of
            <c>IcmpSendEcho2</c> in the Iphlpapi.dll with calls to LoadLibrary and GetProcAddress. Failing that, the application should check
            for the presence of <c>IcmpSendEcho2</c> in the Icmp.dll with calls to <c>LoadLibrary</c> and <c>GetProcAddress</c>.
            </para>
            <para>For IPv6, use the Icmp6CreateFile, Icmp6SendEcho2, and Icmp6ParseReplies functions.</para>
            <para>Note that the include directive for Iphlpapi.h header file must be placed before the Icmpapi.h header file.</para>
            <para>Examples</para>
            <para>
            The following example calls the <c>IcmpSendEcho2</c> function synchronously. The example sends an ICMP echo request to the IP
            address specified on the command line and prints the information received from the first response.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IcmpSendEcho2Ex(Vanara.PInvoke.IpHlpApi.SafeIcmpHandle,Vanara.PInvoke.HANDLE,Vanara.PInvoke.IpHlpApi.PIO_APC_ROUTINE,System.IntPtr,Vanara.PInvoke.Ws2_32.IN_ADDR,Vanara.PInvoke.Ws2_32.IN_ADDR,System.IntPtr,System.UInt16,Vanara.PInvoke.IpHlpApi.IP_OPTION_INFORMATION@,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            The <c>IcmpSendEcho2Ex</c> function sends an IPv4 ICMP echo request and returns either immediately (if Event or ApcRoutine is
            non- <c>NULL</c>) or returns after the specified time-out. The ReplyBuffer contains the ICMP responses, if any.
            </summary>
            <param name="IcmpHandle">An open handle returned by the ICMPCreateFile function.</param>
            <param name="Event">
            <para>
            An event to be signaled whenever an ICMP response arrives. If this parameter is specified, it requires a handle to a valid event
            object. Use the CreateEvent or CreateEventEx function to create this event object.
            </para>
            <para>For more information on using events, see Event Objects.</para>
            </param>
            <param name="ApcRoutine">
            The routine that is called when the calling thread is in an alertable thread and an ICMP reply arrives.
            <c>PIO_APC_ROUTINE_DEFINED</c> must be defined to force the datatype for this parameter to <c>PIO_APC_ROUTINE</c> rather than <c>FARPROC</c>.
            </param>
            <param name="ApcContext">
            An optional parameter passed to the callback routine specified in the ApcRoutine parameter whenever an ICMP response arrives or
            an error occurs.
            </param>
            <param name="SourceAddress">
            The IPv4 source address on which to issue the echo request. This address is in the form of an IPAddr structure.
            </param>
            <param name="DestinationAddress">
            The IPv4 destination address for the echo request. This address is in the form of an IPAddr structure.
            </param>
            <param name="RequestData">A pointer to a buffer that contains data to send in the request.</param>
            <param name="RequestSize">The size, in bytes, of the request data buffer pointed to by the RequestData parameter.</param>
            <param name="RequestOptions">
            <para>
            A pointer to the IP header options for the request, in the form of an IP_OPTION_INFORMATION structure. On a 64-bit platform, this
            parameter is in the form for an IP_OPTION_INFORMATION32 structure.
            </para>
            <para>This parameter may be <c>NULL</c> if no IP header options need to be specified.</para>
            </param>
            <param name="ReplyBuffer">
            <para>
            A pointer to a buffer to hold any replies to the request. Upon return, the buffer contains an array of ICMP_ECHO_REPLY structures
            followed by options and data. The buffer must be large enough to hold at least one <c>ICMP_ECHO_REPLY</c> structure plus
            RequestSize bytes of data.
            </para>
            <para>
            This buffer should also be large enough to also hold 8 more bytes of data (the size of an ICMP error message) plus space for an
            <c>IO_STATUS_BLOCK</c> structure.
            </para>
            </param>
            <param name="ReplySize">
            <para>
            The allocated size, in bytes, of the reply buffer. The buffer should be large enough to hold at least one ICMP_ECHO_REPLY
            structure plus RequestSize bytes of data.
            </para>
            <para>
            This buffer should also be large enough to also hold 8 more bytes of data (the size of an ICMP error message) plus space for an
            <c>IO_STATUS_BLOCK</c> structure.
            </para>
            </param>
            <param name="Timeout">The time, in milliseconds, to wait for replies.</param>
            <returns>
            <para>
            When called synchronously, the <c>IcmpSendEcho2Ex</c> function returns the number of replies received and stored in ReplyBuffer.
            If the return value is zero, call GetLastError for extended error information.
            </para>
            <para>
            When called asynchronously, the <c>IcmpSendEcho2Ex</c> function returns ERROR_IO_PENDING to indicate the operation is in
            progress. The results can be retrieved later when the event specified in the Event parameter signals or the callback function in
            the ApcRoutine parameter is called.
            </para>
            <para>If the return value is zero, call GetLastError for extended error information.</para>
            <para>If the function fails, the extended error code returned by GetLastError can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the IcmpHandle parameter contains an invalid handle.
            This error can also be returned if the ReplySize parameter specifies a value less than the size of an ICMP_ECHO_REPLY structure.
            </term>
            </item>
            <item>
            <term>ERROR_IO_PENDING</term>
            <term>
            The operation is in progress. This value is returned by a successful asynchronous call to IcmpSendEcho2Ex and is not an
            indication of an error.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Not enough memory is available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported. This error is returned if no IPv4 stack is on the local computer.</term>
            </item>
            <item>
            <term>IP_BUF_TOO_SMALL</term>
            <term>The size of the ReplyBuffer specified in the ReplySize parameter was too small.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>IcmpSendEcho2Ex</c> function is available on Windows Server 2008 and later.</para>
            <para>
            The <c>IcmpSendEcho2Ex</c> function is an enhanced version of the IcmpSendEcho2 function that allows the user to specify the IPv4
            source address on which to issue the ICMP request. The <c>IcmpSendEcho2Ex</c> function is useful in cases where a computer has
            multiple network interfaces.
            </para>
            <para>
            The <c>IcmpSendEcho2Ex</c> function is called synchronously if the ApcRoutine or Event parameters are <c>NULL</c>. When called
            synchronously, the return value contains the number of replies received and stored in ReplyBuffer after waiting for the time
            specified in the Timeout parameter. If the return value is zero, call GetLastError for extended error information.
            </para>
            <para>
            The <c>IcmpSendEcho2Ex</c> function is called asynchronously when either the ApcRoutine or Event parameters are specified. When
            called asynchronously, the ReplyBuffer and ReplySize parameters are required to accept the response. ICMP response data is copied
            to the ReplyBuffer provided and the application is signaled (when the Event parameter is specified) or the callback function is
            called (when the ApcRoutine parameter is specified). The application must parse the data pointed to by ReplyBuffer parameter
            using the IcmpParseReplies function.
            </para>
            <para>
            If the Event parameter is specified, the <c>IcmpSendEcho2Ex</c> function is called asynchronously. The event specified in the
            Event parameter is signaled whenever an ICMP response arrives. Use the CreateEvent function to create this event object.
            </para>
            <para>
            If the ApcRoutine parameter is specified, the <c>IcmpSendEcho2Ex</c> function is called asynchronously. The ApcRoutine parameter
            should point to a user-defined callback function. The callback function specified in the ApcRoutine parameter is called whenever
            an ICMP response arrives. The invocation of the callback function specified in the ApcRoutine parameter is serialized.
            </para>
            <para>
            If both the Event and ApcRoutine parameters are specified, the event specified in the Event parameter is signaled whenever an
            ICMP response arrives, but the callback function specified in the ApcRoutine parameter is ignored .
            </para>
            <para>
            Any application that calls the <c>IcmpSendEcho2Ex</c> function asynchronously using the ApcRoutine parameter must define
            <c>PIO_APC_ROUTINE_DEFINED</c> to force the datatype for the ApcRoutine parameter to <c>PIO_APC_ROUTINE</c> rather than <c>FARPROC</c>.
            </para>
            <para>
            The callback function pointed to by the ApcRoutine must be defined as a function of type <c>VOID</c> with the following syntax:
            </para>
            <para>The parameters passed to the callback function include the following:</para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>IN PVOID ApcContext</term>
            <term>
            The ApcContext parameter passed to the IcmpSendEcho2Ex function. This parameter can be used by the application to identify the
            IcmpSendEcho2Ex request that the callback function is responding to.
            </term>
            </item>
            <item>
            <term>IN PIO_STATUS_BLOCK IoStatusBlock</term>
            <term>
            A pointer to a IO_STATUS_BLOCK. This variable contains the final completion status and information about the operation. The
            number of bytes actually received in the reply is returned in the Information member of the IO_STATUS_BLOCK struct. The
            IO_STATUS_BLOCK structure is defined in the Wdm.h header file.
            </term>
            </item>
            <item>
            <term>IN ULONG Reserved</term>
            <term>This parameter is reserved.</term>
            </item>
            </list>
            <para>
            The callback function specified in the ApcRoutine parameter must be implemented in the same process as the application calling
            the <c>IcmpSendEcho2Ex</c> function. If the callback function is in a separate DLL, then the DLL should be loaded before calling
            the <c>IcmpSendEcho2Ex</c> function.
            </para>
            <para>For IPv6, use the Icmp6CreateFile, Icmp6SendEcho2, and Icmp6ParseReplies functions.</para>
            <para>Note that the include directive for Iphlpapi.h header file must be placed before the Icmpapi.h header file.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IcmpSendEcho2Ex(Vanara.PInvoke.IpHlpApi.SafeIcmpHandle,Vanara.PInvoke.HANDLE,Vanara.PInvoke.IpHlpApi.PIO_APC_ROUTINE,System.IntPtr,Vanara.PInvoke.Ws2_32.IN_ADDR,Vanara.PInvoke.Ws2_32.IN_ADDR,System.IntPtr,System.UInt16,System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            The <c>IcmpSendEcho2Ex</c> function sends an IPv4 ICMP echo request and returns either immediately (if Event or ApcRoutine is
            non- <c>NULL</c>) or returns after the specified time-out. The ReplyBuffer contains the ICMP responses, if any.
            </summary>
            <param name="IcmpHandle">An open handle returned by the ICMPCreateFile function.</param>
            <param name="Event">
            <para>
            An event to be signaled whenever an ICMP response arrives. If this parameter is specified, it requires a handle to a valid event
            object. Use the CreateEvent or CreateEventEx function to create this event object.
            </para>
            <para>For more information on using events, see Event Objects.</para>
            </param>
            <param name="ApcRoutine">
            The routine that is called when the calling thread is in an alertable thread and an ICMP reply arrives.
            <c>PIO_APC_ROUTINE_DEFINED</c> must be defined to force the datatype for this parameter to <c>PIO_APC_ROUTINE</c> rather than <c>FARPROC</c>.
            </param>
            <param name="ApcContext">
            An optional parameter passed to the callback routine specified in the ApcRoutine parameter whenever an ICMP response arrives or
            an error occurs.
            </param>
            <param name="SourceAddress">
            The IPv4 source address on which to issue the echo request. This address is in the form of an IPAddr structure.
            </param>
            <param name="DestinationAddress">
            The IPv4 destination address for the echo request. This address is in the form of an IPAddr structure.
            </param>
            <param name="RequestData">A pointer to a buffer that contains data to send in the request.</param>
            <param name="RequestSize">The size, in bytes, of the request data buffer pointed to by the RequestData parameter.</param>
            <param name="RequestOptions">
            <para>
            A pointer to the IP header options for the request, in the form of an IP_OPTION_INFORMATION structure. On a 64-bit platform, this
            parameter is in the form for an IP_OPTION_INFORMATION32 structure.
            </para>
            <para>This parameter may be <c>NULL</c> if no IP header options need to be specified.</para>
            </param>
            <param name="ReplyBuffer">
            <para>
            A pointer to a buffer to hold any replies to the request. Upon return, the buffer contains an array of ICMP_ECHO_REPLY structures
            followed by options and data. The buffer must be large enough to hold at least one <c>ICMP_ECHO_REPLY</c> structure plus
            RequestSize bytes of data.
            </para>
            <para>
            This buffer should also be large enough to also hold 8 more bytes of data (the size of an ICMP error message) plus space for an
            <c>IO_STATUS_BLOCK</c> structure.
            </para>
            </param>
            <param name="ReplySize">
            <para>
            The allocated size, in bytes, of the reply buffer. The buffer should be large enough to hold at least one ICMP_ECHO_REPLY
            structure plus RequestSize bytes of data.
            </para>
            <para>
            This buffer should also be large enough to also hold 8 more bytes of data (the size of an ICMP error message) plus space for an
            <c>IO_STATUS_BLOCK</c> structure.
            </para>
            </param>
            <param name="Timeout">The time, in milliseconds, to wait for replies.</param>
            <returns>
            <para>
            When called synchronously, the <c>IcmpSendEcho2Ex</c> function returns the number of replies received and stored in ReplyBuffer.
            If the return value is zero, call GetLastError for extended error information.
            </para>
            <para>
            When called asynchronously, the <c>IcmpSendEcho2Ex</c> function returns ERROR_IO_PENDING to indicate the operation is in
            progress. The results can be retrieved later when the event specified in the Event parameter signals or the callback function in
            the ApcRoutine parameter is called.
            </para>
            <para>If the return value is zero, call GetLastError for extended error information.</para>
            <para>If the function fails, the extended error code returned by GetLastError can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the IcmpHandle parameter contains an invalid handle.
            This error can also be returned if the ReplySize parameter specifies a value less than the size of an ICMP_ECHO_REPLY structure.
            </term>
            </item>
            <item>
            <term>ERROR_IO_PENDING</term>
            <term>
            The operation is in progress. This value is returned by a successful asynchronous call to IcmpSendEcho2Ex and is not an
            indication of an error.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Not enough memory is available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported. This error is returned if no IPv4 stack is on the local computer.</term>
            </item>
            <item>
            <term>IP_BUF_TOO_SMALL</term>
            <term>The size of the ReplyBuffer specified in the ReplySize parameter was too small.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>IcmpSendEcho2Ex</c> function is available on Windows Server 2008 and later.</para>
            <para>
            The <c>IcmpSendEcho2Ex</c> function is an enhanced version of the IcmpSendEcho2 function that allows the user to specify the IPv4
            source address on which to issue the ICMP request. The <c>IcmpSendEcho2Ex</c> function is useful in cases where a computer has
            multiple network interfaces.
            </para>
            <para>
            The <c>IcmpSendEcho2Ex</c> function is called synchronously if the ApcRoutine or Event parameters are <c>NULL</c>. When called
            synchronously, the return value contains the number of replies received and stored in ReplyBuffer after waiting for the time
            specified in the Timeout parameter. If the return value is zero, call GetLastError for extended error information.
            </para>
            <para>
            The <c>IcmpSendEcho2Ex</c> function is called asynchronously when either the ApcRoutine or Event parameters are specified. When
            called asynchronously, the ReplyBuffer and ReplySize parameters are required to accept the response. ICMP response data is copied
            to the ReplyBuffer provided and the application is signaled (when the Event parameter is specified) or the callback function is
            called (when the ApcRoutine parameter is specified). The application must parse the data pointed to by ReplyBuffer parameter
            using the IcmpParseReplies function.
            </para>
            <para>
            If the Event parameter is specified, the <c>IcmpSendEcho2Ex</c> function is called asynchronously. The event specified in the
            Event parameter is signaled whenever an ICMP response arrives. Use the CreateEvent function to create this event object.
            </para>
            <para>
            If the ApcRoutine parameter is specified, the <c>IcmpSendEcho2Ex</c> function is called asynchronously. The ApcRoutine parameter
            should point to a user-defined callback function. The callback function specified in the ApcRoutine parameter is called whenever
            an ICMP response arrives. The invocation of the callback function specified in the ApcRoutine parameter is serialized.
            </para>
            <para>
            If both the Event and ApcRoutine parameters are specified, the event specified in the Event parameter is signaled whenever an
            ICMP response arrives, but the callback function specified in the ApcRoutine parameter is ignored .
            </para>
            <para>
            Any application that calls the <c>IcmpSendEcho2Ex</c> function asynchronously using the ApcRoutine parameter must define
            <c>PIO_APC_ROUTINE_DEFINED</c> to force the datatype for the ApcRoutine parameter to <c>PIO_APC_ROUTINE</c> rather than <c>FARPROC</c>.
            </para>
            <para>
            The callback function pointed to by the ApcRoutine must be defined as a function of type <c>VOID</c> with the following syntax:
            </para>
            <para>The parameters passed to the callback function include the following:</para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>IN PVOID ApcContext</term>
            <term>
            The ApcContext parameter passed to the IcmpSendEcho2Ex function. This parameter can be used by the application to identify the
            IcmpSendEcho2Ex request that the callback function is responding to.
            </term>
            </item>
            <item>
            <term>IN PIO_STATUS_BLOCK IoStatusBlock</term>
            <term>
            A pointer to a IO_STATUS_BLOCK. This variable contains the final completion status and information about the operation. The
            number of bytes actually received in the reply is returned in the Information member of the IO_STATUS_BLOCK struct. The
            IO_STATUS_BLOCK structure is defined in the Wdm.h header file.
            </term>
            </item>
            <item>
            <term>IN ULONG Reserved</term>
            <term>This parameter is reserved.</term>
            </item>
            </list>
            <para>
            The callback function specified in the ApcRoutine parameter must be implemented in the same process as the application calling
            the <c>IcmpSendEcho2Ex</c> function. If the callback function is in a separate DLL, then the DLL should be loaded before calling
            the <c>IcmpSendEcho2Ex</c> function.
            </para>
            <para>For IPv6, use the Icmp6CreateFile, Icmp6SendEcho2, and Icmp6ParseReplies functions.</para>
            <para>Note that the include directive for Iphlpapi.h header file must be placed before the Icmpapi.h header file.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IO_STATUS_BLOCK">
            <summary>
            A driver sets an IRP's I/O status block to indicate the final status of an I/O request, before calling IoCompleteRequest for the IRP.
            </summary>
            <remarks>
            <para>
            Unless a driver's dispatch routine completes an IRP with an error status value, the lowest-level driver in the chain frequently
            sets the IRP's I/O status block to the values that will be returned to the original requester of the I/O operation.
            </para>
            <para>
            The IoCompletion routines of higher-level drivers usually check the I/O status block in IRPs completed by lower drivers. By
            design, the I/O status block in an IRP is the only information passed back from the underlying device driver to all higher-level
            drivers' IoCompletion routines.
            </para>
            <para>
            The operating system implements support routines that write <c>IO_STATUS_BLOCK</c> values to caller-supplied output buffers. For
            example, see ZwOpenFile or NtOpenFile. These routines return status codes that might not match the status codes in the
            <c>IO_STATUS_BLOCK</c> structures. If one of these routines returns STATUS_PENDING, the caller should wait for the I/O operation
            to complete, and then check the status code in the <c>IO_STATUS_BLOCK</c> structure to determine the final status of the
            operation. If the routine returns a status code other than STATUS_PENDING, the caller should rely on this status code instead of
            the status code in the <c>IO_STATUS_BLOCK</c> structure.
            </para>
            <para>For more information, see I/O Status Blocks.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IO_STATUS_BLOCK.Status">
            <summary>
            This is the completion status, either STATUS_SUCCESS if the requested operation was completed successfully or an
            informational, warning, or error STATUS_XXX value. For more information, see Using NTSTATUS values.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IO_STATUS_BLOCK.Information">
            <summary>
            This is set to a request-dependent value. For example, on successful completion of a transfer request, this is set to the
            number of bytes transferred. If a transfer request is completed with another STATUS_XXX, this member is set to zero.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.SafeIcmpHandle">
            <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> for an IMCP handle that is disposed using <see cref="M:Vanara.PInvoke.IpHlpApi.IcmpCloseHandle(System.IntPtr)"/>.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SafeIcmpHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.SafeIcmpHandle"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
            <see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).
            </param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SafeIcmpHandle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.SafeIcmpHandle"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SafeIcmpHandle.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_COMPARTMENT_ID_PRIMARY">
            <summary>The primary compartment.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_COMPARTMENT_ID_UNSPECIFIED">
            <summary>The unspecified compartment.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IF_ADMINISTRATIVE_STATE">
            <summary>Datalink Interface Administrative State. Indicates whether the interface has been administratively enabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IF_ADMINISTRATIVE_STATE.IF_ADMINISTRATIVE_DISABLED">
            <summary>If disabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IF_ADMINISTRATIVE_STATE.IF_ADMINISTRATIVE_ENABLED">
            <summary>If enabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IF_ADMINISTRATIVE_STATE.IF_ADMINISTRATIVE_DEMANDDIAL">
            <summary>If dial on demand.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IF_OPER_STATUS">
            <summary>The IF_OPER_STATUS enumeration specifies the operational status of an interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IF_OPER_STATUS.IfOperStatusUp">
            <summary>The interface is up and operational. The interface is able to pass packets.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IF_OPER_STATUS.IfOperStatusDown">
            <summary>The interface is not down and not operational. The interface is unable to pass packets.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IF_OPER_STATUS.IfOperStatusTesting">
            <summary>The interface is being tested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IF_OPER_STATUS.IfOperStatusUnknown">
            <summary>The interface status is unknown.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IF_OPER_STATUS.IfOperStatusDormant">
            <summary>
            The interface is not in a condition to pass packets. The interface is not up, but is in a pending state, waiting for some
            external event. This state identifies the situation where the interface is waiting for events to place it in the up state.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IF_OPER_STATUS.IfOperStatusNotPresent">
            <summary>
            This state is a refinement on the down state which indicates that the interface is down specifically because some component
            (for example, a hardware component) is not present in the system.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IF_OPER_STATUS.IfOperStatusLowerLayerDown">
            <summary>
            This state is a refinement on the down state. The interface is operational, but a networking layer below the interface is not operational.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NET_IF_ACCESS_TYPE">
            <summary>The NET_IF_ACCESS_TYPE enumeration type specifies the NDIS network interface access type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_ACCESS_TYPE.NET_IF_ACCESS_LOOPBACK">
            <summary>
            Specifies the loopback access type. This access type indicates that the interface loops back transmit data as receive data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_ACCESS_TYPE.NET_IF_ACCESS_BROADCAST">
            <summary>
            Specifies the LAN access type, which includes Ethernet. This access type indicates that the interface provides native support
            for multicast or broadcast services.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_ACCESS_TYPE.NET_IF_ACCESS_POINT_TO_POINT">
            <summary>Specifies point-to-point access that supports CoNDIS and WAN, except for non-broadcast multi-access (NBMA) interfaces.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_ACCESS_TYPE.NET_IF_ACCESS_POINT_TO_MULTI_POINT">
            <summary>
            Specifies point-to-multipoint access that supports non-broadcast multi-access (NBMA) media, including the "RAS Internal"
            interface, and native (non-LANE) ATM.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_ACCESS_TYPE.NET_IF_ACCESS_MAXIMUM">
            <summary>A maximum value for testing purposes.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NET_IF_ADMIN_STATUS">
            <summary>
            The NET_IF_ADMIN_STATUS enumeration type specifies the NDIS network interface administrative status, as described in RFC 2863.
            </summary>
            <remarks>For more information on RFC 2863, see "The Interfaces Group MIB".</remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_ADMIN_STATUS.NET_IF_ADMIN_STATUS_UP">
            <summary>
            Specifies that the interface is initialized and enabled, but the interface is not necessarily ready to transmit and receive
            network data because that depends on the operational status of the interface. For more information about the operational
            status of an interface, see OID_GEN_OPERATIONAL_STATUS.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_ADMIN_STATUS.NET_IF_ADMIN_STATUS_DOWN">
            <summary>Specifies that the interface is down, and this interface cannot be used to transmit or receive network data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_ADMIN_STATUS.NET_IF_ADMIN_STATUS_TESTING">
            <summary>Specifies that the interface is in a test mode, and no network data can be transmitted or received.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NET_IF_CONNECTION_TYPE">
            <summary>The NET_IF_CONNECTION_TYPE enumeration type specifies the NDIS network interface connection type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_CONNECTION_TYPE.NET_IF_CONNECTION_DEDICATED">
            <summary>
            Specifies the dedicated connection type. The connection comes up automatically when media sense is TRUE. For example, an
            Ethernet connection is dedicated.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_CONNECTION_TYPE.NET_IF_CONNECTION_PASSIVE">
            <summary>
            Specifies the passive connection type. The other end must bring up the connection to the local station. For example, the RAS
            interface is passive.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_CONNECTION_TYPE.NET_IF_CONNECTION_DEMAND">
            <summary>
            Specifies the demand-dial connection type. A demand-dial connection comes up in response to a local action--for example,
            sending a packet.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_CONNECTION_TYPE.NET_IF_CONNECTION_MAXIMUM">
            <summary>A maximum value for testing purposes.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NET_IF_DIRECTION_TYPE">
            <summary>The NET_IF_ACCESS_TYPE enumeration type specifies the NDIS network interface direction type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_DIRECTION_TYPE.NET_IF_DIRECTION_SENDRECEIVE">
            <summary>
            Indicates the send and receive direction type. This direction type indicates that the NDIS network interface can send and
            receive data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_DIRECTION_TYPE.NET_IF_DIRECTION_SENDONLY">
            <summary>
            Indicates the send only direction type. This direction type indicates that the NDIS network interface can only send data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_DIRECTION_TYPE.NET_IF_DIRECTION_RECEIVEONLY">
            <summary>
            Indicates the receive only direction type. This direction type indicates that the NDIS network interface can only receive data.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_DIRECTION_TYPE.NET_IF_DIRECTION_MAXIMUM">
            <summary>A maximum value for testing purposes.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NET_IF_MEDIA_CONNECT_STATE">
            <summary>The NET_IF_MEDIA_CONNECT_STATE enumeration type specifies the NDIS network interface connection state.</summary>
            <remarks>
            The NDIS_MEDIA_CONNECT_STATE enumeration type, used to describe NDIS interface providers in the OID_GEN_MEDIA_CONNECT_STATUS_EX
            OID, is equivalent to this enumeration.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_MEDIA_CONNECT_STATE.MediaConnectStateUnknown">
            <summary>The connection state of the interface is unknown.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_MEDIA_CONNECT_STATE.MediaConnectStateConnected">
            <summary>The interface is connected to the network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_MEDIA_CONNECT_STATE.MediaConnectStateDisconnected">
            <summary>The interface is not connected to the network.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NET_IF_MEDIA_DUPLEX_STATE">
            <summary>The NET_IF_MEDIA_DUPLEX_STATE enumeration type specifies the NDIS network interface duplex state.</summary>
            <remarks>
            The NDIS_MEDIA_DUPLEX_STATE, enumeration type, used to describe NDIS interface providers in the OID_GEN_MEDIA_DUPLEX_STATE, OID,
            is equivalent to this enumeration.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_MEDIA_DUPLEX_STATE.MediaDuplexStateUnknown">
            <summary>The duplex state of the miniport adapter is unknown.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_MEDIA_DUPLEX_STATE.MediaDuplexStateHalf">
            <summary>The miniport adapter can transmit or receive but not both simultaneously.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_MEDIA_DUPLEX_STATE.MediaDuplexStateFull">
            <summary>The miniport adapter can transmit and receive simultaneously.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NET_IF_OPER_STATUS">
            <summary>The IF_OPER_STATUS enumeration specifies the operational status of an interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_OPER_STATUS.NET_IF_OPER_STATUS_UP">
            <summary>The interface is up and operational. The interface is able to pass packets.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_OPER_STATUS.NET_IF_OPER_STATUS_DOWN">
            <summary>The interface is not down and not operational. The interface is unable to pass packets.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_OPER_STATUS.NET_IF_OPER_STATUS_TESTING">
            <summary>The interface is being tested.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_OPER_STATUS.NET_IF_OPER_STATUS_UNKNOWN">
            <summary>The interface status is unknown.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_OPER_STATUS.NET_IF_OPER_STATUS_DORMANT">
            <summary>
            The interface is not in a condition to pass packets. The interface is not up, but is in a pending state, waiting for some
            external event. This state identifies the situation where the interface is waiting for events to place it in the up state.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_OPER_STATUS.NET_IF_OPER_STATUS_NOT_PRESENT">
            <summary>
            This state is a refinement on the down state which indicates that the interface is down specifically because some component
            (for example, a hardware component) is not present in the system.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_OPER_STATUS.NET_IF_OPER_STATUS_LOWER_LAYER_DOWN">
            <summary>
            This state is a refinement on the down state. The interface is operational, but a networking layer below the interface is not operational.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NET_IF_RCV_ADDRESS_TYPE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_RCV_ADDRESS_TYPE.NET_IF_RCV_ADDRESS_TYPE_OTHER">
            <summary>
            The net if RCV address type other
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_RCV_ADDRESS_TYPE.NET_IF_RCV_ADDRESS_TYPE_VOLATILE">
            <summary>
            The net if RCV address type volatile
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_RCV_ADDRESS_TYPE.NET_IF_RCV_ADDRESS_TYPE_NON_VOLATILE">
            <summary>
            The net if RCV address type non volatile
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TUNNEL_TYPE">
            <summary>
            The TUNNEL_TYPE enumeration type defines the encapsulation method used by a tunnel, as described by the Internet Assigned Names
            Authority (IANA).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TUNNEL_TYPE.TUNNEL_TYPE_NONE">
            <summary>Indicates that a tunnel is not specified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TUNNEL_TYPE.TUNNEL_TYPE_OTHER">
            <summary>Indicates that none of the following tunnel types is specified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TUNNEL_TYPE.TUNNEL_TYPE_DIRECT">
            <summary>
            A packet is encapsulated directly within a normal IP header, with no intermediate header, and unicast to the remote tunnel endpoint.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TUNNEL_TYPE.TUNNEL_TYPE_6TO4">
            <summary>
            An IPv6 packet is encapsulated directly within an IPv4 header, with no intermediate header, and unicast to the destination
            determined by the 6to4 protocol.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TUNNEL_TYPE.TUNNEL_TYPE_ISATAP">
            <summary>
            An IPv6 packet is encapsulated directly within an IPv4 header, with no intermediate header, and unicast to the destination
            determined by the ISATAP protocol.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TUNNEL_TYPE.TUNNEL_TYPE_TEREDO">
            <summary>Teredo encapsulation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TUNNEL_TYPE.TUNNEL_TYPE_IPHTTPS">
            <summary>
            Specifies that the tunnel uses IP over Hypertext Transfer Protocol Secure (HTTPS). This tunnel type is supported in Windows 7
            and later versions of the Windows operating system.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IF_COUNTED_STRING">
            <summary>The <c>IF_COUNTED_STRING</c> structure specifies a counted string for NDIS interfaces.</summary>
            <remarks>
            <para>The <c>IF_COUNTED_STRING</c> structure is the data type for various NDIS string structures, such as <c>NDIS_IF_COUNTED_STRING</c>.</para>
            <para>If the string is NULL-terminated, the <c>Length</c> member must not include the terminating NULL character.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IF_COUNTED_STRING.Length">
            <summary>A USHORT value that contains the length, in bytes, of the string.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IF_COUNTED_STRING.String">
            <summary>A WCHAR buffer that contains the string. The string does not need to be null-terminated.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IF_PHYSICAL_ADDRESS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IF_PHYSICAL_ADDRESS.Length">
            <summary>A USHORT value that contains the length, in bytes, of the string.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IF_PHYSICAL_ADDRESS.Address">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION">
            <summary>
            The NDIS_INTERFACE_INFORMATION structure provides information about a network interface for the OID_GEN_INTERFACE_INFO OID.
            </summary>
            <remarks>
            <para>
            NDIS interface providers populate an NDIS_INTERFACE_INFORMATION structure in response to a query of the OID_GEN_INTERFACE_INFO
            OID. This structure contains information that changes during the lifetime of the interface.
            </para>
            <para>To register as an interface provider, an NDIS driver calls the NdisIfRegisterProvider function.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifOperStatus">
            <summary>
            The operational status of the interface. This status is the same as the value that the OID_GEN_OPERATIONAL_STATUS OID returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifOperStatusFlags">
            <summary>
            The operational status flags of the interface. This field is reserved for the NDIS proxy interface provider. Other interface
            providers should set this member to zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.MediaConnectState">
            <summary>The NET_IF_MEDIA_CONNECT_STATE connection state type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.MediaDuplexState">
            <summary>
            The media duplex state of the interface. This state is the same as the value that the OID_GEN_MEDIA_DUPLEX_STATE OID returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifMtu">
            <summary>
            The maximum transmission unit (MTU) of the interface. This MTU is the same as the value that the OID_GEN_MAXIMUM_FRAME_SIZE
            OID returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifPromiscuousMode">
            <summary>
            A Boolean value that is <c>TRUE</c> if the interface is in promiscuous mode or <c>FALSE</c> if it is not. This value is the
            same as the value that OID_GEN_PROMISCUOUS_MODE OID query returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifDeviceWakeUpEnable">
            <summary>
            A Boolean value that is <c>TRUE</c> if the interface supports wake-on-LAN capability and the capability is enabled, or
            <c>FALSE</c> if it does not.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.XmitLinkSpeed">
            <summary>
            The transmit link speed, in bytes per second, of the interface. This speed is the same as the value that an
            OID_GEN_XMIT_LINK_SPEED OID query returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.RcvLinkSpeed">
            <summary>
            The receive link speed, in bytes per second, of the interface. This speed is the same as the value that an
            OID_GEN_RCV_LINK_SPEED OID query returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifLastChange">
            <summary>
            The time that the interface entered its current operational state. This time is the same as the value that an
            OID_GEN_LAST_CHANGE OID query returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifCounterDiscontinuityTime">
            <summary>
            The time of the last discontinuity of the interface's counters. This time is the same as the value that an
            OID_GEN_DISCONTINUITY_TIME OID query returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifInUnknownProtos">
            <summary>
            The number of packets that were received through the interface and that were discarded because of an unknown or unsupported
            protocol. This number is the same as the value that an OID_GEN_UNKNOWN_PROTOS OID query returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifInDiscards">
            <summary>
            The number of inbound packets that were discarded even though no errors had been detected to prevent them from being
            deliverable to a higher-layer protocol. This number is the same as the value that an OID_GEN_RCV_DISCARDS OID query returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifInErrors">
            <summary>
            The number of inbound packets that contained errors that prevented them from being deliverable to a higher layer protocol.
            This number is the same as the value that an OID_GEN_RCV_ERROR OID query returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifHCInOctets">
            <summary>
            The total number of bytes that are received on this interface. This number is the same as the value that an OID_GEN_BYTES_RCV
            OID returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifHCInUcastPkts">
            <summary>
            The number of directed packets that are received without errors on the interface. This number is the same as the value that
            an OID_GEN_DIRECTED_FRAMES_RCV OID query returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifHCInMulticastPkts">
            <summary>
            The number of multicast/functional packets that are received without errors on the interface. This number is the same as the
            value that an OID_GEN_MULTICAST_FRAMES_RCV OID query returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifHCInBroadcastPkts">
            <summary>
            The number of broadcast packets that are received without errors on the interface. This number is the same as the value that
            an OID_GEN_BROADCAST_FRAMES_RCV OID query returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifHCOutOctets">
            <summary>
            The number of bytes that are transmitted without errors on the interface. This number is the same as the value that an
            OID_GEN_BYTES_XMIT OID query returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifHCOutUcastPkts">
            <summary>
            The number of directed packets that are transmitted without errors on the interface. This number is the same as the value
            that an OID_GEN_DIRECTED_FRAMES_XMIT OID query returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifHCOutMulticastPkts">
            <summary>
            The number of multicast/functional packets that are transmitted without errors on the interface. This number is the same as
            the value that an OID_GEN_MULTICAST_FRAMES_XMIT OID query returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifHCOutBroadcastPkts">
            <summary>
            The number of broadcast packets that are transmitted without errors on the interface. This number is the same as the value
            that an OID_GEN_BROADCAST_FRAMES_XMIT OID query returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifOutErrors">
            <summary>
            The number of packets that the interface fails to transmit. This number is the same as the value that an OID_GEN_XMIT_ERROR
            OID query returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifOutDiscards">
            <summary>
            The number of packets that the interface discards. This number is the same as the value that an OID_GEN_XMIT_DISCARDS OID
            query returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifHCInUcastOctets">
            <summary>
            The number of bytes in directed packets that are received without errors. This count is the same value that
            OID_GEN_DIRECTED_BYTES_RCV returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifHCInMulticastOctets">
            <summary>
            The number of bytes in multicast/functional packets that are received without errors. This count is the same value that
            OID_GEN_MULTICAST_BYTES_RCV returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifHCInBroadcastOctets">
            <summary>
            The number of bytes in broadcast packets that are received without errors. This count is the same value that
            OID_GEN_BROADCAST_BYTES_RCV returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifHCOutUcastOctets">
            <summary>
            The number of bytes in directed packets that are transmitted without errors. This count is the same value that
            OID_GEN_DIRECTED_BYTES_XMIT returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifHCOutMulticastOctets">
            <summary>
            The number of bytes in multicast/functional packets that are transmitted without errors. This count is the same value that
            OID_GEN_MULTICAST_BYTES_XMIT returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.ifHCOutBroadcastOctets">
            <summary>
            The number of bytes in broadcast packets that are transmitted without errors. This count is the same value that
            OID_GEN_BROADCAST_BYTES_XMIT returns.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.CompartmentId">
            <summary>
            The compartment that the interface belongs to, if the interface provider can provide the ID of the compartment to which the
            interface belongs. Otherwise, it should return NET_IF_COMPARTMENT_ID_UNSPECIFIED. If the interface provider returns
            NET_IF_COMPARTMENT_ID_UNSPECIFIED for the compartment ID, NDIS will return the right compartment ID for this interface.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_INTERFACE_INFORMATION.SupportedStatistics">
            <summary>
            The supported statistics. For more information, see the <c>SupportedStatistics</c> member of the
            NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES structure.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NET_IF_ALIAS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_ALIAS.ifAliasLength">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_ALIAS.ifAliasOffset">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NET_IF_RCV_ADDRESS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_RCV_ADDRESS.ifRcvAddressType">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_RCV_ADDRESS.ifRcvAddressLength">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_IF_RCV_ADDRESS.ifRcvAddressOffset">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NET_LUID">
            <summary>
            A <c>NET_LUID</c> union can be accessed as a 64-bit value that identifies an NDIS network interface or as a structure that
            contains the associated interface index and type.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_LUID.Value">
            <summary>The complete NET_LUID 64 bit value that includes an index and interface type.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.NET_LUID.#ctor(System.UInt32,Vanara.PInvoke.IpHlpApi.IFTYPE)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.NET_LUID"/> struct.</summary>
            <param name="index">
            A 24-bit index that NDIS allocates when an interface provider calls the NdisIfAllocateNetLuidIndex function. This index is
            used to distinguish between multiple interfaces that have the same interface type. Therefore, this value is unique within the
            local computer.
            </param>
            <param name="type">
            A 16-bit value that specifies an Internet Assigned Numbers Authority (IANA) interface type. For example,
            IF_TYPE_ETHERNET_CSMACD (6) is the value for IfType that is assigned to any Ethernet-like interface. For a list of interface
            types, see NDIS Interface Types.
            </param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.NET_LUID.NetLuidIndex">
            <summary>
            A 24-bit index that NDIS allocates when an interface provider calls the NdisIfAllocateNetLuidIndex function. This index is
            used to distinguish between multiple interfaces that have the same interface type. Therefore, this value is unique within the
            local computer.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.NET_LUID.IfType">
            <summary>
            A 16-bit value that specifies an Internet Assigned Numbers Authority (IANA) interface type. For example,
            IF_TYPE_ETHERNET_CSMACD (6) is the value for IfType that is assigned to any Ethernet-like interface. For a list of interface
            types, see NDIS Interface Types.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.NET_LUID.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NET_PHYSICAL_LOCATION">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_PHYSICAL_LOCATION.BusNumber">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_PHYSICAL_LOCATION.SlotNumber">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_PHYSICAL_LOCATION.FunctionNumber">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IFROW">
            <summary>
            <para>The <c>MIB_IFROW</c> structure stores information about a particular interface.</para>
            </summary>
            <remarks>
            <para>
            The <c>dwSpeed</c> member of the <c>MIB_IFROW</c> structure will be incorrect for very high-speed network interfaces (10 Gbit/s
            network adapter, for example) since the maximum value that can be store in a DWORD is 4,294,967,295. Applications should use the
            MIB_IF_ROW2 structure returned by the GetIfEntry2 and GetIfTable2functions or the IP_ADAPTER_ADDRESSES structure returned by the
            GetAdaptersAddressesfunction for determining the speed for very high-speed network interfaces.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the <c>MIB_IFROW</c> structure is defined in the Ifmib.h header file not in the Iprtrmib.h header file. Note that
            the Ifmib.h header file is automatically included in Iprtrmib.h which is automatically included in the Iphlpapi.h header file.
            The Ifmib.h and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.wszName">
            <summary>
            <para>Type: <c>WCHAR[MAX_INTERFACE_NAME_LEN]</c></para>
            <para>A pointer to a Unicode string that contains the name of the interface.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwIndex">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The index that identifies the interface. This index value may change when a network adapter is disabled and then enabled, and
            should not be considered persistent.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwType">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The interface type as defined by the Internet Assigned Names Authority (IANA). For more information, see
            http://www.iana.org/assignments/ianaiftype-mib. Possible values for the interface type are listed in the Ipifcons.h header file.
            </para>
            <para>The table below lists common values for the interface type although many other values are possible.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IF_TYPE_OTHER 1</term>
            <term>Some other type of network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_ETHERNET_CSMACD 6</term>
            <term>An Ethernet network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_ISO88025_TOKENRING 9</term>
            <term>A token ring network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_FDDI 15</term>
            <term>A Fiber Distributed Data Interface (FDDI) network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_PPP 23</term>
            <term>A PPP network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_SOFTWARE_LOOPBACK 24</term>
            <term>A software loopback network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_ATM 37</term>
            <term>An ATM network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_IEEE80211 71</term>
            <term>An IEEE 802.11 wireless network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_TUNNEL 131</term>
            <term>A tunnel type encapsulation network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_IEEE1394 144</term>
            <term>An IEEE 1394 (Firewire) high performance serial bus network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_IEEE80216_WMAN 237</term>
            <term>A mobile broadband interface for WiMax devices.</term>
            </item>
            <item>
            <term>IF_TYPE_WWANPP 243</term>
            <term>A mobile broadband interface for GSM-based devices.</term>
            </item>
            <item>
            <term>IF_TYPE_WWANPP2 244</term>
            <term>An mobile broadband interface for CDMA-based devices.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwMtu">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The Maximum Transmission Unit (MTU) size in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwSpeed">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The speed of the interface in bits per second.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwPhysAddrLen">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The length, in bytes, of the physical address specified by the <c>bPhysAddr</c> member.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.bPhysAddr">
            <summary>
            <para>Type: <c>BYTE[MAXLEN_PHYSADDR]</c></para>
            <para>The physical address of the adapter for this interface.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwAdminStatus">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The interface is administratively enabled or disabled.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwOperStatus">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The operational status of the interface. This member can be one of the following values defined in the
            INTERNAL_IF_OPER_STATUS enumeration defined in the Ipifcons.h header file.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IF_OPER_STATUS_NON_OPERATIONAL</term>
            <term>LAN adapter has been disabled, for example because of an address conflict.</term>
            </item>
            <item>
            <term>IF_OPER_STATUS_UNREACHABLE</term>
            <term>WAN adapter that is not connected.</term>
            </item>
            <item>
            <term>IF_OPER_STATUS_DISCONNECTED</term>
            <term>For LAN adapters: network cable disconnected. For WAN adapters: no carrier.</term>
            </item>
            <item>
            <term>IF_OPER_STATUS_CONNECTING</term>
            <term>WAN adapter that is in the process of connecting.</term>
            </item>
            <item>
            <term>IF_OPER_STATUS_CONNECTED</term>
            <term>WAN adapter that is connected to a remote peer.</term>
            </item>
            <item>
            <term>IF_OPER_STATUS_OPERATIONAL</term>
            <term>Default status for LAN adapters</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwLastChange">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The length of time, in hundredths of seconds (10^-2 sec), starting from the last computer restart, when the interface entered
            its current operational state. This value rolls over after 2^32 hundredths of a second.
            </para>
            <para>
            The <c>dwLastChange</c> member is not currently supported by NDIS. On Windows Vista and later, NDIS returns zero for this
            member. On earlier versions of Windows, an arbitrary value is returned in this member for the interfaces supported by NDIS.
            For interfaces supported by other interface providers, they might return an appropriate value.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwInOctets">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of octets of data received through this interface.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwInUcastPkts">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of unicast packets received through this interface.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwInNUcastPkts">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of non-unicast packets received through this interface. Broadcast and multicast packets are included.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwInDiscards">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of incoming packets that were discarded even though they did not have errors.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwInErrors">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of incoming packets that were discarded because of errors.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwInUnknownProtos">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of incoming packets that were discarded because the protocol was unknown.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwOutOctets">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of octets of data sent through this interface.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwOutUcastPkts">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of unicast packets sent through this interface.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwOutNUcastPkts">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of non-unicast packets sent through this interface. Broadcast and multicast packets are included.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwOutDiscards">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of outgoing packets that were discarded even though they did not have errors.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwOutErrors">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of outgoing packets that were discarded because of errors.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwOutQLen">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The transmit queue length. This field is not currently used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.dwDescrLen">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The length, in bytes, of the <c>bDescr</c> member.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFROW.bDescr">
            <summary>
            <para>Type: <c>BYTE[MAXLEN_IFDESCR]</c></para>
            <para>A description of the interface.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IFROW.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IFROW"/> struct.</summary>
            <param name="ifIndex">
            The index that identifies the interface. This index value may change when a network adapter is disabled and then enabled, and
            should not be considered persistent.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IFTABLE">
            <summary>
            <para>The <c>MIB_IFTABLE</c> structure contains a table of interface entries.</para>
            </summary>
            <remarks>
            <para>
            The GetIfTable function enumerates the interface entries on a local system and returns this information in a <c>MIB_IFTABLE</c> structure.
            </para>
            <para>
            The <c>MIB_IFTABLE</c> structure may contain padding for alignment between the <c>dwNumEntries</c> member and the first MIB_IFROW
            array entry in the <c>table</c> member. Padding for alignment may also be present between the <c>MIB_IFROW</c> array entries in
            the <c>table</c> member. Any access to a <c>MIB_IFROW</c> array entry should assume padding may exist.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the <c>MIB_IFTABLE</c> structure is defined in the Ifmib.h header file not in the Iprtrmib.h header file. Note
            that the Ifmib.h header file is automatically included in Ipmib.h header file. This file is automatically included in the
            Iprtrmib.h header file which is automatically included in the Iphlpapi.h header file. The Ifmib.h header file should never be
            used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IFTABLE.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IFTABLE"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_IFTABLE.dwNumEntries">
            <summary>
            <para>The number of interface entries in the array.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_IFTABLE.table">
            <summary>
            <para>An array of MIB_IFROW structures containing interface entries.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IFTABLE.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_IFTABLE)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IFTABLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The MIB_IFTABLE instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INDEX_MAP">
            <summary>
            <para>
            The <c>IP_ADAPTER_INDEX_MAP</c> structure stores the interface index associated with a network adapter with IPv4 enabled together
            with the name of the network adapter.
            </para>
            </summary>
            <remarks>
            <para>The <c>IP_ADAPTER_INDEX_MAP</c> structure is specific to network adapters with IPv4 enabled.</para>
            <para>
            An adapter index may change when the adapter is disabled and then enabled, or under other circumstances, and should not be
            considered persistent.
            </para>
            <para>
            On Windows Vista and later, the <c>Name</c> member of the <c>IP_ADAPTER_INDEX_MAP</c> structure may be a Unicode string of the
            GUID for the network interface (the string begins with the '{' character).
            </para>
            <para>
            This structure is defined in the Ipexport.h header file which is automatically included in the Iphlpapi.h header file. The
            Ipexport.h header file should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INDEX_MAP.Index">
            <summary>
            <para>The interface index associated with the network adapter.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INDEX_MAP.Name">
            <summary>
            <para>A pointer to a Unicode string that contains the name of the adapter.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INDEX_MAP.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_OPTION_INFORMATION">
            <summary>The <c>IP_OPTION_INFORMATION</c> structure describes the options to be included in the header of an IP packet.</summary>
            <remarks>
            <para>
            The <c>IP_OPTION_INFORMATION</c> structure is used to describe the options to be included in the header of an IP packet. On a
            64-bit platform, the IP_OPTION_INFORMATION32 structure should be used.
            </para>
            <para>The values in the <c>TTL</c>, <c>TOS</c> and <c>Flags</c> members are carried in specific fields in the IP header.</para>
            <para>The bytes in the <c>OptionsData</c> member are carried in the options area that follows the standard IP header.</para>
            <para>
            With the exception of source route options for IPv4, the options data must be in the format to be transmitted on the wire as
            specified in RFC 791. An IPv4 source route option should contain the full route, first hop through final destination, in the
            route data. The first hop is pulled out of the data and the option is reformatted accordingly. Otherwise, the route option should
            be formatted as specified in RFC 791.
            </para>
            <para>For use with IPv6, the options data must be in the format to be transmitted on the wire as specified in RFC 2460.</para>
            <para>
            The <c>IP_OPTION_INFORMATION</c> structure is a member of the ICMP_ECHO_REPLY structure used by the IcmpSendEcho, IcmpSendEcho2,
            and Icmp6SendEcho2 functions.
            </para>
            <para>
            This structure is defined in the Ipexport.h header file which is automatically included in the Iphlpapi.h header file. The
            Ipexport.h header file should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_OPTION_INFORMATION.Ttl">
            <summary>
            <para>Type: <c>UCHAR</c></para>
            <para>The Time to Live field in an IPv4 packet header. This is the Hop Limit field in an IPv6 header.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_OPTION_INFORMATION.Tos">
            <summary>
            <para>Type: <c>UCHAR</c></para>
            <para>The type of service field in an IPv4 header. This member is currently silently ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_OPTION_INFORMATION.Flags">
            <summary>
            <para>Type: <c>UCHAR</c></para>
            <para>
            The Flags field. In IPv4, this is the Flags field in the IPv4 header. In IPv6, this field is represented by options headers.
            </para>
            <para>
            For IPv4, the possible values for the <c>Flags</c> member are a combination of the following values defined in the Ipexport.h
            header file:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IP_FLAG_REVERSE 0x01</term>
            <term>
            This value causes the IP packet to add in an IP routing header with the source. This value is only applicable on Windows
            Vistaand later.
            </term>
            </item>
            <item>
            <term>IP_FLAG_DF 0x02</term>
            <term>This value indicates that the packet should not be fragmented.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_OPTION_INFORMATION.OptionsSize">
            <summary>
            <para>Type: <c>UCHAR</c></para>
            <para>The size, in bytes, of IP options data.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_OPTION_INFORMATION.OptionsData">
            <summary>
            <para>Type: <c>PUCHAR</c></para>
            <para>A pointer to options data.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ORDER_MAP">
            <summary>
            The <c>IP_ADAPTER_ORDER_MAP</c> structure stores an array of information about adapters and their relative priority on the local computer.
            </summary>
            <remarks>
            <para>
            This structure is returned by the GetAdapterOrderMap function, and is used as a tie breaker for otherwise equal interfaces during
            network operations. The GetAdapterOrderMap function should not be called directly; use the GetAdaptersInfo function instead.
            </para>
            <para>
            The <c>IP_ADAPTER_ORDER_MAP</c> structure contains at least one <c>AdapterOrder</c> member even if the <c>NumAdapters</c> member
            of the <c>IP_ADAPTER_ORDER_MAP</c> structure indicates no network adapters. When the <c>NumAdapters</c> member of the
            <c>IP_ADAPTER_ORDER_MAP</c> structure is zero, the value of the single <c>AdapterOrder</c> member is undefined.
            </para>
            <para>
            This structure is defined in the Ipexport.h header file which is automatically included in the Iphlpapi.h header file. The
            Ipexport.h header file should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ORDER_MAP.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ORDER_MAP"/> class.</summary>
            <param name="byteSize">Size of the byte.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ORDER_MAP.AdapterOrder">
            <summary>
            An array of adapter indexes on the local computer, provided in the order specified in the <c>Adapters and Bindings</c> dialog
            box for <c>Network Connections</c>.
            </summary>
            <value>The <see cref="T:System.UInt32"/>.</value>
            <returns></returns>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ORDER_MAP.NumAdapters">
            <summary>The number of network adapters in the <c>AdapterOrder</c> member.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_INTERFACE_INFO">
            <summary>
            <para>
            The <c>IP_INTERFACE_INFO</c> structure contains a list of the network interface adapters with IPv4 enabled on the local system.
            </para>
            </summary>
            <remarks>
            <para>
            The <c>IP_INTERFACE_INFO</c> structure is specific to network adapters with IPv4 enabled. The <c>IP_INTERFACE_INFO</c> structure
            contains the number of network adapters with IPv4 enabled on the local system and an array of IP_ADAPTER_INDEX_MAP structures
            with information on each network adapter with IPv4 enabled. The <c>IP_INTERFACE_INFO</c> structure contains at least one
            <c>IP_ADAPTER_INDEX_MAP</c> structure even if the <c>NumAdapters</c> member of the <c>IP_INTERFACE_INFO</c> structure indicates
            that no network adapters with IPv4 are enabled. When the <c>NumAdapters</c> member of the <c>IP_INTERFACE_INFO</c> structure is
            zero, the value of the members of the single <c>IP_ADAPTER_INDEX_MAP</c> structure returned in the <c>IP_INTERFACE_INFO</c>
            structure is undefined.
            </para>
            <para>The <c>IP_INTERFACE_INFO</c> structure can't be used to return information about the loopback interface.</para>
            <para>
            On Windows Vista and later, the <c>Name</c> member of the IP_ADAPTER_INDEX_MAP structure in the <c>IP_INTERFACE_INFO</c>
            structure may be a Unicode string of the GUID for the network interface (the string begins with the '{' character).
            </para>
            <para>
            This structure is defined in the Ipexport.h header file which is automatically included in the Iphlpapi.h header file. The
            Ipexport.h header file should never be used directly.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves the list of network adapters with IPv4 enabled on the local system and prints various properties
            of the first adapter.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_INTERFACE_INFO.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.IP_INTERFACE_INFO"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_INTERFACE_INFO.Adapter">
            <summary>
            <para>
            An array of IP_ADAPTER_INDEX_MAP structures. Each structure maps an adapter index to that adapter's name. The adapter index
            may change when an adapter is disabled and then enabled, or under other circumstances, and should not be considered persistent.
            </para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_INTERFACE_INFO.NumAdapters">
            <summary>
            <para>The number of adapters listed in the array pointed to by the <c>Adapter</c> member.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_INTERFACE_INFO.op_Implicit(Vanara.PInvoke.IpHlpApi.IP_INTERFACE_INFO)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.IP_INTERFACE_INFO"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="iii">The IP_INTERFACE_INFO instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_UNIDIRECTIONAL_ADAPTER_ADDRESS">
            <summary>
            <para>The <c>IP_UNIDIRECTIONAL_ADAPTER_ADDRESS</c> structure stores the IPv4 addresses associated with a unidirectional adapter.</para>
            </summary>
            <remarks>
            <para>
            The <c>IP_UNIDIRECTIONAL_ADAPTER_ADDRESS</c> structure is retrieved by the GetUnidirectionalAdapterInfofunction. A unidirectional
            adapter is an adapter that can receive IPv4 datagrams, but can't transmit them.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_UNIDIRECTIONAL_ADAPTER_ADDRESS.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.IP_UNIDIRECTIONAL_ADAPTER_ADDRESS"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_UNIDIRECTIONAL_ADAPTER_ADDRESS.Address">
            <summary>
            <para>
            An array of variables of type IPAddr. Each element of the array specifies an IPv4 address associated with this unidirectional adapter.
            </para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_UNIDIRECTIONAL_ADAPTER_ADDRESS.NumAdapters">
            <summary>
            <para>The number of IPv4 addresses pointed to by the <c>Address</c> member.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_UNIDIRECTIONAL_ADAPTER_ADDRESS.op_Implicit(Vanara.PInvoke.IpHlpApi.IP_UNIDIRECTIONAL_ADAPTER_ADDRESS)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.IP_UNIDIRECTIONAL_ADAPTER_ADDRESS"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The IP_UNIDIRECTIONAL_ADAPTER_ADDRESS instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IF_MAX_PHYS_ADDRESS_LENGTH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IF_MAX_STRING_SIZE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MAX_ADAPTER_ADDRESS_LENGTH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MAX_ADAPTER_DESCRIPTION_LENGTH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MAX_ADAPTER_NAME">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MAX_ADAPTER_NAME_LENGTH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MAX_DHCPV6_DUID_LENGTH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MAX_DNS_SUFFIX_STRING_LENGTH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MAX_DOMAIN_NAME_LEN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MAX_HOSTNAME_LEN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MAX_INTERFACE_NAME_LEN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MAX_SCOPE_ID_LEN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MAXLEN_IFDESCR">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MAXLEN_PHYSADDR">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_TYPE_ETHERNET">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_TYPE_FDDI">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_TYPE_LOOPBACK">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_TYPE_OTHER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_TYPE_PPP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_TYPE_SLIP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_TYPE_TOKENRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCPIP_OWNING_MODULE_SIZE">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.GetAdaptersAddressesFlags">
            <summary>The type of addresses to retrieve in <see cref="M:Vanara.PInvoke.IpHlpApi.GetAdaptersAddresses(Vanara.PInvoke.IpHlpApi.GetAdaptersAddressesFlags,Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.GetAdaptersAddressesFlags.GAA_FLAG_SKIP_UNICAST">
            <summary>Do not return unicast addresses.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.GetAdaptersAddressesFlags.GAA_FLAG_SKIP_ANYCAST">
            <summary>Do not return IPv6 anycast addresses.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.GetAdaptersAddressesFlags.GAA_FLAG_SKIP_MULTICAST">
            <summary>Do not return multicast addresses.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.GetAdaptersAddressesFlags.GAA_FLAG_SKIP_DNS_SERVER">
            <summary>Do not return addresses of DNS servers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.GetAdaptersAddressesFlags.GAA_FLAG_INCLUDE_PREFIX">
            <summary>
            Return a list of IP address prefixes on this adapter. When this flag is set, IP address prefixes are returned for both IPv6
            and IPv4 addresses.
            <para>This flag is supported on Windows XP with SP1 and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.GetAdaptersAddressesFlags.GAA_FLAG_SKIP_FRIENDLY_NAME">
            <summary>Do not return the adapter friendly name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.GetAdaptersAddressesFlags.GAA_FLAG_INCLUDE_WINS_INFO">
            <summary>
            Return addresses of Windows Internet Name Service (WINS) servers.
            <para>This flag is supported on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.GetAdaptersAddressesFlags.GAA_FLAG_INCLUDE_GATEWAYS">
            <summary>
            Return the addresses of default gateways.
            <para>This flag is supported on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.GetAdaptersAddressesFlags.GAA_FLAG_INCLUDE_ALL_INTERFACES">
            <summary>
            Return addresses for all NDIS interfaces.
            <para>This flag is supported on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.GetAdaptersAddressesFlags.GAA_FLAG_INCLUDE_ALL_COMPARTMENTS">
            <summary>
            Return addresses in all routing compartments.
            <para>This flag is not currently supported and reserved for future use.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.GetAdaptersAddressesFlags.GAA_FLAG_INCLUDE_TUNNEL_BINDINGORDER">
            <summary>Return the adapter addresses sorted in tunnel binding order. This flag is supported on Windows Vista and later.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IFTYPE">
            <summary>The interface type as defined by the Internet Assigned Names Authority (IANA).</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_OTHER">
            <summary>Some other type of network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_REGULAR_1822">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_HDH_1822">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DDN_X25">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_RFC877_X25">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ETHERNET_CSMACD">
            <summary>An Ethernet network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_IS088023_CSMACD">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ISO88024_TOKENBUS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ISO88025_TOKENRING">
            <summary>A token ring network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ISO88026_MAN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_STARLAN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_PROTEON_10MBIT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_PROTEON_80MBIT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_HYPERCHANNEL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_FDDI">
            <summary>A Fiber Distributed Data Interface (FDDI) network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_LAP_B">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_SDLC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DS1">
            <summary>DS1-MIB</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_E1">
            <summary>Obsolete; see DS1-MIB</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_BASIC_ISDN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_PRIMARY_ISDN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_PROP_POINT2POINT_SERIAL">
            <summary>proprietary serial</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_PPP">
            <summary>A PPP network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_SOFTWARE_LOOPBACK">
            <summary>A software loopback network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_EON">
            <summary>CLNP over IP</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ETHERNET_3MBIT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_NSIP">
            <summary>XNS over IP</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_SLIP">
            <summary>Generic Slip</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ULTRA">
            <summary>ULTRA Technologies</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DS3">
            <summary>DS3-MIB</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_SIP">
            <summary>SMDS, coffee</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_FRAMERELAY">
            <summary>DTE only</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_RS232">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_PARA">
            <summary>Parallel port</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ARCNET">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ARCNET_PLUS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ATM">
            <summary>An ATM network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_MIO_X25">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_SONET">
            <summary>SONET or SDH</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_X25_PLE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ISO88022_LLC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_LOCALTALK">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_SMDS_DXI">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_FRAMERELAY_SERVICE">
            <summary>FRNETSERV-MIB</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_V35">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_HSSI">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_HIPPI">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_MODEM">
            <summary>Generic Modem</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_AAL5">
            <summary>AAL5 over ATM</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_SONET_PATH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_SONET_VT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_SMDS_ICIP">
            <summary>SMDS InterCarrier Interface</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_PROP_VIRTUAL">
            <summary>Proprietary virtual/internal</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_PROP_MULTIPLEXOR">
            <summary>Proprietary multiplexing</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_IEEE80212">
            <summary>100BaseVG</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_FIBRECHANNEL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_HIPPIINTERFACE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_FRAMERELAY_INTERCONNECT">
            <summary>Obsolete, use 32 or 44</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_AFLANE_8023">
            <summary>ATM Emulated LAN for 802.3</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_AFLANE_8025">
            <summary>ATM Emulated LAN for 802.5</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_CCTEMUL">
            <summary>ATM Emulated circuit</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_FASTETHER">
            <summary>Fast Ethernet (100BaseT)</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ISDN">
            <summary>ISDN and X.25</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_V11">
            <summary>CCITT V.11/X.21</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_V36">
            <summary>CCITT V.36</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_G703_64K">
            <summary>CCITT G703 at 64Kbps</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_G703_2MB">
            <summary>Obsolete; see DS1-MIB</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_QLLC">
            <summary>SNA QLLC</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_FASTETHER_FX">
            <summary>Fast Ethernet (100BaseFX)</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_CHANNEL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_IEEE80211">
            <summary>An IEEE 802.11 wireless network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_IBM370PARCHAN">
            <summary>IBM System 360/370 OEMI Channel</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ESCON">
            <summary>IBM Enterprise Systems Connection</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DLSW">
            <summary>Data Link Switching</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ISDN_S">
            <summary>ISDN S/T interface</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ISDN_U">
            <summary>ISDN U interface</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_LAP_D">
            <summary>Link Access Protocol D</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_IPSWITCH">
            <summary>IP Switching Objects</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_RSRB">
            <summary>Remote Source Route Bridging</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ATM_LOGICAL">
            <summary>ATM Logical Port</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DS0">
            <summary>Digital Signal Level 0</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DS0_BUNDLE">
            <summary>Group of ds0s on the same ds1</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_BSC">
            <summary>Bisynchronous Protocol</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ASYNC">
            <summary>Asynchronous Protocol</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_CNR">
            <summary>Combat Net Radio</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ISO88025R_DTR">
            <summary>ISO 802.5r DTR</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_EPLRS">
            <summary>Ext Pos Loc Report Sys</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ARAP">
            <summary>Appletalk Remote Access Protocol</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_PROP_CNLS">
            <summary>Proprietary Connectionless Proto</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_HOSTPAD">
            <summary>CCITT-ITU X.29 PAD Protocol</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_TERMPAD">
            <summary>CCITT-ITU X.3 PAD Facility</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_FRAMERELAY_MPI">
            <summary>Multiproto Interconnect over FR</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_X213">
            <summary>CCITT-ITU X213</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ADSL">
            <summary>Asymmetric Digital Subscrbr Loop</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_RADSL">
            <summary>Rate-Adapt Digital Subscrbr Loop</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_SDSL">
            <summary>Symmetric Digital Subscriber Loop</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_VDSL">
            <summary>Very H-Speed Digital Subscrb Loop</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ISO88025_CRFPRINT">
            <summary>ISO 802.5 CRFP</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_MYRINET">
            <summary>Myricom Myrinet</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_VOICE_EM">
            <summary>Voice recEive and transMit</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_VOICE_FXO">
            <summary>Voice Foreign Exchange Office</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_VOICE_FXS">
            <summary>Voice Foreign Exchange Station</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_VOICE_ENCAP">
            <summary>Voice encapsulation</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_VOICE_OVERIP">
            <summary>Voice over IP encapsulation</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ATM_DXI">
            <summary>ATM DXI</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ATM_FUNI">
            <summary>ATM FUNI</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ATM_IMA">
            <summary>ATM IMA</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_PPPMULTILINKBUNDLE">
            <summary>PPP Multilink Bundle</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_IPOVER_CDLC">
            <summary>IBM ipOverCdlc</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_IPOVER_CLAW">
            <summary>IBM Common Link Access to Workstn</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_STACKTOSTACK">
            <summary>IBM stackToStack</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_VIRTUALIPADDRESS">
            <summary>IBM VIPA</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_MPC">
            <summary>IBM multi-proto channel support</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_IPOVER_ATM">
            <summary>IBM ipOverAtm</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ISO88025_FIBER">
            <summary>ISO 802.5j Fiber Token Ring</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_TDLC">
            <summary>IBM twinaxial data link control</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_GIGABITETHERNET">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_HDLC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_LAP_F">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_V37">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_X25_MLP">
            <summary>Multi-Link Protocol</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_X25_HUNTGROUP">
            <summary>X.25 Hunt Group</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_TRANSPHDLC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_INTERLEAVE">
            <summary>Interleave channel</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_FAST">
            <summary>Fast channel</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_IP">
            <summary>IP (for APPN HPR in IP networks)</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DOCSCABLE_MACLAYER">
            <summary>CATV Mac Layer</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DOCSCABLE_DOWNSTREAM">
            <summary>CATV Downstream interface</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DOCSCABLE_UPSTREAM">
            <summary>CATV Upstream interface</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_A12MPPSWITCH">
            <summary>Avalon Parallel Processor</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_TUNNEL">
            <summary>A tunnel type encapsulation network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_COFFEE">
            <summary>Coffee pot</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_CES">
            <summary>Circuit Emulation Service</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ATM_SUBINTERFACE">
            <summary>ATM Sub Interface</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_L2_VLAN">
            <summary>Layer 2 Virtual LAN using 802.1Q</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_L3_IPVLAN">
            <summary>Layer 3 Virtual LAN using IP</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_L3_IPXVLAN">
            <summary>Layer 3 Virtual LAN using IPX</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DIGITALPOWERLINE">
            <summary>IP over Power Lines</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_MEDIAMAILOVERIP">
            <summary>Multimedia Mail over IP</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DTM">
            <summary>Dynamic syncronous Transfer Mode</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DCN">
            <summary>Data Communications Network</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_IPFORWARD">
            <summary>IP Forwarding Interface</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_MSDSL">
            <summary>Multi-rate Symmetric DSL</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_IEEE1394">
            <summary>An IEEE 1394 (Firewire) high performance serial bus network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_IF_GSN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DVBRCC_MACLAYER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DVBRCC_DOWNSTREAM">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DVBRCC_UPSTREAM">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ATM_VIRTUAL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_MPLS_TUNNEL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_SRP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_VOICEOVERATM">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_VOICEOVERFRAMERELAY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_IDSL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_COMPOSITELINK">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_SS7_SIGLINK">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_PROP_WIRELESS_P2P">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_FR_FORWARD">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_RFC1483">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_USB">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_IEEE8023AD_LAG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_BGP_POLICY_ACCOUNTING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_FRF16_MFR_BUNDLE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_H323_GATEKEEPER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_H323_PROXY">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_MPLS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_MF_SIGLINK">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_HDSL2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_SHDSL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DS1_FDL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_POS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DVB_ASI_IN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DVB_ASI_OUT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_PLC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_NFAS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_TR008">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_GR303_RDT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_GR303_IDT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ISUP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_PROP_DOCS_WIRELESS_MACLAYER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_PROP_DOCS_WIRELESS_DOWNSTREAM">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_PROP_DOCS_WIRELESS_UPSTREAM">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_HIPERLAN2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_PROP_BWA_P2MP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_SONET_OVERHEAD_CHANNEL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_DIGITAL_WRAPPER_OVERHEAD_CHANNEL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_AAL2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_RADIO_MAC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ATM_RADIO">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_IMT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_MVL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_REACH_DSL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_FR_DLCI_ENDPT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_ATM_VCI_ENDPT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_OPTICAL_CHANNEL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_OPTICAL_TRANSPORT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_IEEE80216_WMAN">
            <summary>
            A mobile broadband interface for WiMax devices. <note type="note">This interface type is supported on Windows 7, Windows
            Server 2008 R2, and later.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_WWANPP">
            <summary>
            A mobile broadband interface for GSM-based devices. <note type="note">This interface type is supported on Windows 7, Windows
            Server 2008 R2, and later.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_WWANPP2">
            <summary>
            A mobile broadband interface for CDMA-based devices. <note type="note">This interface type is supported on Windows 7, Windows
            Server 2008 R2, and later.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_IEEE802154">
            <summary>IEEE 802.15.4 WPAN interface</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IFTYPE.IF_TYPE_XBOX_WIRELESS">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_DAD_STATE">
            <summary>
            <para>
            The <c>IP_DAD_STATE</c> enumeration specifies information about the duplicate address detection (DAD) state for an IPv4 or IPv6 address.
            </para>
            </summary>
            <remarks>
            <para>The <c>IP_DAD_STATE</c> enumeration is used in the <c>DadState</c> member of the IP_ADAPTER_UNICAST_ADDRESS structure.</para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the <c>IP_DAD_STATE</c> enumeration is defined in the Nldef.h header file which is automatically included by the
            Iptypes.h header file. The Nldef.h and Iptypes.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_DAD_STATE.IpDadStateInvalid">
            <summary>The DAD state is invalid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_DAD_STATE.IpDadStateTentative">
            <summary>The DAD state is tentative.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_DAD_STATE.IpDadStateDuplicate">
            <summary>A duplicate IP address has been detected.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_DAD_STATE.IpDadStateDeprecated">
            <summary>The IP address has been deprecated.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_DAD_STATE.IpDadStatePreferred">
            <summary>The IP address is the preferred address.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_PREFIX_ORIGIN">
            <summary>
            <para>
            The <c>IP_PREFIX_ORIGIN</c> enumeration specifies the origin of an IPv4 or IPv6 address prefix, and is used with the
            IP_ADAPTER_UNICAST_ADDRESS structure.
            </para>
            </summary>
            <remarks>
            <para>The <c>IP_PREFIX_ORIGIN</c> enumeration is used in the <c>PrefixOrigin</c> member of the IP_ADAPTER_UNICAST_ADDRESS structure.</para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the <c>IP_PREFIX_ORIGIN</c> enumeration is defined in the Nldef.h header file which is automatically included by
            the Iptypes.h header file. In order to use the <c>IP_PREFIX_ORIGIN</c> enumeration, the Winsock2.h header file must be included
            before the Iptypes.h header file.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_PREFIX_ORIGIN.IpPrefixOriginOther">
            <summary>The IP prefix was provided by a source other than those defined in this enumeration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_PREFIX_ORIGIN.IpPrefixOriginManual">
            <summary>The IP address prefix was manually specified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_PREFIX_ORIGIN.IpPrefixOriginWellKnown">
            <summary>The IP address prefix is from a well known source.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_PREFIX_ORIGIN.IpPrefixOriginDhcp">
            <summary>The IP address prefix was provided by DHCP settings.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_PREFIX_ORIGIN.IpPrefixOriginRouterAdvertisement">
            <summary>The IP address prefix was obtained through a router advertisement (RA).</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_PREFIX_ORIGIN.IpPrefixOriginUnchanged">
            <summary>
            The IP address prefix should be unchanged. This value is used when setting the properties for a unicast IP interface when the
            value for the IP prefix origin should be left unchanged.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_SUFFIX_ORIGIN">
            <summary>
            <para>
            The <c>IP_SUFFIX_ORIGIN</c> enumeration specifies the origin of an IPv4 or IPv6 address suffix, and is used with the
            IP_ADAPTER_UNICAST_ADDRESS structure.
            </para>
            </summary>
            <remarks>
            <para>The <c>IP_SUFFIX_ORIGIN</c> enumeration is used in the <c>SuffixOrigin</c> member of the IP_ADAPTER_UNICAST_ADDRESS structure.</para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the <c>IP_SUFFIX_ORIGIN</c> enumeration is defined in the Nldef.h header file which is automatically included by
            the Iptypes.h header file. In order to use the <c>IP_SUFFIX_ORIGIN</c> enumeration, the Winsock2.h header file must be included
            before the Iptypes.h header file.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_SUFFIX_ORIGIN.IpSuffixOriginOther">
            <summary>The IP address suffix was provided by a source other than those defined in this enumeration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_SUFFIX_ORIGIN.IpSuffixOriginManual">
            <summary>The IP address suffix was manually specified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_SUFFIX_ORIGIN.IpSuffixOriginWellKnown">
            <summary>The IP address suffix is from a well-known source.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_SUFFIX_ORIGIN.IpSuffixOriginDhcp">
            <summary>The IP address suffix was provided by DHCP settings.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_SUFFIX_ORIGIN.IpSuffixOriginLinkLayerAddress">
            <summary>The IP address suffix was obtained from the link-layer address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_SUFFIX_ORIGIN.IpSuffixOriginRandom">
            <summary>The IP address suffix was obtained from a random source.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_SUFFIX_ORIGIN.IpSuffixOriginUnchanged">
            <summary>
            The IP address suffix should be unchanged. This value is used when setting the properties for a unicast IP interface when the
            value for the IP suffix origin should be left unchanged.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM">
            <summary>The NDIS_MEDIUM enumeration type identifies the medium types that NDIS drivers support.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMedium802_3">
            <summary>Specifies an Ethernet (802.3) network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMedium802_5">
            <summary>Specifies a Token Ring (802.5) network. <note type="note">Not supported in Windows 8 or later.</note></summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumFddi">
            <summary>
            Specifies a Fiber Distributed Data Interface (FDDI) network. <note type="note">Not supported in Windows Vista/Windows Server
            2008 or later.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumWan">
            <summary>
            Specifies a wide area network. This type covers various forms of point-to-point and WAN NICs, as well as variant
            address/header formats that must be negotiated between the protocol driver and the underlying driver after the binding is established.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumLocalTalk">
            <summary>Specifies a LocalTalk network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumDix">
            <summary>Specifies an Ethernet network for which the drivers use the DIX Ethernet header format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumArcnetRaw">
            <summary>Specifies an ARCNET network. <note type="note">Not supported in Windows Vista/Windows Server 2008 or later.</note></summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumArcnet878_2">
            <summary>
            Specifies an ARCNET (878.2) network. <note type="note">Not supported in Windows Vista/Windows Server 2008 or later.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumAtm">
            <summary>
            Specifies an ATM network. Connection-oriented client protocol drivers can bind themselves to an underlying miniport driver
            that returns this value. Otherwise, legacy protocol drivers bind themselves to the system-supplied LanE intermediate driver,
            which reports its medium type as either of NdisMedium802_3 or NdisMedium802_5, depending on how the LanE driver is configured
            by the network administrator.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumWirelessWan">
            <summary>
            Specifies a wireless network. NDIS 5.X miniport drivers that support wireless LAN (WLAN) or wireless WAN (WWAN) packets
            declare their medium as NdisMedium802_3 and emulate Ethernet to higher-level NDIS drivers. <note type="note">Starting with
            Windows 7, this media type is supported and can be used for Mobile Broadband.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumIrda">
            <summary>Specifies an infrared (IrDA) network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumBpc">
            <summary>Specifies a broadcast PC network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumCoWan">
            <summary>Specifies a wide area network in a connection-oriented environment.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMedium1394">
            <summary>
            Specifies an IEEE 1394 (fire wire) network. <note type="note">Not supported in Windows Vista/Windows Server 2008 or later.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumInfiniBand">
            <summary>Specifies an InfiniBand network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumTunnel">
            <summary>Specifies a tunnel network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumNative802_11">
            <summary>Specifies a native IEEE 802.11 network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumLoopback">
            <summary>Specifies an NDIS loopback network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumWiMAX">
            <summary>Specifies a WiMAX network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumIP">
            <summary>Specifies a generic medium that is capable of sending and receiving raw IP packets.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_MEDIUM.NdisMediumMax">
            <summary>A maximum value for testing purposes.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM">
            <summary>The NDIS physical medium type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumUnspecified">
            <summary>
            The physical medium is none of the below values. For example, a one-way satellite feed is an unspecified physical medium.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumWirelessLan">
            <summary>Packets are transferred over a wireless LAN network through a miniport driver that conforms to the 802.11 interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumCableModem">
            <summary>Packets are transferred over a DOCSIS-based cable network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumPhoneLine">
            <summary>Packets are transferred over standard phone lines. This includes HomePNA media, for example.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumPowerLine">
            <summary>Packets are transferred over wiring that is connected to a power distribution system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumDSL">
            <summary>
            Packets are transferred over a Digital Subscriber Line (DSL) network. This includes ADSL, UADSL (G.Lite), and SDSL, for example.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumFibreChannel">
            <summary>Packets are transferred over a Fibre Channel interconnect.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMedium1394">
            <summary>Packets are transferred over an IEEE 1394 bus.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumWirelessWan">
            <summary>
            Packets are transferred over a Wireless WAN link. This includes mobile broadband devices that support CDPD, CDMA, GSM, and
            GPRS, for example.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumNative802_11">
            <summary>
            Packets are transferred over a wireless LAN network through a miniport driver that conforms to the Native 802.11 interface.
            <note type="note">The Native 802.11 interface is supported in NDIS 6.0 and later versions.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumBluetooth">
            <summary>
            Packets are transferred over a Bluetooth network. Bluetooth is a short-range wireless technology that uses the 2.4 GHz spectrum.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumInfiniband">
            <summary>Packets are transferred over an Infiniband interconnect.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumWiMax">
            <summary>Packets are transferred over a WiMax network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumUWB">
            <summary>Packets are transferred over an ultra wide band network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMedium802_3">
            <summary>Packets are transferred over an Ethernet (802.3) network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMedium802_5">
            <summary>Packets are transferred over a Token Ring (802.5) network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumIrda">
            <summary>Packets are transferred over an infrared (IrDA) network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumWiredWAN">
            <summary>Packets are transferred over a wired WAN network.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumWiredCoWan">
            <summary>Packets are transferred over a wide area network in a connection-oriented environment.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumOther">
            <summary>Packets are transferred over a network that is not described by other possible values.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NET_ADDRESS_FORMAT">
            <summary>
            The <c>NET_ADDRESS_FORMAT</c> enumeration specifies the format of a network address returned by the ParseNetworkString function.
            </summary>
            <remarks>
            <para>The <c>NET_ADDRESS_FORMAT</c> enumeration is defined on Windows Vista and later.</para>
            <para>
            The <c>NET_ADDRESS_FORMAT</c> enumeration is used in the NET_ADDRESS_INFO structure returned by the ParseNetworkString function.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_ADDRESS_FORMAT.NET_ADDRESS_FORMAT_UNSPECIFIED">
            <summary>The format of the network address is unspecified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_ADDRESS_FORMAT.NET_ADDRESS_DNS_NAME">
            <summary>The format of the network address is a DNS name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_ADDRESS_FORMAT.NET_ADDRESS_IPV4">
            <summary>The format of the network address is a string in Internet standard dotted-decimal notation for IPv4.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_ADDRESS_FORMAT.NET_ADDRESS_IPV6">
            <summary>The format of the network address is a string in Internet standard hexadecimal encoding for IPv6.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NET_STRING">
            <summary>Flags used by the <see cref="M:Vanara.PInvoke.IpHlpApi.ParseNetworkString(System.String,Vanara.PInvoke.IpHlpApi.NET_STRING,System.IntPtr,System.IntPtr,System.IntPtr)"/> function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_IPV4_ADDRESS">
            <summary>
            The NetworkString parameter points to an IPv4 address using Internet standard dotted-decimal notation. A network port or
            prefix must not be present in the network string.
            <para>An example network string is the following:</para>
            <para>192.168.100.10</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_IPV4_SERVICE">
            <summary>
            The NetworkString parameter points to an IPv4 service using Internet standard dotted-decimal notation. A network port is
            required as part of the network string. A prefix must not be present in the network string.
            <para>An example network string is the following:</para>
            <para>192.168.100.10:80</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_IPV4_NETWORK">
            <summary>
            The NetworkString parameter points to an IPv4 network using Internet standard dotted-decimal notation. A network prefix that
            uses the Classless Inter-Domain Routing (CIDR) notation is required as part of the network string. A network port must not be
            present in the network string.
            <para>An example network string is the following:</para>
            <para>192.168.100/24</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_IPV6_ADDRESS">
            <summary>
            The NetworkString parameter points to an IPv6 address using Internet standard hexadecimal encoding. An IPv6 scope ID may be
            present in the network string. A network port or prefix must not be present in the network string.
            <para>An example network string is the following:</para>
            <para>21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A%2</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_IPV6_ADDRESS_NO_SCOPE">
            <summary>
            The NetworkString parameter points to an IPv6 address using Internet standard hexadecimal encoding. An IPv6 scope ID must not
            be present in the network string. A network port or prefix must not be present in the network string.
            <para>An example network string is the following:</para>
            <para>21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_IPV6_SERVICE">
            <summary>
            The NetworkString parameter points to an IPv6 service using Internet standard hexadecimal encoding. A network port is
            required as part of the network string. An IPv6 scope ID may be present in the network string. A prefix must not be present
            in the network string.
            <para>An example network string with a scope ID is the following:</para>
            <para>[21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A%2]:8080</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_IPV6_SERVICE_NO_SCOPE">
            <summary>
            The NetworkString parameter points to an IPv6 service using Internet standard hexadecimal encoding. A network port is
            required as part of the network string. An IPv6 scope ID must not be present in the network string. A prefix must not be
            present in the network string.
            <para>An example network string is the following:</para>
            <para>21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A:8080</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_IPV6_NETWORK">
            <summary>
            The NetworkString parameter points to an IPv6 network using Internet standard hexadecimal encoding. A network prefix in CIDR
            notation is required as part of the network string. A network port or scope ID must not be present in the network string.
            <para>An example network string is the following:</para>
            <para>21DA:D3::/48</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_NAMED_ADDRESS">
            <summary>
            The NetworkString parameter points to an Internet address using a Domain Name System (DNS) name. A network port or prefix
            must not be present in the network string.
            <para>An example network string is the following:</para>
            <para>www.microsoft.com</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_NAMED_SERVICE">
            <summary>
            The NetworkString parameter points to an Internet service using a DNS name. A network port must be present in the network string.
            <para>An example network string is the following:</para>
            <para>www.microsoft.com:80</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_IP_ADDRESS">
            <summary>
            The NetworkString parameter points to an IPv4 address using Internet standard dotted-decimal notation or an IPv6 address
            using the Internet standard hexadecimal encoding. An IPv6 scope ID may be present in the network string. A network port or
            prefix must not be present in the network string.
            <para>This type matches either the NET_STRING_IPV4_ADDRESS or NET_STRING_IPV6_ADDRESS types.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_IP_ADDRESS_NO_SCOPE">
            <summary>
            The NetworkString parameter points to an IPv4 address using Internet standard dotted-decimal notation or an IPv6 address
            using Internet standard hexadecimal encoding. An IPv6 scope ID must not be present in the network string. A network port or
            prefix must not be present in the network string.
            <para>This type matches either the NET_STRING_IPV4_ADDRESS or NET_STRING_IPV6_ADDRESS_NO_SCOPE types.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_IP_SERVICE">
            <summary>
            The NetworkString parameter points to an IPv4 service or IPv6 service. A network port is required as part of the network
            string. An IPv6 scope ID may be present in the network string. A prefix must not be present in the network string.
            <para>This type matches either the NET_STRING_IPV4_SERVICE or NET_STRING_IPV6_SERVICE types.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_IP_SERVICE_NO_SCOPE">
            <summary>
            The NetworkString parameter points to an IPv4 service or IPv6 service. A network port is required as part of the network
            string. An IPv6 scope ID must not be present in the network string. A prefix must not be present in the network string.
            <para>This type matches either the NET_STRING_IPV4_SERVICE or NET_STRING_IPV6_SERVICE_NO_SCOPE types.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_IP_NETWORK">
            <summary>
            The NetworkString parameter points to an IPv4 or IPv6 network. A network prefix in CIDR notation is required as part of the
            network string. A network port or scope ID must not be present in the network.
            <para>This type matches either the NET_STRING_IPV4_NETWORK or NET_STRING_IPV6_NETWORK types.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_ANY_ADDRESS">
            <summary>
            The NetworkString parameter points to an IPv4 address in Internet standard dotted-decimal notation, an IPv6 address in
            Internet standard hexadecimal encoding, or a DNS name. An IPv6 scope ID may be present in the network string for an IPv6
            address. A network port or prefix must not be present in the network string.
            <para>This type matches either the NET_STRING_NAMED_ADDRESS or NET_STRING_IP_ADDRESS types.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_ANY_ADDRESS_NO_SCOPE">
            <summary>
            The NetworkString parameter points to an IPv4 address in Internet standard dotted-decimal notation, an IPv6 address in
            Internet standard hexadecimal encoding, or a DNS name. An IPv6 scope ID must not be present in the network string for an IPv6
            address. A network port or prefix must not be present in the network string.
            <para>This type matches either the NET_STRING_NAMED_ADDRESS or NET_STRING_IP_ADDRESS_NO_SCOPE types.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_ANY_SERVICE">
            <summary>
            The NetworkString parameter points to an IPv4 service or IPv6 service using IP address notation or a DNS name. A network port
            is required as part of the network string. An IPv6 scope ID may be present in the network string. A prefix must not be
            present in the network string.
            <para>This type matches either the NET_STRING_NAMED_SERVICE or NET_STRING_IP_SERVICE types.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_STRING.NET_STRING_ANY_SERVICE_NO_SCOPE">
            <summary>
            The NetworkString parameter points to an IPv4 service or IPv6 service using IP address notation or a DNS name. A network port
            is required as part of the network string. An IPv6 scope ID must not be present in the network string. A prefix must not be
            present in the network string.
            <para>This type matches either the NET_STRING_NAMED_SERVICE or NET_STRING_IP_SERVICE_NO_SCOPE types.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NetBiosNodeType">
            <summary>The node type of the local computer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NetBiosNodeType.UNKNOWN_NODETYPE">
            <summary>The unknown node type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NetBiosNodeType.BROADCAST_NODETYPE">
            <summary>A broadcast node type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NetBiosNodeType.PEER_TO_PEER_NODETYPE">
            <summary>A peer to peer node type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NetBiosNodeType.MIXED_NODETYPE">
            <summary>A mixed node type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NetBiosNodeType.HYBRID_NODETYPE">
            <summary>A hybrid node type.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.SCOPE_LEVEL">
            <summary>
            <para>The <c>SCOPE_LEVEL</c> enumeration is used with the IP_ADAPTER_ADDRESSES structure to identify scope levels for IPv6 addresses.</para>
            </summary>
            <remarks>
            <para>The <c>SCOPE_LEVEL</c> enumeration is used in the <c>ZoneIndices</c> member of the IP_ADAPTER_ADDRESSES structure.</para>
            <para>
            On Windows Vista and later as well as on the Microsoft Windows Software Development Kit (SDK), the organization of header files
            has changed and the <c>SCOPE_LEVEL</c> enumeration type is defined in the Ws2def.h header file. Note that the Ws2def.h header
            file is automatically included in Winsock2.h, and should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.SCOPE_LEVEL.ScopeLevelInterface">
            <summary>The scope is interface-level.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.SCOPE_LEVEL.ScopeLevelLink">
            <summary>The scope is link-level.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.SCOPE_LEVEL.ScopeLevelSubnet">
            <summary>The scope is subnet-level.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.SCOPE_LEVEL.ScopeLevelAdmin">
            <summary>The scope is admin-level.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.SCOPE_LEVEL.ScopeLevelSite">
            <summary>The scope is site-level.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.SCOPE_LEVEL.ScopeLevelOrganization">
            <summary>The scope is organization-level.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.SCOPE_LEVEL.ScopeLevelGlobal">
            <summary>The scope is global.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.AddIPAddress(Vanara.PInvoke.Ws2_32.IN_ADDR,Vanara.PInvoke.Ws2_32.IN_ADDR,System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>
            <para>The <c>AddIPAddress</c> function adds the specified IPv4 address to the specified adapter.</para>
            </summary>
            <param name="Address">
            <para>The IPv4 address to add to the adapter, in the form of an IPAddr structure.</para>
            </param>
            <param name="IpMask">
            <para>
            The subnet mask for the IPv4 address specified in the Address parameter. The <c>IPMask</c> parameter uses the same format as an
            IPAddr structure.
            </para>
            </param>
            <param name="IfIndex">
            <para>The index of the adapter on which to add the IPv4 address.</para>
            </param>
            <param name="NTEContext">
            <para>
            A pointer to a <c>ULONG</c> variable. On successful return, this parameter points to the Net Table Entry (NTE) context for the
            IPv4 address that was added. The caller can later use this context in a call to the DeleteIPAddress function.
            </para>
            </param>
            <param name="NTEInstance">
            <para>
            A pointer to a <c>ULONG</c> variable. On successful return, this parameter points to the NTE instance for the IPv4 address that
            was added.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_DEV_NOT_EXIST</term>
            <term>The adapter specified by the IfIndex parameter does not exist.</term>
            </item>
            <item>
            <term>ERROR_DUP_DOMAINNAME</term>
            <term>The IPv4 address to add that is specified in the Address parameter already exists.</term>
            </item>
            <item>
            <term>ERROR_GEN_FAILURE</term>
            <term>
            A general failure. This error is returned for some values specified in the Address parameter, such as an IPv4 address normally
            considered to be a broadcast addresses.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_HANDLE</term>
            <term>The user attempting to make the function call is not an administrator.</term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            One or more of the parameters is invalid. This error is returned if the NTEContext or NTEInstance parameters are NULL. This error
            is also returned when the IP address specified in the Address parameter is inconsistent with the interface index specified in the
            IfIndex parameter (for example, a loopback address on a non-loopback interface).
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The function call is not supported on the version of Windows on which it was run.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>AddIPAddress</c> function is used to add a new IPv4 address entry on a local computer. The IPv4 address added by the
            <c>AddIPAddress</c> function is not persistent. The IPv4 address exists only as long as the adapter object exists. Restarting the
            computer destroys the IPv4 address, as does manually resetting the network interface card (NIC). Also, certain PnP events may
            destroy the address.
            </para>
            <para>
            To create an IPv4 address that persists, the EnableStatic method of the Win32_NetworkAdapterConfiguration Class in the Windows
            Management Instrumentation (WMI) controls may be used. The netsh commands can also be used to create a persistent IPv4 address.
            </para>
            <para>For more information, please see the documentation on Netsh.exe in the Windows Sockets documentation.</para>
            <para>
            On Windows Server 2003, Windows XP, and Windows 2000, if the IPv4 address in the Address parameter already exists on the network,
            the <c>AddIPAddress</c> function returns <c>NO_ERROR</c> and the IPv4 address added is 0.0.0.0.
            </para>
            <para>
            On Windows Vista and later, if the IPv4 address passed in the Address parameter already exists on the network, the
            <c>AddIPAddress</c> function returns <c>NO_ERROR</c> and the duplicate IPv4 address is added with the <c>IP_DAD_STATE</c> member
            in the IP_ADAPTER_UNICAST_ADDRESS structure set to <c>IpDadStateDuplicate</c>.
            </para>
            <para>
            An IPv4 address that is added using the <c>AddIPAddress</c> function can later be deleted by calling the DeleteIPAddress function
            passing the NTEContext parameter returned by the <c>AddIPAddress</c> function.
            </para>
            <para>
            For information about the <c>IPAddr</c> and <c>IPMask</c> data types, see Windows Data Types. To convert an IPv4 address between
            dotted decimal notation and <c>IPAddr</c> format, use the inet_addr and inet_ntoa functions.
            </para>
            <para>
            On Windows Vista and later, the CreateUnicastIpAddressEntry function can be used to add a new unicast IPv4 or IPv6 address entry
            on a local computer.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves the IP address table to determine the interface index for the first adapter, then adds the IP
            address specified on command line to the first adapter. The IP address that was added is then deleted.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.CancelIPChangeNotify(System.Threading.NativeOverlapped*)">
            <summary>
            <para>
            The <c>CancelIPChangeNotify</c> function cancels notification of IPv4 address and route changes previously requested with
            successful calls to the NotifyAddrChange or NotifyRouteChange functions.
            </para>
            </summary>
            <param name="notifyOverlapped">
            <para>A pointer to the OVERLAPPED structure used in the previous call to NotifyAddrChange or NotifyRouteChange.</para>
            </param>
            <returns>
            <para>None</para>
            </returns>
            <remarks>
            <para>
            The <c>CancelIPChangeNotify</c> function deregisters for a change notification previously requested for IPv4 address or route
            changes on a local computer. These requests to register for notification are made by calling the NotifyAddrChange or
            NotifyRouteChange functions.
            </para>
            <para>
            The OVERLAPPED structure used in the previous call to one of these notification functions is passed to
            <c>CancelIPChangeNotify</c> function in the notifyOverlapped parameter to deregister for notifications.
            </para>
            <para>
            The <c>CancelIPChangeNotify</c> can return <c>FALSE</c> if no notification request was found or an invalid notifyOverlapped
            parameter was passed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.CreateIpForwardEntry(Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW@)">
            <summary>The <c>CreateIpForwardEntry</c> function creates a route in the local computer's IPv4 routing table.</summary>
            <param name="pRoute">
            A pointer to a MIB_IPFORWARDROW structure that specifies the information for the new route. The caller must specify values for
            all members of this structure. The caller must specify <c>MIB_IPPROTO_NETMGMT</c> for the <c>dwForwardProto</c> member of <c>MIB_IPFORWARDROW</c>.
            </param>
            <returns>
            <para>The function returns <c>NO_ERROR</c> (zero) if the function is successful.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the
            following: the user lacks the required administrative privileges on the local computer or the application is not running in an
            enhanced shell as the built-in Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An input parameter is invalid, no action was taken. This error is returned if the pRoute parameter is NULL, the dwForwardProto
            member of MIB_IPFORWARDROW was not set to MIB_IPPROTO_NETMGMT, the dwForwardMask member of the PMIB_IPFORWARDROW structure is not
            a valid IPv4 subnet mask, or one of the other members of the MIB_IPFORWARDROW structure is invalid.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The IPv4 transport is not configured on the local computer.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>dwForwardProto</c> member of MIB_IPFORWARDROW structure pointed to by the route parameter must be set to
            <c>MIB_IPPROTO_NETMGMT</c> otherwise <c>CreateIpForwardEntry</c> will fail. Routing protocol identifiers are used to identify
            route information for the specified routing protocol. For example, <c>MIB_IPPROTO_NETMGMT</c> is used to identify route
            information for IP routing set through network management such as the Dynamic Host Configuration Protocol (DHCP), the Simple
            Network Management Protocol (SNMP), or by calls to the <c>CreateIpForwardEntry</c>, DeleteIpForwardEntry, or SetIpForwardEntry functions.
            </para>
            <para>
            On Windows Vista and Windows Server 2008, the route metric specified in the <c>dwForwardMetric1</c> member of the
            MIB_IPFORWARDROW structure pointed to by pRoute parameter represents a combination of the route metric added to the interface
            metric specified in the <c>Metric</c> member of the MIB_IPINTERFACE_ROW structure of the associated interface. So the
            <c>dwForwardMetric1</c> member of the <c>MIB_IPFORWARDROW</c> structure should be equal to or greater than <c>Metric</c> member
            of the associated <c>MIB_IPINTERFACE_ROW</c> structure. If an application would like to set the route metric to 0, then the
            <c>dwForwardMetric1</c> member of the <c>MIB_IPFORWARDROW</c> structure should be set equal to the value of the interface metric
            specified in the <c>Metric</c> member of the associated <c>MIB_IPINTERFACE_ROW</c> structure. An application can retrieve the
            interface metric by calling the GetIpInterfaceEntry function.
            </para>
            <para>
            On Windows Vista and Windows Server 2008, the <c>CreateIpForwardEntry</c> only works on interfaces with a single sub-interface
            (where the interface LUID and sub-interface LUID are the same). The <c>dwForwardIfIndex</c> member of the MIB_IPFORWARDROW
            structure specifies the interface.
            </para>
            <para>
            A number of members of the MIB_IPFORWARDROW structure pointed to by the route parameter are not currently used by
            <c>CreateIpForwardEntry</c>. These members include <c>dwForwardPolicy</c>, <c>dwForwardType</c>, <c>dwForwardAge</c>,
            <c>dwForwardNextHopAS</c>, <c>dwForwardMetric2</c>, <c>dwForwardMetric3</c>, <c>dwForwardMetric4</c>, and <c>dwForwardMetric5</c>.
            </para>
            <para>
            A new route created by <c>CreateIpForwardEntry</c> will automatically have a default value for <c>dwForwardAge</c> of INFINITE.
            </para>
            <para>
            To modify an existing route in the IPv4 routing table, use the SetIpForwardEntry function. To retrieve the IPv4 routing table,
            call the GetIpForwardTable function.
            </para>
            <para>
            On Windows Vista and later, the <c>CreateIpForwardEntry</c> function can only be called by a user logged on as a member of the
            Administrators group. If <c>CreateIpForwardEntry</c> is called by a user that is not a member of the Administrators group, the
            function call will fail and <c>ERROR_ACCESS_DENIED</c> is returned.
            </para>
            <para>
            The <c>CreateIpForwardEntry</c> function can also fail because of user account control (UAC) on Windows Vista and later. If an
            application that contains this function is executed by a user logged on as a member of the Administrators group other than the
            built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>
            <c>Note</c> On Windows NT 4.0 and Windows 2000 and later, this function executes a privileged operation. For this function to
            execute successfully, the caller must be logged on as a member of the Administrators group or the NetworkConfigurationOperators group.
            </para>
            <para>Examples</para>
            <para>
            The following example demonstrates how to change the default gateway to NewGateway. Simply calling GetIpForwardTable, changing
            the gateway, and then calling SetIpForwardEntry will not change the route, but rather will just add a new one. If for some reason
            there are multiple default gateways present, this code will delete them. Note that the new gateway must be viable; otherwise,
            TCP/IP will ignore the change.
            </para>
            <para><c>Note</c> Executing this code will change your IP routing tables and will likely cause network activity to fail.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.CreateIpNetEntry(Vanara.PInvoke.IpHlpApi.MIB_IPNETROW@)">
            <summary>
            <para>
            The <c>CreateIpNetEntry</c> function creates an Address Resolution Protocol (ARP) entry in the ARP table on the local computer.
            </para>
            </summary>
            <param name="pArpEntry">
            <para>
            A pointer to a MIB_IPNETROW structure that specifies information for the new entry. The caller must specify values for all
            members of this structure.
            </para>
            </param>
            <returns>
            <para>The function returns <c>NO_ERROR</c> (zero) if the function is successful.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the
            following: the user lacks the required administrative privileges on the local computer or the application is not running in an
            enhanced shell as the built-in Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An input parameter is invalid, no action was taken. This error is returned if the pArpEntry parameter is NULL, the dwPhysAddrLen
            member of MIB_IPNETROW is set to zero or a value greater than 8, the &gt;dwAddr member of the MIB_IPNETROW structure is invalid,
            or one of the other members of the MIB_IPNETROW structure is invalid.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The IPv4 transport is not configured on the local computer.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            To modify an existing ARP entry, use the SetIpNetEntry function. To retrieve the ARP table, call the GetIpNetTable function. To
            delete an existing ARP entry, call the DeleteIpNetEntry.
            </para>
            <para>
            On Windows Vista and later, the <c>CreateIpNetEntry</c> function can only be called by a user logged on as a member of the
            Administrators group. If <c>CreateIpNetEntry</c> is called by a user that is not a member of the Administrators group, the
            function call will fail and <c>ERROR_ACCESS_DENIED</c> is returned.
            </para>
            <para>
            The <c>CreateIpNetEntry</c> function can also fail because of user account control (UAC) on Windows Vista later. If an
            application that contains this function is executed by a user logged on as a member of the Administrators group other than the
            built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>
            <c>Note</c> On Windows NT 4.0 and Windows 2000 and later, this function executes a privileged operation. For this function to
            execute successfully, the caller must be logged on as a member of the Administrators group or the NetworkConfigurationOperators group.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.CreatePersistentTcpPortReservation(System.UInt16,System.UInt16,System.UInt64@)">
            <summary>
            The <c>CreatePersistentTcpPortReservation</c> function creates a persistent TCP port reservation for a consecutive block of TCP
            ports on the local computer.
            </summary>
            <param name="StartPort">The starting TCP port number in network byte order.</param>
            <param name="NumberOfPorts">The number of TCP port numbers to reserve.</param>
            <param name="Token">A pointer to a port reservation token that is returned if the function succeeds.</param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if zero is passed in the StartPort or NumberOfPorts
            parameters. This error is also returned if the NumberOfPorts parameter is too large a block of ports depending on the StartPort
            parameter that the allocable block of ports would exceed the maximum port that can be allocated.
            </term>
            </item>
            <item>
            <term>ERROR_SHARING_VIOLATION</term>
            <term>
            The process cannot access the file because it is being used by another process. This error is returned if a TCP port in the block
            of TCP ports specified by the StartPort and NumberOfPorts parameters is already being used. This error is also returned if a
            persistent reservation for a block of TCP ports specified by the StartPort and NumberOfPorts parameters matches or overlaps a
            persistent reservation for a block of TCP ports that was already created.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>CreatePersistentTcpPortReservation</c> function is defined on Windows Vista and later.</para>
            <para>The <c>CreatePersistentTcpPortReservation</c> function is used to add a persistent reservation for a block of TCP ports.</para>
            <para>
            Applications and services which need to reserve ports fall into two categories. The first category includes components which need
            a particular port as part of their operation. Such components will generally prefer to specify their required port at
            installation time (in an application manifest, for example). The second category includes components which need any available
            port or block of ports at runtime.
            </para>
            <para>
            These two categories correspond to specific and wildcard port reservation requests. Specific reservation requests may be
            persistent or runtime, while wildcard port reservation requests are only supported at runtime.
            </para>
            <para>
            The <c>CreatePersistentTcpPortReservation</c> function provides the ability for an application or service to reserve a persistent
            block of TCP ports. Persistent TCP port reservations are recorded in a persistent store for the TCP module in Windows.
            </para>
            <para>
            A caller obtains a persistent port reservation by specifying how many ports are required and whether a specific range is needed.
            If the request can be satisfied, the <c>CreatePersistentTcpPortReservation</c> function returns a unique opaque ULONG64 token,
            which subsequently identifies the reservation. A persistent TCP port reservation may be released by calling the
            DeletePersistentTcpPortReservation function. Note that the token for a given persistent TCP port reservation may change each time
            the system is restarted.
            </para>
            <para>
            Windows does not implement inter-component security for persistent reservations obtained using these functions. This means that
            if a component is granted the ability to obtain any persistent port reservations, that component automatically gains the ability
            to consume any persistent port reservations granted to any other component on the system. Process-level security is enforced for
            runtime reservations, but such control cannot be extended to persistent port reservations created using the
            <c>CreatePersistentTcpPortReservation</c> or CreatePersistentUdpPortReservation function.
            </para>
            <para>
            Once a persistent TCP port reservation has been obtained, an application can request port assignments from the TCP port
            reservation by opening a TCP socket, then calling the WSAIoctl function specifying the SIO_ASSOCIATE_PORT_RESERVATION IOCTL and
            passing the reservation token before issuing a call to the bind function on the socket.
            </para>
            <para>
            The SIO_ACQUIRE_PORT_RESERVATION IOCTL can be used to request a runtime reservation for a block of TCP or UDP ports. For runtime
            port reservations, the port pool requires that reservations be consumed from the process on whose socket the reservation was
            granted. Runtime port reservations last only as long as the lifetime of the socket on which the
            <c>SIO_ACQUIRE_PORT_RESERVATION</c> IOCTL was called. In contrast, persistent port reservations created using the
            <c>CreatePersistentTcpPortReservation</c> function may be consumed by any process with the ability to obtain persistent reservations.
            </para>
            <para>
            The <c>CreatePersistentTcpPortReservation</c> function can only be called by a user logged on as a member of the Administrators
            group. If <c>CreatePersistentTcpPortReservation</c> is called by a user that is not a member of the Administrators group, the
            function call will fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control
            (UAC) on Windows Vista and later. If an application that contains this function is executed by a user logged on as a member of
            the Administrators group other than the built-in Administrator, this call will fail unless the application has been marked in the
            manifest file with a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a
            user logged on as a member of the Administrators group other than the built-in Administrator must then be executing the
            application in an enhanced shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>Examples</para>
            <para>
            The following example creates a persistent TCP port reservation, then creates a socket and allocates a port from the port
            reservation, and then closes the socket and deletes the TCP port reservation.
            </para>
            <para>
            This example must be run by a user that is a member of the Administrators group. The simplest way to run this example is in an
            enhanced shell as the built-in Administrator (RunAs administrator).
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.CreatePersistentUdpPortReservation(System.UInt16,System.UInt16,System.UInt64@)">
            <summary>
            The <c>CreatePersistentUdpPortReservation</c> function creates a persistent UDP port reservation for a consecutive block of UDP
            ports on the local computer.
            </summary>
            <param name="StartPort">The starting UDP port number in network byte order.</param>
            <param name="NumberOfPorts">The number of UDP port numbers to reserve.</param>
            <param name="Token">A pointer to a port reservation token that is returned if the function succeeds.</param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if zero is passed in the StartPort or NumberOfPorts
            parameters. This error is also returned if the NumberOfPorts parameter is too large a block of ports depending on the StartPort
            parameter that the allocable block of ports would exceed the maximum port that can be allocated.
            </term>
            </item>
            <item>
            <term>ERROR_SHARING_VIOLATION</term>
            <term>
            The process cannot access the file because it is being used by another process. This error is returned if a UDP port in the block
            of UDP ports specified by the StartPort and NumberOfPorts parameters is already being used. This error is also returned if a
            persistent reservation for a block of UDP ports specified by the StartPort and NumberOfPorts parameters matches or overlaps a
            persistent reservation for a block of UDP ports that was already created.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>CreatePersistentUdpPortReservation</c> function is defined on Windows Vista and later.</para>
            <para>The <c>CreatePersistentUdpPortReservation</c> function is used to add a persistent reservation for a block of UDP ports.</para>
            <para>
            Applications and services which need to reserve ports fall into two categories. The first category includes components which need
            a particular port as part of their operation. Such components will generally prefer to specify their required port at
            installation time (in an application manifest, for example). The second category includes components which need any available
            port or block of ports at runtime.
            </para>
            <para>
            These two categories correspond to specific and wildcard port reservation requests. Specific reservation requests may be
            persistent or runtime, while wildcard port reservation requests are only supported at runtime.
            </para>
            <para>
            The <c>CreatePersistentUdpPortReservation</c> function provides the ability for an application or service to reserve persistently
            a block of UDP ports. Persistent TCP reservations are recorded in a persistent store for the UDP module in Windows.
            </para>
            <para>
            A caller obtains a persistent port reservation by specifying how many ports are required and whether a specific range is needed.
            If the request can be satisfied, the <c>CreatePersistentUdpPortReservation</c> function returns a unique opaque ULONG64 token,
            which subsequently identifies the reservation. A persistent UDP port reservation may be released by calling the
            DeletePersistentUdpPortReservation function. Note that the token for a given persistent UDP port reservation may change each time
            the system is restarted.
            </para>
            <para>
            Windows does not implement inter-component security for persistent reservations obtained using these functions. This means that
            if a component is granted the ability to obtain any persistent port reservations, that component automatically gains the ability
            to consume any persistent port reservations granted to any other component on the system. Process-level security is enforced for
            runtime reservations, but such control cannot be extended to persistent reservations created using the created using the
            CreatePersistentTcpPortReservation or <c>CreatePersistentUdpPortReservation</c> function.
            </para>
            <para>
            Once a persistent UDP port reservation has been obtained, an application can request port assignments from the UDP port
            reservation by opening a UDP socket, then calling the WSAIoctl function specifying the SIO_ASSOCIATE_PORT_RESERVATION IOCTL and
            passing the reservation token before issuing a call to the bind function on the socket.
            </para>
            <para>
            The SIO_ACQUIRE_PORT_RESERVATION IOCTL can be used to request a runtime reservation for a block of TCP or UDP ports. For runtime
            port reservations, the port pool requires that reservations be consumed from the process on whose socket the reservation was
            granted. Runtime port reservations last only as long as the lifetime of the socket on which the
            <c>SIO_ACQUIRE_PORT_RESERVATION</c> IOCTL was called. In contrast, persistent port reservations created using the
            <c>CreatePersistentUdpPortReservation</c> function may be consumed by any process with the ability to obtain persistent reservations.
            </para>
            <para>
            The <c>CreatePersistentUdpPortReservation</c> function can only be called by a user logged on as a member of the Administrators
            group. If <c>CreatePersistentUdpPortReservation</c> is called by a user that is not a member of the Administrators group, the
            function call will fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control
            (UAC) on Windows Vista and later. If an application that contains this function is executed by a user logged on as a member of
            the Administrators group other than the built-in Administrator, this call will fail unless the application has been marked in the
            manifest file with a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a
            user logged on as a member of the Administrators group other than the built-in Administrator must then be executing the
            application in an enhanced shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.CreateProxyArpEntry(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            The <c>CreateProxyArpEnry</c> function creates a Proxy Address Resolution Protocol (PARP) entry on the local computer for the
            specified IPv4 address.
            </summary>
            <param name="dwAddress">The IPv4 address for which this computer acts as a proxy.</param>
            <param name="dwMask">The subnet mask for the IPv4 address specified in dwAddress.</param>
            <param name="dwIfIndex">
            The index of the interface on which to proxy ARP for the IPv4 address identified by dwAddress. In other words, when an ARP
            request for dwAddress is received on this interface, the local computer responds with the physical address of this interface. If
            this interface is of a type that does not support ARP, such as PPP, then the call fails.
            </param>
            <returns>
            <para>The function returns <c>NO_ERROR</c> (zero) if the function is successful.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the
            following: the user lacks the required administrative privileges on the local computer or the application is not running in an
            enhanced shell as the built-in Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An input parameter is invalid, no action was taken. This error is returned if the dwAddress parameter is zero or an invalid
            value, one of the other parameters is invalid.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The IPv4 transport is not configured on the local computer.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>To retrieve the ARP table, call the GetIpNetTable function. To delete an existing PARP entry, call the DeleteProxyArpEntry.</para>
            <para>
            On Windows Vista and later, the <c>CreateProxyArpEnry</c> function can only be called by a user logged on as a member of the
            Administrators group. If <c>CreateProxyArpEnry</c> is called by a user that is not a member of the Administrators group, the
            function call will fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control
            (UAC) on Windows Vista and later. If an application that contains this function is executed by a user logged on as a member of
            the Administrators group other than the built-in Administrator, this call will fail unless the application has been marked in the
            manifest file with a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application on Windows Vista and later
            lacks this manifest file, a user logged on as a member of the Administrators group other than the built-in Administrator must
            then be executing the application in an enhanced shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>
            <c>Note</c> This function executes a privileged operation. For this function to execute successfully, the caller must be logged
            on as a member of the Administrators group or the NetworkConfigurationOperators group.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.DeleteIPAddress(System.UInt32)">
            <summary>
            <para>The <c>DeleteIPAddress</c> function deletes an IP address previously added using AddIPAddress.</para>
            </summary>
            <param name="NTEContext">
            <para>The Net Table Entry (NTE) context for the IP address. This context was returned by the previous call to AddIPAddress.</para>
            </param>
            <returns>
            <para>The function returns <c>NO_ERROR</c> (zero) if the function is successful.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the
            following: the user lacks the required administrative privileges on the local computer or the application is not running in an
            enhanced shell as the built-in Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>An input parameter is invalid, no action was taken.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The IPv4 transport is not configured on the local computer.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            On Windows Vista and later, the <c>DeleteIPAddress</c> function can only be called by a user logged on as a member of the
            Administrators group. If <c>DeleteIPAddress</c> is called by a user that is not a member of the Administrators group, the
            function call will fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control
            (UAC) on Windows Vista and later. If an application that contains this function is executed by a user logged on as a member of
            the Administrators group other than the built-in Administrator, this call will fail unless the application has been marked in the
            manifest file with a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application on Windows Vista and later
            lacks this manifest file, a user logged on as a member of the Administrators group other than the built-in Administrator must
            then be executing the application in an enhanced shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>
            <c>Note</c> On Windows NT 4.0 and Windows 2000 and later, this function executes a privileged operation. For this function to
            execute successfully, the caller must be logged on as a member of the Administrators group or the NetworkConfigurationOperators group.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves the IP address table, then adds the IP address 192.168.0.27 to the first adapter. The IP address
            that was added is then deleted.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.DeleteIpForwardEntry(Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW@)">
            <summary>The <c>DeleteIpForwardEntry</c> function deletes an existing route in the local computer's IPv4 routing table.</summary>
            <param name="pRoute">
            A pointer to an MIB_IPFORWARDROW structure. This structure specifies information that identifies the route to delete. The caller
            must specify values for the <c>dwForwardIfIndex</c>, <c>dwForwardDest</c>, <c>dwForwardMask</c>, <c>dwForwardNextHop</c>, and
            <c>dwForwardProto</c> members of the structure.
            </param>
            <returns>
            <para>The function returns <c>NO_ERROR</c> (zero) if the routine is successful.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Error code</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the
            following: the user lacks the required administrative privileges on the local computer or the application is not running in an
            enhanced shell as the built-in Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An input parameter is invalid, no action was taken. This error is returned if the pRoute parameter is NULL, the dwForwardMask
            member of the PMIB_IPFORWARDROW structure is not a valid IPv4 subnet mask, the dwForwardIfIndex member is NULL, or one of the
            other members of the MIB_IPFORWARDROW structure is invalid.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>The pRoute parameter points to a route entry that does not exist.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The IPv4 transport is not configured on the local computer.</term>
            </item>
            <item>
            <term>(other)</term>
            <term>The function may return other error codes.</term>
            </item>
            </list>
            <para>If the function fails, use FormatMessage to obtain the message string for the returned error.</para>
            </returns>
            <remarks>
            <para>
            The <c>dwForwardProto</c> member of MIB_IPFORWARDROW structure pointer to by the route parameter must be set to
            <c>MIB_IPPROTO_NETMGMT</c> otherwise <c>DeleteIpForwardEntry</c> will fail. Routing protocol identifiers are used to identify
            route information for the specified routing protocol. For example, <c>MIB_IPPROTO_NETMGMT</c> is used to identify route
            information for IP routing set through network management such as the Dynamic Host Configuration Protocol (DHCP), the Simple
            Network Management Protocol (SNMP), or by calls to the CreateIpForwardEntry, <c>DeleteIpForwardEntry</c> , or SetIpForwardEntry functions.
            </para>
            <para>
            On Windows Vista and Windows Server 2008, the <c>DeleteIpForwardEntry</c> only works on interfaces with a single sub-interface
            (where the interface LUID and sub-interface LUID are the same). The <c>dwForwardIfIndex</c> member of the MIB_IPFORWARDROW
            structure specifies the interface.
            </para>
            <para>
            A number of members of the MIB_IPFORWARDROW structure pointed to by the route parameter are not currently used by
            CreateIpForwardEntry. These members include <c>dwForwardPolicy</c>, <c>dwForwardType</c>, <c>dwForwardAge</c>,
            <c>dwForwardNextHopAS</c>, <c>dwForwardMetric1</c>, <c>dwForwardMetric2</c>, <c>dwForwardMetric3</c>, <c>dwForwardMetric4</c>,
            and <c>dwForwardMetric5</c>.
            </para>
            <para>
            To modify an existing route in the IPv4 routing table, use the SetIpForwardEntry function. To retrieve the IPv4 routing table,
            call the GetIpForwardTable function.
            </para>
            <para>
            On Windows Vista and later, the <c>DeleteIpForwardEntry</c> function can only be called by a user logged on as a member of the
            Administrators group. If <c>DeleteIpForwardEntry</c> is called by a user that is not a member of the Administrators group, the
            function call will fail and <c>ERROR_ACCESS_DENIED</c> is returned.
            </para>
            <para>
            The <c>DeleteIpForwardEntry</c> function can also fail because of user account control (UAC) on Windows Vista and later. If an
            application that contains this function is executed by a user logged on as a member of the Administrators group other than the
            built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>
            <c>Note</c> On Windows NT 4.0 and Windows 2000 and later, this function executes a privileged operation. For this function to
            execute successfully, the caller must be logged on as a member of the Administrators group or the NetworkConfigurationOperators group.
            </para>
            <para>Examples</para>
            <para>
            The following code example shows how to change the default gateway to NewGateway. By calling GetIpForwardTable, changing the
            gateway, and then calling SetIpForwardEntry will not change the route, but will add a new one. If multiple default gateways
            exist, this code will delete them. Be aware that the new gateway must be viable; otherwise, TCP/IP will ignore the change.
            </para>
            <para><c>Note</c> Executing this code will change your IP routing tables and will likely cause network activity to fail.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.DeleteIpNetEntry(Vanara.PInvoke.IpHlpApi.MIB_IPNETROW@)">
            <summary>
            <para>The <c>DeleteIpNetEntry</c> function deletes an ARP entry from the ARP table on the local computer.</para>
            </summary>
            <param name="pArpEntry">
            <para>
            A pointer to a MIB_IPNETROW structure. The information in this structure specifies the entry to delete. The caller must specify
            values for at least the <c>dwIndex</c> and <c>dwAddr</c> members of this structure.
            </para>
            </param>
            <returns>
            <para>The function returns <c>NO_ERROR</c> (zero) if the function is successful.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the
            following: the user lacks the required administrative privileges on the local computer or the application is not running in an
            enhanced shell as the built-in Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An input parameter is invalid, no action was taken. This error is returned if the pArpEntry parameter is NULL or a member in the
            MIB_IPNETROW structure pointed to by the pArpEntry parameter is invalid.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The IPv4 transport is not configured on the local computer.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>To retrieve the ARP table, call the GetIpNetTable function.</para>
            <para>
            On Windows Vista and later, the <c>DeleteIpNetEntry</c> function can only be called by a user logged on as a member of the
            Administrators group. If <c>DeleteIpNetEntry</c> is called by a user that is not a member of the Administrators group, the
            function call will fail and <c>ERROR_ACCESS_DENIED</c> is returned.
            </para>
            <para>
            The <c>DeleteIpNetEntry</c> function can also fail because of user account control (UAC) on Windows Vista and later. If an
            application that contains this function is executed by a user logged on as a member of the Administrators group other than the
            built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>
            <c>Note</c> On Windows NT 4.0 and Windows 2000 and later, this function executes a privileged operation. For this function to
            execute successfully, the caller must be logged on as a member of the Administrators group or the NetworkConfigurationOperators group.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.DeletePersistentTcpPortReservation(System.UInt16,System.UInt16)">
            <summary>
            The <c>DeletePersistentTcpPortReservation</c> function deletes a persistent TCP port reservation for a consecutive block of TCP
            ports on the local computer.
            </summary>
            <param name="StartPort">The starting TCP port number in network byte order.</param>
            <param name="NumberOfPorts">The number of TCP port numbers to delete.</param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if zero is passed in the StartPort or NumberOfPorts parameters.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The element was not found. This error is returned if persistent port block specified by the StartPort and NumberOfPorts
            parameters could not be found.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>DeletePersistentTcpPortReservation</c> function is defined on Windows Vista and later.</para>
            <para>The <c>DeletePersistentTcpPortReservation</c> function is used to delete a persistent reservation for a block of TCP ports.</para>
            <para>
            The <c>DeletePersistentTcpPortReservation</c> function can only be called by a user logged on as a member of the Administrators
            group. If <c>DeletePersistentTcpPortReservation</c> is called by a user that is not a member of the Administrators group, the
            function call will fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control
            (UAC) on Windows Vista and later. If an application that contains this function is executed by a user logged on as a member of
            the Administrators group other than the built-in Administrator, this call will fail unless the application has been marked in the
            manifest file with a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a
            user logged on as a member of the Administrators group other than the built-in Administrator must then be executing the
            application in an enhanced shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>Examples</para>
            <para>The following example deletes a persistent TCP port reservation.</para>
            <para>
            This example must be run by a user that is a member of the Administrators group. The simplest way to run this example is in an
            enhanced shell as the built-in Administrator (RunAs administrator).
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.DeletePersistentUdpPortReservation(System.UInt16,System.UInt16)">
            <summary>
            The <c>DeletePersistentUdpPortReservation</c> function deletes a persistent TCP port reservation for a consecutive block of TCP
            ports on the local computer.
            </summary>
            <param name="StartPort">The starting UDP port number in network byte order.</param>
            <param name="NumberOfPorts">The number of UDP port numbers to delete.</param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if zero is passed in the StartPort or NumberOfPorts parameters.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The element was not found. This error is returned if persistent port block specified by the StartPort and NumberOfPorts
            parameters could not be found.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>DeletePersistentUdpPortReservation</c> function is defined on Windows Vista and later.</para>
            <para>The <c>DeletePersistentUdpPortReservation</c> function is used to delete a persistent reservation for a block of UDP ports.</para>
            <para>
            The <c>DeletePersistentUdpPortReservation</c> function can only be called by a user logged on as a member of the Administrators
            group. If <c>DeletePersistentUdpPortReservation</c> is called by a user that is not a member of the Administrators group, the
            function call will fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control
            (UAC) on Windows Vista and later. If an application that contains this function is executed by a user logged on as a member of
            the Administrators group other than the built-in Administrator, this call will fail unless the application has been marked in the
            manifest file with a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a
            user logged on as a member of the Administrators group other than the built-in Administrator must then be executing the
            application in an enhanced shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.DeleteProxyArpEntry(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            The <c>DeleteProxyArpEntry</c> function deletes the PARP entry on the local computer specified by the dwAddress and dwIfIndex parameters.
            </summary>
            <param name="dwAddress">The IPv4 address for which this computer is acting as a proxy.</param>
            <param name="dwMask">The subnet mask for the IPv4 address specified in the dwAddress parameter.</param>
            <param name="dwIfIndex">
            The index of the interface on which this computer is supporting proxy ARP for the IP address specified by the dwAddress parameter.
            </param>
            <returns>
            <para>The function returns <c>NO_ERROR</c> (zero) if the function is successful.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the
            following: the user lacks the required administrative privileges on the local computer or the application is not running in an
            enhanced shell as the built-in Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>An input parameter is invalid, no action was taken.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The IPv4 transport is not configured on the local computer.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>To retrieve the ARP table, call the GetIpNetTable function.</para>
            <para>
            On Windows Vista and later, the <c>DeleteProxyArpEntry</c> function can only be called by a user logged on as a member of the
            Administrators group. If <c>DeleteProxyArpEntry</c> is called by a user that is not a member of the Administrators group, the
            function call will fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control
            (UAC) on Windows Vista and later. If an application that contains this function is executed by a user logged on as a member of
            the Administrators group other than the built-in Administrator, this call will fail unless the application has been marked in the
            manifest file with a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application on Windows Vista and later
            lacks this manifest file, a user logged on as a member of the Administrators group other than the built-in Administrator must
            then be executing the application in an enhanced shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>
            <c>Note</c> This function executes a privileged operation. For this function to execute successfully, the caller must be logged
            on as a member of the Administrators group or the NetworkConfigurationOperators group.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.DisableMediaSense(Vanara.PInvoke.HANDLE@,System.Threading.NativeOverlapped*)">
            <summary>The <c>DisableMediaSense</c> function disables the media sensing capability of the TCP/IP stack on a local computer.</summary>
            <param name="pHandle">
            <para>
            A pointer to a variable that is used to store a handle. If the pOverlapped parameter is not <c>NULL</c>, this variable will be
            used internally to store a handle required to call the IP driver and disable the media sensing capability.
            </para>
            <para>
            An application should not use the value pointed to by this variable. This handle is for internal use and should not be closed.
            </para>
            </param>
            <param name="pOverLapped">
            A pointer to an OVERLAPPED structure. Except for the <c>hEvent</c> member, all members of this structure must be set to zero. The
            <c>hEvent</c> member requires a handle to a valid event object. Use the CreateEvent function to create this event object.
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>An invalid parameter was passed to the function. This error is returned if an pOverlapped parameter is a bad pointer.</term>
            </item>
            <item>
            <term>ERROR_IO_PENDING</term>
            <term>The operation is in progress. This value is returned by a successful asynchronous call to DisableMediaSense.</term>
            </item>
            <item>
            <term>ERROR_OPEN_FAILED</term>
            <term>The handle pointed to by the pHandle parameter was invalid.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>If the pHandle or pOverlapped parameters are <c>NULL</c>, the <c>DisableMediaSense</c> function is executed synchronously.</para>
            <para>
            If both the pHandle and pOverlapped parameters are not <c>NULL</c>, the <c>DisableMediaSense</c> function is executed
            asynchronously using the OVERLAPPED structure pointed to by the pOverlapped parameter.
            </para>
            <para>
            The <c>DisableMediaSense</c> function does not complete until the RestoreMediaSense function is called later to restore the media
            sensing capability. Until then, an I/O request packet (IRP) remains queued up. Alternatively, when the process that called
            <c>DisableMediaSense</c> exits, the IRP is canceled and a cancel routine is called that would again restore the media sensing capability.
            </para>
            <para>
            To call <c>DisableMediaSense</c> synchronously, an application needs to create a separate thread for this call. Otherwise it
            would keep waiting for IRP completion and the function will block.
            </para>
            <para>
            To call <c>DisableMediaSense</c> asynchronously, an application needs to allocate an OVERLAPPED structure. Except for the
            <c>hEvent</c> member, all members of this structure must be set to zero. The <c>hEvent</c> member requires a handle to a valid
            event object. Use the CreateEvent function to create this event. When called asynchronously, <c>DisableMediaSense</c> always
            returns ERROR_IO_PENDING. The IRP will be completed only when RestoreMediaSense is called later. Use the CloseHandle function to
            close the handle to the event object when it is no longer needed. The system closes the handle automatically when the process
            terminates. The event object is destroyed when its last handle has been closed.
            </para>
            <para>
            On Windows Server 2003and Windows XP, the TCP/IP stack implements a policy of deleting all IP addresses on an interface in
            response to a media sense disconnect event from an underlying network interface. If a network switch or hub that the local
            computer is connected to is powered off, or a network cable is disconnected, the network interface will deliver disconnection
            events. IP configuration information associated with the network interface is lost. As a result, the TCP/IP stack implements a
            policy of hiding disconnected interfaces so these interfaces and their associated IP addresses do not show up in configuration
            information retrieved through IP helper. This policy prevents some applications from easily detecting that a network interface is
            merely disconnected, rather than removed from the system.
            </para>
            <para>
            This behavior does not normally impact a local client computer if it is using DHCP requests to a DHCP server for IP configuration
            information. But this can have a serious impact on server computers, particularly computers used as part of clusters. The
            <c>DisableMediaSense</c> function can be used to temporarily disable the media sensing capability for these cases. At some later
            time, the RestoreMediaSense function would be called to restore the media sensing capability.
            </para>
            <para>The following registry setting is related to the <c>DisableMediaSense</c> and RestoreMediaSense functions:</para>
            <para><c>System</c>&lt;b&gt;CurrentControlSet&lt;b&gt;Services&lt;b&gt;Tcpip&lt;b&gt;Parameters&lt;b&gt;DisableDHCPMediaSense</para>
            <para>
            There is an internal flag in Windows that is set if this registry key exists when the machine first boots up. The same internal
            flag also gets set and reset by calling <c>DisableMediaSense</c> and RestoreMediaSense. However with registry setting, you need
            to reboot the machine for the changes to take place.
            </para>
            <para>
            The TCP/IP stack on Windows Vista and later was changed to not hide disconnected interfaces when a disconnect event occurs. So on
            Windows Vista and later, the <c>DisableMediaSense</c> and RestoreMediaSense functions don't do anything and always returns NO_ERROR.
            </para>
            <para>Examples</para>
            <para>
            The following example shows how to call the <c>DisableMediaSense</c> and RestoreMediaSense functions asynchronously. This sample
            is only useful on Windows Server 2003and Windows XP where the <c>DisableMediaSense</c> and <c>RestoreMediaSense</c> functions do
            something useful.
            </para>
            <para>
            The sample first calls the <c>DisableMediaSense</c> function, sleeps for 60 seconds to allow the user to disconnect a network
            cable, retrieves the IP address table and prints some members of the IP address entries in the table, calls the RestoreMediaSense
            function, retrieves the IP address table again, and prints some members of the IP address entries in the table. The impact of
            disabling the media sensing capability can be seen in the difference in the IP address table entries.
            </para>
            <para>
            For an example that shows how to call the <c>DisableMediaSense</c> and RestoreMediaSense functions synchronously, see the
            <c>RestoreMediaSense</c> function reference.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.EnableRouter(Vanara.PInvoke.HANDLE@,System.Threading.NativeOverlapped*)">
            <summary>
            <para>
            The <c>EnableRouter</c> function turns on IPv4 forwarding on the local computer. <c>EnableRouter</c> also increments a reference
            count that tracks the number of requests to enable IPv4 forwarding.
            </para>
            </summary>
            <param name="pHandle">
            <para>A pointer to a handle. This parameter is currently unused.</para>
            </param>
            <param name="pOverlapped">
            <para>
            A pointer to an OVERLAPPED structure. Except for the <c>hEvent</c> member, all members of this structure should be set to zero.
            The <c>hEvent</c> member should contain a handle to a valid event object. Use the CreateEvent function to create this event object.
            </para>
            </param>
            <returns>
            <para>If the <c>EnableRouter</c> function succeeds, the return value is ERROR_IO_PENDING.</para>
            <para>If the function fails, use FormatMessage to obtain the message string for the returned error.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One of the parameters is invalid. This error is returned if the pOverlapped parameter is NULL.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>EnableRouter</c> function is specific to IPv4 forwarding. If the process that calls <c>EnableRouter</c> terminates without
            calling UnenableRouter, the system decrements the reference count that tracks the number of requests to enable IPv4 forwarding as
            though the process had called <c>UnenableRouter</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.FlushIpNetTable(System.UInt32)">
            <summary>
            The <c>FlushIpNetTable</c> function deletes all ARP entries for the specified interface from the ARP table on the local computer.
            </summary>
            <param name="dwIfIndex">The index of the interface for which to delete all ARP entries.</param>
            <returns>
            <para>The function returns <c>NO_ERROR</c> (zero) if the function is successful.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the
            following: the user lacks the required administrative privileges on the local computer or the application is not running in an
            enhanced shell as the built-in Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>An input parameter is invalid, no action was taken. This error is returned if the dwIfIndex parameter is invalid.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The IPv4 transport is not configured on the local computer.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>To retrieve the ARP table, call the GetIpNetTable function.</para>
            <para>
            On Windows Vista and later, the <c>FlushIpNetTable</c> function can only be called by a user logged on as a member of the
            Administrators group. If <c>FlushIpNetTable</c> is called by a user that is not a member of the Administrators group, the
            function call will fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control
            (UAC) on Windows Vista and later. If an application that contains this function is executed by a user logged on as a member of
            the Administrators group other than the built-in Administrator, this call will fail unless the application has been marked in the
            manifest file with a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application on Windows Vista and later
            lacks this manifest file, a user logged on as a member of the Administrators group other than the built-in Administrator must
            then be executing the application in an enhanced shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>
            <c>Note</c> This function executes a privileged operation. For this function to execute successfully, the caller must be logged
            on as a member of the Administrators group or the NetworkConfigurationOperators group.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetAdapterIndex(System.String,System.UInt32@)">
            <summary>The <c>GetAdapterIndex</c> function obtains the index of an adapter, given its name.</summary>
            <param name="AdapterName">A pointer to a Unicode string that specifies the name of the adapter.</param>
            <param name="IfIndex">A pointer to a <c>ULONG</c> variable that points to the index of the adapter.</param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, use <c>FormatMessage</c> to obtain the message string for the returned error.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetAdapterOrderMap">
            <summary>
            The <c>GetAdapterOrderMap</c> function obtains an adapter order map that indicates priority for interfaces on the local computer.
            </summary>
            <returns>
            Returns an IP_ADAPTER_ORDER_MAP structure filled with adapter priority information. See the <c>IP_ADAPTER_ORDER_MAP</c> structure
            for more information.
            </returns>
            <remarks>
            <para>
            Interface indices appear in the order specified in the Adapters and Bindings dialog box in the Advanced Settings property sheet.
            This ordering is used as a tie breaker controlling the sequence in which interfaces are used on multihomed systems for situations
            including route selection, DNS name resolution, and other network related operations.
            </para>
            <para>
            This function should not be called directly. Instead, use the IP_ADAPTER_INFO structure returned in a GetAdaptersInfo function call.
            </para>
            <para><c>Note</c> The caller is responsible for calling the LocalFree function to free the array returned by <c>GetAdapterOrderMap</c>.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetAdaptersAddresses(System.UInt32,Vanara.PInvoke.IpHlpApi.GetAdaptersAddressesFlags,System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            <para>The <c>GetAdaptersAddresses</c> function retrieves the addresses associated with the adapters on the local computer.</para>
            </summary>
            <param name="Family">
            <para>The address family of the addresses to retrieve. This parameter must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_UNSPEC 0</term>
            <term>Return both IPv4 and IPv6 addresses associated with adapters with IPv4 or IPv6 enabled.</term>
            </item>
            <item>
            <term>AF_INET 2</term>
            <term>Return only IPv4 addresses associated with adapters with IPv4 enabled.</term>
            </item>
            <item>
            <term>AF_INET6 23</term>
            <term>Return only IPv6 addresses associated with adapters with IPv6 enabled.</term>
            </item>
            </list>
            </param>
            <param name="Flags">
            <para>
            The type of addresses to retrieve. The possible values are defined in the Iptypes.h header file. Note that the Iptypes.h header
            file is automatically included in IpHlpApi.h, and should never be used directly.
            </para>
            <para>
            This parameter is a combination of the following values. If this parameter is zero, then unicast, anycast, and multicast IP
            addresses will be returned.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>GAA_FLAG_SKIP_UNICAST 0x0001</term>
            <term>Do not return unicast addresses.</term>
            </item>
            <item>
            <term>GAA_FLAG_SKIP_ANYCAST 0x0002</term>
            <term>Do not return IPv6 anycast addresses.</term>
            </item>
            <item>
            <term>GAA_FLAG_SKIP_MULTICAST 0x0004</term>
            <term>Do not return multicast addresses.</term>
            </item>
            <item>
            <term>GAA_FLAG_SKIP_DNS_SERVER 0x0008</term>
            <term>Do not return addresses of DNS servers.</term>
            </item>
            <item>
            <term>GAA_FLAG_INCLUDE_PREFIX 0x0010</term>
            <term>
            Return a list of IP address prefixes on this adapter. When this flag is set, IP address prefixes are returned for both IPv6 and
            IPv4 addresses. This flag is supported on Windows XP with SP1 and later.
            </term>
            </item>
            <item>
            <term>GAA_FLAG_SKIP_FRIENDLY_NAME 0x0020</term>
            <term>Do not return the adapter friendly name.</term>
            </item>
            <item>
            <term>GAA_FLAG_INCLUDE_WINS_INFO 0x0040</term>
            <term>Return addresses of Windows Internet Name Service (WINS) servers. This flag is supported on Windows Vista and later.</term>
            </item>
            <item>
            <term>GAA_FLAG_INCLUDE_GATEWAYS 0x0080</term>
            <term>Return the addresses of default gateways. This flag is supported on Windows Vista and later.</term>
            </item>
            <item>
            <term>GAA_FLAG_INCLUDE_ALL_INTERFACES 0x0100</term>
            <term>Return addresses for all NDIS interfaces. This flag is supported on Windows Vista and later.</term>
            </item>
            <item>
            <term>GAA_FLAG_INCLUDE_ALL_COMPARTMENTS 0x0200</term>
            <term>Return addresses in all routing compartments. This flag is not currently supported and reserved for future use.</term>
            </item>
            <item>
            <term>GAA_FLAG_INCLUDE_TUNNEL_BINDINGORDER 0x0400</term>
            <term>Return the adapter addresses sorted in tunnel binding order. This flag is supported on Windows Vista and later.</term>
            </item>
            </list>
            </param>
            <param name="Reserved">
            <para>
            This parameter is not currently used, but is reserved for future system use. The calling application should pass <c>NULL</c> for
            this parameter.
            </para>
            </param>
            <param name="AdapterAddresses">
            <para>A pointer to a buffer that contains a linked list of IP_ADAPTER_ADDRESSES structures on successful return.</para>
            </param>
            <param name="SizePointer">
            <para>A pointer to a variable that specifies the size of the buffer pointed to by AdapterAddresses.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>ERROR_SUCCESS</c> (defined to the same value as <c>NO_ERROR</c>).</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ADDRESS_NOT_ASSOCIATED</term>
            <term>An address has not yet been associated with the network endpoint. DHCP lease information was available.</term>
            </item>
            <item>
            <term>ERROR_BUFFER_OVERFLOW</term>
            <term>
            The buffer size indicated by the SizePointer parameter is too small to hold the adapter information or the AdapterAddresses
            parameter is NULL. The SizePointer parameter returned points to the required size of the buffer to hold the adapter information.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            One of the parameters is invalid. This error is returned for any of the following conditions: the SizePointer parameter is NULL,
            the Address parameter is not AF_INET, AF_INET6, or AF_UNSPEC, or the address information for the parameters requested is greater
            than ULONG_MAX.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Insufficient memory resources are available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NO_DATA</term>
            <term>No addresses were found for the requested parameters.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetAdaptersAddresses</c> function can retrieve information for IPv4 and IPv6 addresses.</para>
            <para>
            Addresses are returned as a linked list of IP_ADAPTER_ADDRESSES structures in the buffer pointed to by the AdapterAddresses
            parameter. The application that calls the <c>GetAdaptersAddresses</c> function must allocate the amount of memory needed to
            return the <c>IP_ADAPTER_ADDRESSES</c> structures pointed to by the AdapterAddresses parameter. When these returned structures
            are no longer required, the application should free the memory allocated. This can be accomplished by calling the HeapAlloc
            function to allocate memory and later calling the HeapFree function to free the allocated memory, as shown in the example code.
            Other memory allocation and free functions can be used as long as the same family of functions are used for both the allocation
            and the free function.
            </para>
            <para>
            <c>GetAdaptersAddresses</c> is implemented only as a synchronous function call. The <c>GetAdaptersAddresses</c> function requires
            a significant amount of network resources and time to complete since all of the low-level network interface tables must be traversed.
            </para>
            <para>
            One method that can be used to determine the memory needed to return the IP_ADAPTER_ADDRESSES structures pointed to by the
            AdapterAddresses parameter is to pass too small a buffer size as indicated in the SizePointer parameter in the first call to the
            <c>GetAdaptersAddresses</c> function, so the function will fail with <c>ERROR_BUFFER_OVERFLOW</c>. When the return value is
            <c>ERROR_BUFFER_OVERFLOW</c>, the SizePointer parameter returned points to the required size of the buffer to hold the adapter
            information. Note that it is possible for the buffer size required for the <c>IP_ADAPTER_ADDRESSES</c> structures pointed to by
            the AdapterAddresses parameter to change between subsequent calls to the <c>GetAdaptersAddresses</c> function if an adapter
            address is added or removed. However, this method of using the <c>GetAdaptersAddresses</c> function is strongly discouraged. This
            method requires calling the <c>GetAdaptersAddresses</c> function multiple times.
            </para>
            <para>
            The recommended method of calling the <c>GetAdaptersAddresses</c> function is to pre-allocate a 15KB working buffer pointed to by
            the AdapterAddresses parameter. On typical computers, this dramatically reduces the chances that the <c>GetAdaptersAddresses</c>
            function returns <c>ERROR_BUFFER_OVERFLOW</c>, which would require calling <c>GetAdaptersAddresses</c> function multiple times.
            The example code illustrates this method of use.
            </para>
            <para>
            In versions prior to Windows 10, the order in which adapters appear in the list returned by this function can be controlled from
            the Network Connections folder: select the Advanced Settings menu item from the Advanced menu. Starting with Windows 10, the
            order in which adapters appear in the list is determined by the IPv4 or IPv6 route metric.
            </para>
            <para>
            If the GAA_FLAG_INCLUDE_ALL_INTERFACES is set, then all NDIS adapters will be retrieved even those addresses associated with
            adapters not bound to an address family specified in the Family parameter. When this flag is not set, then only the addresses
            that are bound to an adapter enabled for the address family specified in the Family parameter are returned.
            </para>
            <para>
            The size of the IP_ADAPTER_ADDRESSESstructure was changed on Windows XP with Service Pack 1 (SP1) and later. Several additional
            members were added to this structure. The size of the <c>IP_ADAPTER_ADDRESSES</c> structure was also changed on Windows Vista and
            later. A number of additional members were added to this structure. The size of the <c>IP_ADAPTER_ADDRESSES</c> structure also
            changed on Windows Vista with Service Pack 1 (SP1)and later and onWindows Server 2008 and later. One additional member was added
            to this structure. The <c>Length</c> member of the <c>IP_ADAPTER_ADDRESSES</c> structure returned in the linked list of
            structures in the buffer pointed to by the AdapterAddresses parameter should be used to determine which version of the
            <c>IP_ADAPTER_ADDRESSES</c> structure is being used.
            </para>
            <para>
            The GetIpAddrTable function retrieves the interface–to–IPv4 address mapping table on a local computer and returns this
            information in an MIB_IPADDRTABLE structure.
            </para>
            <para>
            On the Platform Software Development Kit (SDK) released for Windows Server 2003 and earlier, the return value for the
            <c>GetAdaptersAddresses</c> function was defined as a <c>DWORD</c>, rather than a <c>ULONG</c>.
            </para>
            <para>
            The SOCKET_ADDRESS structure is used in the IP_ADAPTER_ADDRESSES structure pointed to by the AdapterAddresses parameter. On the
            Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files has
            changed and the <c>SOCKET_ADDRESS</c> structure is defined in the Ws2def.h header file which is automatically included by the
            Winsock2.h header file. On the Platform SDK released for Windows Server 2003 and Windows XP, the <c>SOCKET_ADDRESS</c> structure
            is declared in the Winsock2.h header file. In order to use the <c>IP_ADAPTER_ADDRESSES</c> structure, the Winsock2.h header file
            must be included before the IpHlpApi.h header file.
            </para>
            <para>Examples</para>
            <para>
            This example retrieves the IP_ADAPTER_ADDRESSES structure for the adapters associated with the system and prints some members for
            each adapter interface.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetAdaptersAddresses(Vanara.PInvoke.IpHlpApi.GetAdaptersAddressesFlags,Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY)">
            <summary>The <c>GetAdaptersAddresses</c> function retrieves the addresses associated with the adapters on the local computer.</summary>
            <param name="Flags">
            The type of addresses to retrieve. If this parameter is zero, then unicast, anycast, and multicast IP addresses will be returned.
            </param>
            <param name="Family">The address family of the addresses to retrieve.</param>
            <returns>A list of IP_ADAPTER_ADDRESSES structures on successful return.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetAdaptersInfo(System.IntPtr,System.UInt32@)">
            <summary>
            <para>The <c>GetAdaptersInfo</c> function retrieves adapter information for the local computer.</para>
            <para><c>On Windows XP and later:</c> Use the GetAdaptersAddresses function instead of <c>GetAdaptersInfo</c>.</para>
            </summary>
            <param name="AdapterInfo">A pointer to a buffer that receives a linked list of IP_ADAPTER_INFO structures.</param>
            <param name="SizePointer">
            A pointer to a <c>ULONG</c> variable that specifies the size of the buffer pointed to by the pAdapterInfo parameter. If this size
            is insufficient to hold the adapter information, <c>GetAdaptersInfo</c> fills in this variable with the required size, and
            returns an error code of <c>ERROR_BUFFER_OVERFLOW</c>.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>ERROR_SUCCESS</c> (defined to the same value as <c>NO_ERROR</c>).</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_BUFFER_OVERFLOW</term>
            <term>
            The buffer to receive the adapter information is too small. This value is returned if the buffer size indicated by the pOutBufLen
            parameter is too small to hold the adapter information or the pAdapterInfo parameter was a NULL pointer. When this error code is
            returned, the pOutBufLen parameter points to the required buffer size.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_DATA</term>
            <term>Invalid adapter information was retrieved.</term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            One of the parameters is invalid. This error is returned if the pOutBufLen parameter is a NULL pointer, or the calling process
            does not have read/write access to the memory pointed to by pOutBufLen or the calling process does not have write access to the
            memory pointed to by the pAdapterInfo parameter.
            </term>
            </item>
            <item>
            <term>ERROR_NO_DATA</term>
            <term>No adapter information exists for the local computer.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The GetAdaptersInfo function is not supported by the operating system running on the local computer.</term>
            </item>
            <item>
            <term>Other</term>
            <term>If the function fails, use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetAdaptersInfo</c> function can retrieve information only for IPv4 addresses.</para>
            <para>
            In versions prior to Windows 10, the order in which adapters appear in the list returned by this function can be controlled from
            the Network Connections folder: select the Advanced Settings menu item from the Advanced menu. Starting with Windows 10, the
            order is unspecified.
            </para>
            <para>
            The <c>GetAdaptersInfo</c> and GetInterfaceInfo functions do not return information about the IPv4 loopback interface.
            Information on the loopback interface is returned by the GetIpAddrTable function.
            </para>
            <para>
            <c>On Windows XP and later:</c> The list of adapters returned by <c>GetAdaptersInfo</c> includes unidirectional adapters. To
            generate a list of adapters that can both send and receive data, call GetUniDirectionalAdapterInfo, and exclude the returned
            adapters from the list returned by <c>GetAdaptersInfo</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetAdaptersInfo">
            <summary>
            <para>The <c>GetAdaptersInfo</c> function retrieves adapter information for the local computer.</para>
            <para><c>On Windows XP and later:</c> Use the GetAdaptersAddresses function instead of <c>GetAdaptersInfo</c>.</para>
            </summary>
            <returns>A linked list of IP_ADAPTER_INFO structures.</returns>
            <remarks>
            <para>The <c>GetAdaptersInfo</c> function can retrieve information only for IPv4 addresses.</para>
            <para>
            In versions prior to Windows 10, the order in which adapters appear in the list returned by this function can be controlled from
            the Network Connections folder: select the Advanced Settings menu item from the Advanced menu. Starting with Windows 10, the
            order is unspecified.
            </para>
            <para>
            The <c>GetAdaptersInfo</c> and GetInterfaceInfo functions do not return information about the IPv4 loopback interface.
            Information on the loopback interface is returned by the GetIpAddrTable function.
            </para>
            <para>
            <c>On Windows XP and later:</c> The list of adapters returned by <c>GetAdaptersInfo</c> includes unidirectional adapters. To
            generate a list of adapters that can both send and receive data, call GetUniDirectionalAdapterInfo, and exclude the returned
            adapters from the list returned by <c>GetAdaptersInfo</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetBestInterface(Vanara.PInvoke.Ws2_32.IN_ADDR,System.UInt32@)">
            <summary>
            <para>
            The <c>GetBestInterface</c> function retrieves the index of the interface that has the best route to the specified IPv4 address.
            </para>
            </summary>
            <param name="dwDestAddr">
            <para>The destination IPv4 address for which to retrieve the interface that has the best route, in the form of an IPAddr structure.</para>
            </param>
            <param name="pdwBestIfIndex">
            <para>
            A pointer to a <c>DWORD</c> variable that receives the index of the interface that has the best route to the IPv4 address
            specified by dwDestAddr.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_CAN_NOT_COMPLETE</term>
            <term>The operation could not be completed.</term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the pdwBestIfIndex
            parameter or if the pdwBestIfIndex points to memory that cannot be written.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported. This error is returned if no IPv4 stack is on the local computer.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use the FormatMessage function to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>GetBestInterface</c> function only works with IPv4 addresses. For use with IPv6 addresses, the GetBestInterfaceEx must be used.
            </para>
            <para>
            For information about the <c>IPAddr</c> data type, see Windows Data Types. To convert an IP address between dotted decimal
            notation and <c>IPAddr</c> format, use the inet_addr and inet_ntoa functions.
            </para>
            <para>
            On Windows Vista and later, the pdwBestIfIndex parameter is treated internally by IP Helper as a pointer to a <c>NET_IFINDEX</c> datatype.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetBestInterfaceEx(Vanara.PInvoke.Ws2_32.SOCKADDR,System.UInt32@)">
            <summary>
            <para>
            The <c>GetBestInterfaceEx</c> function retrieves the index of the interface that has the best route to the specified IPv4 or IPv6 address.
            </para>
            </summary>
            <param name="pDestAddr">
            <para>
            The destination IPv6 or IPv4 address for which to retrieve the interface with the best route, in the form of a sockaddr structure.
            </para>
            </param>
            <param name="pdwBestIfIndex">
            <para>A pointer to the index of the interface with the best route to the IPv6 or IPv4 address specified by pDestAddr.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_CAN_NOT_COMPLETE</term>
            <term>The operation could not be completed.</term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the pdwBestIfIndex
            parameter or if the pDestAddr or pdwBestIfIndex parameters point to memory that cannot be accessed. This error can also be
            returned if the pdwBestIfIndex parameter points to memory that can't be written to.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address was specified
            in the pDestAddr parameter or no IPv6 stack is on the local computer and an IPv6 address was specified in the pDestAddr parameter.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use the FormatMessage function to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>GetBestInterfaceEx</c> function differs from the GetBestInterface function in that it can be used with either IPv4 or IPv6 addresses.
            </para>
            <para>
            The <c>Family</c> member of the sockaddr structure pointed to by the pDestAddr parameter must be set to one of the following
            values: <c>AF_INET</c> or <c>AF_INET6</c>.
            </para>
            <para>
            On Windows Vista and later, the pdwBestIfIndex parameter is treated internally by IP Helper as a pointer to a <c>NET_IFINDEX</c> datatype.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetBestRoute(Vanara.PInvoke.Ws2_32.IN_ADDR,Vanara.PInvoke.Ws2_32.IN_ADDR,Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW@)">
            <summary>
            <para>The <c>GetBestRoute</c> function retrieves the best route to the specified destination IP address.</para>
            </summary>
            <param name="dwDestAddr">
            <para>Destination IP address for which to obtain the best route.</para>
            </param>
            <param name="dwSourceAddr">
            <para>
            Source IP address. This IP address corresponds to an interface on the local computer. If multiple best routes to the destination
            address exist, the function selects the route that uses this interface.
            </para>
            <para>This parameter is optional. The caller may specify zero for this parameter.</para>
            </param>
            <param name="pBestRoute">
            <para>Pointer to a MIB_IPFORWARDROW structure containing the best route for the IP address specified by dwDestAddr.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, use FormatMessage to obtain the message string for the returned error.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetExtendedTcpTable(System.IntPtr,System.UInt32@,System.Boolean,System.UInt32,Vanara.PInvoke.IpHlpApi.TCP_TABLE_CLASS,System.UInt32)">
            <summary>
            <para>The <c>GetExtendedTcpTable</c> function retrieves a table that contains a list of TCP endpoints available to the application.</para>
            </summary>
            <param name="pTcpTable">
            <para>
            A pointer to the table structure that contains the filtered TCP endpoints available to the application. For information about how
            to determine the type of table returned based on specific input parameter combinations, see the Remarks section later in this document.
            </para>
            </param>
            <param name="pdwSize">
            <para>
            The estimated size of the structure returned in pTcpTable, in bytes. If this value is set too small,
            <c>ERROR_INSUFFICIENT_BUFFER</c> is returned by this function, and this field will contain the correct size of the structure.
            </para>
            </param>
            <param name="bOrder">
            <para>
            A value that specifies whether the TCP connection table should be sorted. If this parameter is set to <c>TRUE</c>, the TCP
            endpoints in the table are sorted in ascending order, starting with the lowest local IP address. If this parameter is set to
            <c>FALSE</c>, the TCP endpoints in the table appear in the order in which they were retrieved.
            </para>
            <para>The following values are compared (as listed) when ordering the TCP endpoints:</para>
            <list type="number">
            <item>
            <term>Local IP address</term>
            </item>
            <item>
            <term>Local scope ID (applicable when the ulAf parameter is set to AF_INET6)</term>
            </item>
            <item>
            <term>Local TCP port</term>
            </item>
            <item>
            <term>Remote IP address</term>
            </item>
            <item>
            <term>Remote scope ID (applicable when the ulAf parameter is set to AF_INET6)</term>
            </item>
            <item>
            <term>Remote TCP port</term>
            </item>
            </list>
            </param>
            <param name="ulAf">
            <para>The version of IP used by the TCP endpoints.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_INET</term>
            <term>IPv4 is used.</term>
            </item>
            <item>
            <term>AF_INET6</term>
            <term>IPv6 is used.</term>
            </item>
            </list>
            </param>
            <param name="TableClass">
            <para>The type of the TCP table structure to retrieve. This parameter can be one of the values from the TCP_TABLE_CLASS enumeration.</para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed and the TCP_TABLE_CLASS
            enumeration is defined in the Iprtrmib.h header file, not in the IpHlpApi.h header file.
            </para>
            <para>
            The TCP_TABLE_CLASS enumeration value is combined with the value of the ulAf parameter to determine the extended TCP information
            to retrieve.
            </para>
            </param>
            <param name="Reserved">
            <para>Reserved. This value must be zero.</para>
            </param>
            <returns>
            <para>If the call is successful, the value <c>NO_ERROR</c> is returned.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            An insufficient amount of space was allocated for the table. The size of the table is returned in the pdwSize parameter, and must
            be used in a subsequent call to this function in order to successfully retrieve the table. This error is also returned if the
            pTcpTable parameter is NULL.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the TableClass parameter contains a value that is not
            defined in the TCP_TABLE_CLASS enumeration.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The table type returned by this function depends on the specific combination of the ulAf parameter and the TableClass parameter.
            </para>
            <para>
            When the ulAf parameter is set to <c>AF_INET</c>, the following table indicates the TCP table type to retrieve in the structure
            pointed to by the pTcpTable parameter for each possible TableClass value.
            </para>
            <list type="table">
            <listheader>
            <term>TableClass value</term>
            <term>pTcpTable structure</term>
            </listheader>
            <item>
            <term>TCP_TABLE_BASIC_ALL</term>
            <term>MIB_TCPTABLE</term>
            </item>
            <item>
            <term>TCP_TABLE_BASIC_CONNECTIONS</term>
            <term>MIB_TCPTABLE</term>
            </item>
            <item>
            <term>TCP_TABLE_BASIC_LISTENER</term>
            <term>MIB_TCPTABLE</term>
            </item>
            <item>
            <term>TCP_TABLE_OWNER_MODULE_ALL</term>
            <term>MIB_TCPTABLE_OWNER_MODULE</term>
            </item>
            <item>
            <term>TCP_TABLE_OWNER_MODULE_CONNECTIONS</term>
            <term>MIB_TCPTABLE_OWNER_MODULE</term>
            </item>
            <item>
            <term>TCP_TABLE_OWNER_MODULE_LISTENER</term>
            <term>MIB_TCPTABLE_OWNER_MODULE</term>
            </item>
            <item>
            <term>TCP_TABLE_OWNER_PID_ALL</term>
            <term>MIB_TCPTABLE_OWNER_PID</term>
            </item>
            <item>
            <term>TCP_TABLE_OWNER_PID_CONNECTIONS</term>
            <term>MIB_TCPTABLE_OWNER_PID</term>
            </item>
            <item>
            <term>TCP_TABLE_OWNER_PID_LISTENER</term>
            <term>MIB_TCPTABLE_OWNER_PID</term>
            </item>
            </list>
            <para>
            When the ulAf parameter is set to <c>AF_INET6</c>, the following table indicates the TCP table type to retrieve in the structure
            pointed to by the pTcpTable parameter for each possible TableClass value.
            </para>
            <list type="table">
            <listheader>
            <term>TableClass value</term>
            <term>pTcpTable structure</term>
            </listheader>
            <item>
            <term>TCP_TABLE_OWNER_MODULE_ALL</term>
            <term>MIB_TCP6TABLE_OWNER_MODULE</term>
            </item>
            <item>
            <term>TCP_TABLE_OWNER_MODULE_CONNECTIONS</term>
            <term>MIB_TCP6TABLE_OWNER_MODULE</term>
            </item>
            <item>
            <term>TCP_TABLE_OWNER_MODULE_LISTENER</term>
            <term>MIB_TCP6TABLE_OWNER_MODULE</term>
            </item>
            <item>
            <term>TCP_TABLE_OWNER_PID_ALL</term>
            <term>MIB_TCP6TABLE_OWNER_PID</term>
            </item>
            <item>
            <term>TCP_TABLE_OWNER_PID_CONNECTIONS</term>
            <term>MIB_TCP6TABLE_OWNER_PID</term>
            </item>
            <item>
            <term>TCP_TABLE_OWNER_PID_LISTENER</term>
            <term>MIB_TCP6TABLE_OWNER_PID</term>
            </item>
            </list>
            <para>
            The <c>GetExtendedTcpTable</c> function called with the ulAf parameter set to <c>AF_INET6</c> and the TableClass set to
            <c>TCP_TABLE_BASIC_LISTENER</c>, <c>TCP_TABLE_BASIC_CONNECTIONS</c>, or <c>TCP_TABLE_BASIC_ALL</c> is not supported and returns <c>ERROR_NOT_SUPPORTED</c>.
            </para>
            <para>
            On the Windows SDK released for Windows Vistaand later, the organization of header files has changed. The various MIB_TCPTABLE
            structures are defined in the Tcpmib.h header file, not in the Iprtrmib.h header file. Note that the Tcpmib.h header file is
            automatically included in Iprtrmib.h, which is automatically included in the IpHlpApi.h header file. The Tcpmib.h and Iprtrmib.h
            header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetExtendedTcpTable``1(Vanara.PInvoke.IpHlpApi.TCP_TABLE_CLASS,Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,System.Boolean)">
            <summary>The GetExtendedTcpTable function retrieves a table that contains a list of TCP endpoints available to the application.</summary>
            <typeparam name="T">The type that is defined as the table associated with the <paramref name="TableClass"/> value.</typeparam>
            <param name="TableClass">
            The type of the TCP table structure to retrieve. This parameter can be one of the values from the TCP_TABLE_CLASS enumeration.
            <para>
            The TCP_TABLE_CLASS enumeration value is combined with the value of the ulAf parameter to determine the extended TCP information
            to retrieve.
            </para>
            </param>
            <param name="ulAf">The version of IP used by the TCP endpoints. Valid values are AF_INET and AF_INET6.</param>
            <param name="sorted">
            A value that specifies whether the TCP connection table should be sorted. If this parameter is set to TRUE, the TCP endpoints in
            the table are sorted in ascending order, starting with the lowest local IP address. If this parameter is set to FALSE, the TCP
            endpoints in the table appear in the order in which they were retrieved.
            </param>
            <returns>The table.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetExtendedUdpTable(System.IntPtr,System.UInt32@,System.Boolean,System.UInt32,Vanara.PInvoke.IpHlpApi.UDP_TABLE_CLASS,System.UInt32)">
            <summary>
            <para>The <c>GetExtendedUdpTable</c> function retrieves a table that contains a list of UDP endpoints available to the application.</para>
            </summary>
            <param name="pUdpTable">
            <para>
            A pointer to the table structure that contains the filtered UDP endpoints available to the application. For information about how
            to determine the type of table returned based on specific input parameter combinations, see the Remarks section later in this document.
            </para>
            </param>
            <param name="pdwSize">
            <para>
            The estimated size of the structure returned in pUdpTable, in bytes. If this value is set too small,
            <c>ERROR_INSUFFICIENT_BUFFER</c> is returned by this function, and this field will contain the correct size of the structure.
            </para>
            </param>
            <param name="bOrder">
            <para>
            A value that specifies whether the UDP endpoint table should be sorted. If this parameter is set to <c>TRUE</c>, the UDP
            endpoints in the table are sorted in ascending order, starting with the lowest local IP address. If this parameter is set to
            <c>FALSE</c>, the UDP endpoints in the table appear in the order in which they were retrieved.
            </para>
            <para>The following values are compared as listed when ordering the UDP endpoints:</para>
            <list type="number">
            <item>
            <term>Local IP address</term>
            </item>
            <item>
            <term>Local scope ID (applicable when the ulAf parameter is set to AF_INET6)</term>
            </item>
            <item>
            <term>Local UDP port</term>
            </item>
            </list>
            </param>
            <param name="ulAf">
            <para>The version of IP used by the UDP endpoint.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_INET</term>
            <term>IPv4 is used.</term>
            </item>
            <item>
            <term>AF_INET6</term>
            <term>IPv6 is used.</term>
            </item>
            </list>
            </param>
            <param name="TableClass">
            <para>The type of the UDP table structure to retrieve. This parameter can be one of the values from the UDP_TABLE_CLASS enumeration.</para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed and the UDP_TABLE_CLASS
            enumeration is defined in the Iprtrmib.h header file, not in the IpHlpApi.h header file.
            </para>
            <para>
            The UDP_TABLE_CLASS enumeration value is combined with the value of the ulAf parameter to determine the extended UDP information
            to retrieve.
            </para>
            </param>
            <param name="Reserved">
            <para>Reserved. This value must be zero.</para>
            </param>
            <returns>
            <para>If the call is successful, the value <c>NO_ERROR</c> is returned.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            An insufficient amount of space was allocated for the table. The size of the table is returned in the pdwSize parameter, and must
            be used in a subsequent call to this function in order to successfully retrieve the table. This error is also returned if the
            pUdpTable parameter is NULL.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the TableClass parameter contains a value that is not
            defined in the UDP_TABLE_CLASS enumeration.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The table type returned by this function depends on the specific combination of the ulAf parameter and the TableClass parameter.
            </para>
            <para>
            When the ulAf parameter is set to <c>AF_INET</c>, the following table indicates the UDP table type to retrieve in the structure
            pointed to by the pUdpTable parameter for each possible TableClass value.
            </para>
            <list type="table">
            <listheader>
            <term>TableClass value</term>
            <term>pUdpTable structure</term>
            </listheader>
            <item>
            <term>UDP_TABLE_BASIC</term>
            <term>MIB_UDPTABLE</term>
            </item>
            <item>
            <term>UDP_TABLE_OWNER_MODULE</term>
            <term>MIB_UDPTABLE_OWNER_MODULE</term>
            </item>
            <item>
            <term>UDP_TABLE_OWNER_PID</term>
            <term>MIB_UDPTABLE_OWNER_PID</term>
            </item>
            </list>
            <para>
            When the ulAf parameter is set to <c>AF_INET6</c>, the following table indicates the TCP table type to retrieve in the structure
            pointed to by the pUdpTable parameter for each possible TableClass value.
            </para>
            <list type="table">
            <listheader>
            <term>TableClass value</term>
            <term>pUdpTable structure</term>
            </listheader>
            <item>
            <term>UDP_TABLE_BASIC</term>
            <term>MIB_UDP6TABLE</term>
            </item>
            <item>
            <term>UDP_TABLE_OWNER_MODULE</term>
            <term>MIB_UDP6TABLE_OWNER_MODULE</term>
            </item>
            <item>
            <term>UDP_TABLE_OWNER_PID</term>
            <term>MIB_UDP6TABLE_OWNER_PID</term>
            </item>
            </list>
            <para>
            The <c>GetExtendedUdpTable</c> function when called with the ulAf parameter set to <c>AF_INET6</c> and the TableClass set to
            <c>UDP_TABLE_BASIC</c> is only supported on Windows Vista and later.
            </para>
            <para>
            On Windows Server 2003 with Service Pack 1 (SP1) and Windows XP with Service Pack 2 (SP2), the <c>GetExtendedUdpTable</c>
            function called with the ulAf parameter set to <c>AF_INET6</c> and the TableClass set to <c>UDP_TABLE_BASIC</c> fails and returns <c>ERROR_NOT_SUPPORTED</c>.
            </para>
            <para>
            On the Windows SDK released for Windows Vistaand later, the organization of header files has changed. The various MIB_UDPTABLE
            structures are defined in the Udpmib.h header file, not in the Iprtrmib.h header file. Note that the Udpmib.h header file is
            automatically included in Iprtrmib.h, which is automatically included in the IpHlpApi.h header file. The Udpmib.h and Iprtrmib.h
            header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetExtendedUdpTable``1(Vanara.PInvoke.IpHlpApi.UDP_TABLE_CLASS,Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,System.Boolean)">
            <summary>The GetExtendedUdpTable function retrieves a table that contains a list of UDP endpoints available to the application.</summary>
            <typeparam name="T">The type that is defined as the table associated with the <paramref name="TableClass"/> value.</typeparam>
            <param name="TableClass">
            The type of the UDP table structure to retrieve. This parameter can be one of the values from the UDP_TABLE_CLASS enumeration.
            <para>
            The UDP_TABLE_CLASS enumeration value is combined with the value of the ulAf parameter to determine the extended UDP information
            to retrieve.
            </para>
            </param>
            <param name="ulAf">The version of IP used by the UDP endpoint.</param>
            <param name="sorted">
            A value that specifies whether the UDP endpoint table should be sorted. If this parameter is set to TRUE, the UDP endpoints in
            the table are sorted in ascending order, starting with the lowest local IP address. If this parameter is set to FALSE, the UDP
            endpoints in the table appear in the order in which they were retrieved.
            </param>
            <returns>The table.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetFriendlyIfIndex(System.UInt32)">
            <summary>
            The <c>GetFriendlyIfIndex</c> function takes an interface index and returns a backward-compatible interface index, that is, an
            index that uses only the lower 24 bits.
            </summary>
            <param name="IfIndex">The interface index from which the backward-compatible or "friendly" interface index is derived.</param>
            <returns>A backward-compatible interface index that uses only the lower 24 bits.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIcmpStatistics(Vanara.PInvoke.IpHlpApi.MIB_ICMP@)">
            <summary>
            The <c>GetIcmpStatistics</c> function retrieves the Internet Control Message Protocol (ICMP) for IPv4 statistics for the local computer.
            </summary>
            <param name="Statistics">A pointer to a MIB_ICMP structure that receives the ICMP statistics for the local computer.</param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The pStats parameter is NULL, or GetIcmpStatistics is unable to write to the memory pointed to by the pStats parameter.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use the FormatMessage function to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>GetIcmpStatistics</c> function returns the ICMP statistics for IPv4 on the local computer. On Windows XP and later, the
            GetIpStatisticsEx can be used to obtain the ICMP statistics for either IPv4 or IPv6 on the local computer.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves the ICMP for IPv4 statistics for the local computer and prints some information from the returned data.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIcmpStatisticsEx(Vanara.PInvoke.IpHlpApi.MIB_ICMP_EX@,Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY)">
            <summary>
            The <c>GetIcmpStatisticsEx</c> function retrieves Internet Control Message Protocol (ICMP) statistics for the local computer. The
            <c>GetIcmpStatisticsEx</c> function is capable of retrieving IPv6 ICMP statistics.
            </summary>
            <param name="Statistics">A pointer to a MIB_ICMP_EX structure that contains ICMP statistics for the local computer.</param>
            <param name="Family">
            <para>The protocol family for which to retrieve ICMP statistics. Must be one of the following:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_INET</term>
            <term>Internet Protocol version 4 (IPv4).</term>
            </item>
            <item>
            <term>AF_INET6</term>
            <term>Internet Protocol version 6 (IPv6).</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The pStats parameter is NULL or does not point to valid memory, or the dwFamily parameter is not a valid value.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>This function is not supported on the operating system on which the function call was made.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The GetIpStatisticsEx can be used to obtain the ICMP statistics for either IPv4 or IPv6 on the local computer.</para>
            <para>The GetIcmpStatistics function returns the ICMP statistics for only IPv4 on the local computer.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIfEntry(Vanara.PInvoke.IpHlpApi.MIB_IFROW@)">
            <summary>The <c>GetIfEntry</c> function retrieves information for the specified interface on the local computer.</summary>
            <param name="pIfRow">
            A pointer to a MIB_IFROW structure that, on successful return, receives information for an interface on the local computer. On
            input, set the <c>dwIndex</c> member of <c>MIB_IFROW</c> to the index of the interface for which to retrieve information. The
            value for the <c>dwIndex</c> must be retrieved by a previous call to the GetIfTable, GetIfTable2, or GetIfTable2Ex function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_CAN_NOT_COMPLETE</term>
            <term>The request could not be completed. This is an internal error.</term>
            </item>
            <item>
            <term>ERROR_INVALID_DATA</term>
            <term>
            The data is invalid. This error is returned if the network interface index specified by the dwIndex member of the MIB_IFROW
            structure pointed to by the pIfRow parameter is not a valid interface index on the local computer.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the pIfRow parameter.</term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface index specified by the dwIndex member
            of the MIB_IFROW structure pointed to by the pIfRow parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported. This error is returned if IPv4 is not configured on the local computer.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetIfEntry</c> function retrieves information for an interface on a local computer.</para>
            <para>
            The <c>dwIndex</c> member in the MIB_IFROW structure pointed to by the pIfRow parameter must be initialized to a valid network
            interface index retrieved by a previous call to the GetIfTable, GetIfTable2, or GetIfTable2Ex function.
            </para>
            <para>
            The <c>GetIfEntry</c> function will fail if the <c>dwIndex</c> member of the MIB_IFROW pointed to by the pIfRow parameter does
            not match an existing interface index on the local computer.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves the entries from the interface table and prints some of the information available for that entry.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIfTable(System.IntPtr,System.UInt32@,System.Boolean)">
            <summary>
            <para>The <c>GetIfTable</c> function retrieves the MIB-II interface table.</para>
            </summary>
            <param name="pIfTable">
            <para>A pointer to a buffer that receives the interface table as a MIB_IFTABLE structure.</para>
            </param>
            <param name="pdwSize">
            <para>On input, specifies the size in bytes of the buffer pointed to by the pIfTable parameter.</para>
            <para>
            On output, if the buffer is not large enough to hold the returned interface table, the function sets this parameter equal to the
            required buffer size in bytes.
            </para>
            </param>
            <param name="bOrder">
            <para>
            A Boolean value that specifies whether the returned interface table should be sorted in ascending order by interface index. If
            this parameter is <c>TRUE</c>, the table is sorted.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The buffer pointed to by the pIfTable parameter is not large enough. The required size is returned in the DWORD variable pointed
            to by the pdwSize parameter.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The pdwSize parameter is NULL, or GetIfTable is unable to write to the memory pointed to by the pdwSize parameter.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>This function is not supported on the operating system in use on the local system.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use the FormatMessage function to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>GetIfTable</c> function enumerates physical interfaces on a local system and returns this information in a
            MIB_IFTABLEstructure. The physical interfaces include the software loopback interface.
            </para>
            <para>
            The GetIfTable2 and GetIfTable2Ex functions available on Windows Vista and later are an enhanced version of the <c>GetIfTable</c>
            function that enumerate both the physical and logical interfaces on a local system. Logical interfaces include various WAN
            Miniport interfaces used for L2TP, PPTP, PPOE, and other tunnel encapsulations.
            </para>
            <para>
            Interfaces are returned in a MIB_IFTABLE structure in the buffer pointed to by the pIfTable parameter. The <c>MIB_IFTABLE</c>
            structure contains an interface count and an array of MIB_IFROWstructures for each interface.
            </para>
            <para>
            Note that the returned MIB_IFTABLE structure pointed to by the pIfTable parameter may contain padding for alignment between the
            <c>dwNumEntries</c> member and the first MIB_IFROW array entry in the <c>table</c> member of the <c>MIB_IFTABLE</c> structure.
            Padding for alignment may also be present between the <c>MIB_IFROW</c> array entries. Any access to a <c>MIB_IFROW</c> array
            entry should assume padding may exist.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves the interface table and prints the number of entries in the table and some data on each entry.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIfTable(System.Boolean)">
            <summary>The GetIfTable function retrieves the MIB-II interface table.</summary>
            <param name="sorted">
            A Boolean value that specifies whether the returned interface table should be sorted in ascending order by interface index. If
            this parameter is TRUE, the table is sorted.
            </param>
            <returns>The MIB-II interface table.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetInterfaceInfo(System.IntPtr,System.UInt32@)">
            <summary>
            <para>
            The <c>GetInterfaceInfo</c> function obtains the list of the network interface adapters with IPv4 enabled on the local system.
            </para>
            </summary>
            <param name="pIfTable">
            <para>
            A pointer to a buffer that specifies an IP_INTERFACE_INFO structure that receives the list of adapters. This buffer must be
            allocated by the caller.
            </para>
            </param>
            <param name="dwOutBufLen">
            <para>
            A pointer to a <c>DWORD</c> variable that specifies the size of the buffer pointed to by pIfTable parameter to receive the
            IP_INTERFACE_INFO structure. If this size is insufficient to hold the IPv4 interface information, <c>GetInterfaceInfo</c> fills
            in this variable with the required size, and returns an error code of <c>ERROR_INSUFFICIENT_BUFFER</c>.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>NO_ERROR</c>.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The buffer to receive the IPv4 adapter information is too small. This value is returned if the dwOutBufLen parameter indicates
            that the buffer pointed to by the pIfTable parameter is too small to retrieve the IPv4 interface information. The required size
            is returned in the DWORD variable pointed to by the dwOutBufLen parameter.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the dwOutBufLen parameter is NULL, or GetInterfaceInfo
            is unable to write to the memory pointed to by the dwOutBufLen parameter.
            </term>
            </item>
            <item>
            <term>ERROR_NO_DATA</term>
            <term>
            There are no network adapters enabled for IPv4 on the local system. This value is also returned if all network adapters on the
            local system are disabled.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>This function is not supported on the operating system in use on the local system.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>GetInterfaceInfo</c> function is specific to network adapters with IPv4 enabled. The function returns an IP_INTERFACE_INFO
            structure pointed to by the pIfTable parameter that contains the number of network adapters with IPv4 enabled on the local system
            and an array of IP_ADAPTER_INDEX_MAP structures with information on each network adapter with IPv4 enabled. The
            <c>IP_INTERFACE_INFO</c> structure returned by <c>GetInterfaceInfo</c> contains at least one <c>IP_ADAPTER_INDEX_MAP</c>
            structure even if the <c>NumAdapters</c> member of the <c>IP_INTERFACE_INFO</c> structure indicates that no network adapters with
            IPv4 are enabled. When the <c>NumAdapters</c> member of the <c>IP_INTERFACE_INFO</c> structure returned by
            <c>GetInterfaceInfo</c> is zero, the value of the members of the single <c>IP_ADAPTER_INDEX_MAP</c> structure returned in the
            <c>IP_INTERFACE_INFO</c> structure is undefined.
            </para>
            <para>
            If the <c>GetInterfaceInfo</c> function is called with too small a buffer to retrieve the IPv4 interface information (the
            dwOutBufLen parameter indicates that the buffer pointed to by the pIfTable parameter is too small), the function returns
            <c>ERROR_INSUFFICIENT_BUFFER</c>. The required size is returned in the <c>DWORD</c> variable pointed to by the dwOutBufLen parameter.
            </para>
            <para>
            The correct way to use the <c>GetInterfaceInfo</c> function is to call this function twice. In the first call, pass a <c>NULL</c>
            pointer in the pIfTable parameter and zero in the variable pointed to by the dwOutBufLen parameter. The call with fail with
            <c>ERROR_INSUFFICIENT_BUFFER</c> and the required size for this buffer is returned in the <c>DWORD</c> variable pointed to by the
            dwOutBufLen parameter. A buffer can then be allocated of the required size using the value pointed by the dwOutBufLen. Then the
            <c>GetInterfaceInfo</c> function can be called a second time with a pointer to this buffer passed in the pIfTable parameter and
            the length of the buffer set to the size of this buffer.
            </para>
            <para>
            The GetAdaptersInfo and <c>GetInterfaceInfo</c> functions do not return information about the loopback interface. Information on
            the loopback interface is returned by the GetIpAddrTable function.
            </para>
            <para>
            On Windows Vista and later, the <c>Name</c> member of the IP_ADAPTER_INDEX_MAP structure returned in the IP_INTERFACE_INFO
            structure may be a Unicode string of the GUID for the network interface (the string begins with the '{' character).
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves the list of network adapters with IPv4 enabled on the local system and prints various properties
            of the first network adapter.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetInterfaceInfo">
            <summary>
            The GetInterfaceInfo function obtains the list of the network interface adapters with IPv4 enabled on the local system.
            </summary>
            <returns>An IP_INTERFACE_INFO structure that receives the list of adapters.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpAddrTable(System.IntPtr,System.UInt32@,System.Boolean)">
            <summary>
            <para>The <c>GetIpAddrTable</c> function retrieves the interface–to–IPv4 address mapping table.</para>
            </summary>
            <param name="pIpAddrTable">
            <para>A pointer to a buffer that receives the interface–to–IPv4 address mapping table as a MIB_IPADDRTABLE structure.</para>
            </param>
            <param name="pdwSize">
            <para>On input, specifies the size in bytes of the buffer pointed to by the pIpAddrTable parameter.</para>
            <para>
            On output, if the buffer is not large enough to hold the returned mapping table, the function sets this parameter equal to the
            required buffer size in bytes.
            </para>
            </param>
            <param name="bOrder">
            <para>
            A Boolean value that specifies whether the returned mapping table should be sorted in ascending order by IPv4 address. If this
            parameter is <c>TRUE</c>, the table is sorted.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The buffer pointed to by the pIpAddrTable parameter is not large enough. The required size is returned in the DWORD variable
            pointed to by the pdwSize parameter.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The pdwSize parameter is NULL, or GetIpAddrTable is unable to write to the memory pointed to by the pdwSize parameter.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>This function is not supported on the operating system in use on the local system.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>GetIpAddrTable</c> function retrieves the interface–to–IPv4 address mapping table on a local computer and returns this
            information in an MIB_IPADDRTABLE structure.
            </para>
            <para>
            The IPv4 addresses returned by the <c>GetIpAddrTable</c> function are affected by the status of the network interfaces on a local
            computer. Manually resetting a network interface card (NIC) and certain PnP events may result in an IP address being removed or changed.
            </para>
            <para>
            On Windows Server 2003 and Windows XP, the IPv4 addresses returned by the <c>GetIpAddrTable</c> function are also affected if the
            media sensing capability of the TCP/IP stack on a local computer has been disabled by calling the DisableMediaSense function.
            When media sensing has been disabled, the <c>GetIpAddrTable</c> function may return IPv4 addresses associated with disconnected
            interfaces. These Ipv4 addresses for disconnected interfaces are not valid for use.
            </para>
            <para>
            On Windows Server 2008 and Windows Vista, the IPv4 addresses returned by the <c>GetIpAddrTable</c> function are not affected by
            the media sensing capability of the TCP/IP stack on a local computer. The <c>GetIpAddrTable</c> function returns only valid IPv4 addresses.
            </para>
            <para>
            The GetAdaptersAddresses function available on Windows XP can be used to retrieve both IPv6 and IPv4 addresses and interface information.
            </para>
            <para>
            The MIB_IPADDRTABLE structure returned by the <c>GetIpAddrTable</c> function may contain padding for alignment between the
            <c>dwNumEntries</c> member and the first MIB_IPADDRROW array entry in the <c>table</c> member. Padding for alignment may also be
            present between the <c>MIB_IPADDRROW</c> array entries in the <c>table</c> member. Any access to a <c>MIB_IPADDRROW</c> array
            entry should assume padding may exist.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the MIB_IPADDRROW is defined in the Ipmib.h header file not in the Iprtrmib.h header file. Note that the Ipmib.h
            header file is automatically included in Iprtrmib.h which is automatically included in the IpHlpApi.h header file. The Ipmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            <para>Examples</para>
            <para>The following example retrieves the IP address table, then prints some members of the IP address entries in the table.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpAddrTable(System.Boolean)">
            <summary>The GetIpAddrTable function retrieves the interface–to–IPv4 address mapping table.</summary>
            <param name="sorted">
            A Boolean value that specifies whether the returned mapping table should be sorted in ascending order by IPv4 address. If this
            parameter is TRUE, the table is sorted.
            </param>
            <returns>The interface–to–IPv4 address mapping table as a MIB_IPADDRTABLE structure.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpErrorString(Vanara.PInvoke.Win32Error,System.Text.StringBuilder,System.UInt32@)">
            <summary>The <c>GetIpErrorString</c> function retrieves an IP Helper error string.</summary>
            <param name="ErrorCode">
            The error code to be retrieved. The possible values for this parameter are defined in the Ipexport.h header file.
            </param>
            <param name="Buffer">A pointer to the buffer that contains the error code string if the function returns with NO_ERROR.</param>
            <param name="Size">A pointer to a <c>DWORD</c> that specifies the length, in bytes, of the buffer pointed to by Buffer parameter.</param>
            <returns>
            <para>Returns NO_ERROR upon success.</para>
            <para>If the function fails, use FormatMessage to obtain the message string for the returned error.</para>
            </returns>
            <remarks>
            <para>
            The <c>GetIpErrorString</c> function can be used to retrieve an IP Helper error string for an IP error code. The <c>IP_STATUS</c>
            error code passed in the ErrorCode parameter is returned in the <c>Status</c> member of the ICMP_ECHO_REPLY, ICMP_ECHO_REPLY32,
            and ICMPV6_ECHO_REPLY structures used by the ICMP and ICMPv6 functions. The functions that use these structures include
            Icmp6ParseReplies, Icmp6SendEcho2, IcmpParseReplies, IcmpSendEcho, IcmpSendEcho2, and IcmpSendEcho2Ex.
            </para>
            <para>
            The syntax for the <c>GetIpErrorString</c> function was slightly changed on the Microsoft Windows Software Development Kit (SDK)
            released for Windows Vista and later. The data type for the Buffer parameter was changed from <c>PWCHAR</c> to <c>PWSTR</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpForwardTable(System.IntPtr,System.UInt32@,System.Boolean)">
            <summary>The <c>GetIpForwardTable</c> function retrieves the IPv4 routing table.</summary>
            <param name="pIpForwardTable">A pointer to a buffer that receives the IPv4 routing table as a MIB_IPFORWARDTABLE structure.</param>
            <param name="pdwSize">
            <para>On input, specifies the size in bytes of the buffer pointed to by the pIpForwardTable parameter.</para>
            <para>
            On output, if the buffer is not large enough to hold the returned routing table, the function sets this parameter equal to the
            required buffer size in bytes.
            </para>
            </param>
            <param name="bOrder">
            <para>
            A Boolean value that specifies whether the returned table should be sorted. If this parameter is <c>TRUE</c>, the table is sorted
            in the order of:
            </para>
            <list type="number">
            <item>
            <term>Destination address</term>
            </item>
            <item>
            <term>Protocol that generated the route</term>
            </item>
            <item>
            <term>Multipath routing policy</term>
            </item>
            <item>
            <term>Next-hop address</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>NO_ERROR</c> (zero).</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The buffer pointed to by the pIpForwardTable parameter is not large enough. The required size is returned in the DWORD variable
            pointed to by the pdwSize parameter.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The pdwSize parameter is NULL, or GetIpForwardTable is unable to write to the memory pointed to by the pdwSize parameter.</term>
            </item>
            <item>
            <term>ERROR_NO_DATA</term>
            <term>No data is available. This error is returned if there are no routes present on the local computer.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            This function is not supported on the operating system in use on the local system. This error is returned if there is no IP stack
            installed on the local computer.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>dwForwardProto</c> member of the MIB_IPFORWARDROW structure specifies the protocol or routing mechanism that generated the
            route. See Protocol Identifiers for a list of possible protocols and routing mechanisms.
            </para>
            <para>
            The <c>dwForwardDest</c>, <c>dwForwardMask</c>, and <c>dwForwardNextHop</c> members of the MIB_IPFORWARDROW structure represent
            an IPv4 address in network byte order.
            </para>
            <para>
            An IPv4 address of 0.0.0.0 in the <c>dwForwardDest</c> member of the MIB_IPFORWARDROW structure is considered a default route.
            The MIB_IPFORWARDTABLE may contain multiple <c>MIB_IPFORWARDROW</c> entries with the <c>dwForwardDest</c> member set to 0.0.0.0
            when there are multiple network adapters installed.
            </para>
            <para>When <c>dwForwardAge</c> is set to <c>INFINITE</c>, the route will not be removed based on a timeout</para>
            <para>
            value. Any other value for <c>dwForwardAge</c> specifies the number of seconds since the route was added or modified in the
            network routing table.
            </para>
            <para>
            On Windows Server 2003 or Windows 2000 Server when the Routing and Remote Access Service (RRAS) is running, the MIB_IPFORWARDROW
            entries returned have the <c>dwForwardType</c> and <c>dwForwardAge</c> members set to zero.
            </para>
            <para>
            On Windows Vista and Windows Server 2008, the route metric specified in the <c>dwForwardMetric1</c> member of the
            MIB_IPFORWARDROW structure represents a combination of the route metric added to the interface metric specified in the
            <c>Metric</c> member of the MIB_IPINTERFACE_ROW structure of the associated interface. So the <c>dwForwardMetric1</c> member of
            the <c>MIB_IPFORWARDROW</c> structure should be equal to or greater than <c>Metric</c> member of the associated
            <c>MIB_IPINTERFACE_ROW</c> structure. If an application would like to set the route metric to 0 on Windows Vista and Windows
            Server 2008, then the <c>dwForwardMetric1</c> member of the <c>MIB_IPFORWARDROW</c> structure should be set equal to the value of
            the interface metric specified in the <c>Metric</c> member of the associated <c>MIB_IPINTERFACE_ROW</c> structure. An application
            can retrieve the interface metric by calling the GetIpInterfaceEntry function.
            </para>
            <para>
            A number of members of the MIB_IPFORWARDROW structure entries returned by <c>GetIpForwardTable</c> are not currently used by IPv4
            routing. These members include <c>dwForwardPolicy</c>, <c>dwForwardNextHopAS</c>, <c>dwForwardMetric2</c>,
            <c>dwForwardMetric3</c>, <c>dwForwardMetric4</c>, and <c>dwForwardMetric5</c>.
            </para>
            <para>Examples</para>
            <para>The following example retrieves the IP routing table then prints some fields for each route in the table.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpForwardTable(System.Boolean)">
            <summary>The <c>GetIpForwardTable</c> function retrieves the IPv4 routing table.</summary>
            <param name="sorted">
            <para>
            A Boolean value that specifies whether the returned table should be sorted. If this parameter is <c>TRUE</c>, the table is sorted
            in the order of:
            </para>
            <list type="number">
            <item>
            <term>Destination address</term>
            </item>
            <item>
            <term>Protocol that generated the route</term>
            </item>
            <item>
            <term>Multipath routing policy</term>
            </item>
            <item>
            <term>Next-hop address</term>
            </item>
            </list>
            </param>
            <returns>The IPv4 routing table as a MIB_IPFORWARDTABLE structure.</returns>
            <remarks>
            <para>
            The <c>dwForwardProto</c> member of the MIB_IPFORWARDROW structure specifies the protocol or routing mechanism that generated the
            route. See Protocol Identifiers for a list of possible protocols and routing mechanisms.
            </para>
            <para>
            The <c>dwForwardDest</c>, <c>dwForwardMask</c>, and <c>dwForwardNextHop</c> members of the MIB_IPFORWARDROW structure represent
            an IPv4 address in network byte order.
            </para>
            <para>
            An IPv4 address of 0.0.0.0 in the <c>dwForwardDest</c> member of the MIB_IPFORWARDROW structure is considered a default route.
            The MIB_IPFORWARDTABLE may contain multiple <c>MIB_IPFORWARDROW</c> entries with the <c>dwForwardDest</c> member set to 0.0.0.0
            when there are multiple network adapters installed.
            </para>
            <para>When <c>dwForwardAge</c> is set to <c>INFINITE</c>, the route will not be removed based on a timeout</para>
            <para>
            value. Any other value for <c>dwForwardAge</c> specifies the number of seconds since the route was added or modified in the
            network routing table.
            </para>
            <para>
            On Windows Server 2003 or Windows 2000 Server when the Routing and Remote Access Service (RRAS) is running, the MIB_IPFORWARDROW
            entries returned have the <c>dwForwardType</c> and <c>dwForwardAge</c> members set to zero.
            </para>
            <para>
            On Windows Vista and Windows Server 2008, the route metric specified in the <c>dwForwardMetric1</c> member of the
            MIB_IPFORWARDROW structure represents a combination of the route metric added to the interface metric specified in the
            <c>Metric</c> member of the MIB_IPINTERFACE_ROW structure of the associated interface. So the <c>dwForwardMetric1</c> member of
            the <c>MIB_IPFORWARDROW</c> structure should be equal to or greater than <c>Metric</c> member of the associated
            <c>MIB_IPINTERFACE_ROW</c> structure. If an application would like to set the route metric to 0 on Windows Vista and Windows
            Server 2008, then the <c>dwForwardMetric1</c> member of the <c>MIB_IPFORWARDROW</c> structure should be set equal to the value of
            the interface metric specified in the <c>Metric</c> member of the associated <c>MIB_IPINTERFACE_ROW</c> structure. An application
            can retrieve the interface metric by calling the GetIpInterfaceEntry function.
            </para>
            <para>
            A number of members of the MIB_IPFORWARDROW structure entries returned by <c>GetIpForwardTable</c> are not currently used by IPv4
            routing. These members include <c>dwForwardPolicy</c>, <c>dwForwardNextHopAS</c>, <c>dwForwardMetric2</c>,
            <c>dwForwardMetric3</c>, <c>dwForwardMetric4</c>, and <c>dwForwardMetric5</c>.
            </para>
            <para>Examples</para>
            <para>The following example retrieves the IP routing table then prints some fields for each route in the table.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpNetTable(System.IntPtr,System.UInt32@,System.Boolean)">
            <summary>
            <para>The <c>GetIpNetTable</c> function retrieves the IPv4 to physical address mapping table.</para>
            </summary>
            <param name="IpNetTable">
            <para>A pointer to a buffer that receives the IPv4 to physical address mapping table as a MIB_IPNETTABLE structure.</para>
            </param>
            <param name="SizePointer">
            <para>On input, specifies the size in bytes of the buffer pointed to by the pIpNetTable parameter.</para>
            <para>
            On output, if the buffer is not large enough to hold the returned mapping table, the function sets this parameter equal to the
            required buffer size in bytes.
            </para>
            </param>
            <param name="Order">
            <para>
            A Boolean value that specifies whether the returned mapping table should be sorted in ascending order by IP address. If this
            parameter is <c>TRUE</c>, the table is sorted.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR or ERROR_NO_DATA.</para>
            <para>If the function fails or does not return any data, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The buffer pointed to by the pIpNetTable parameter is not large enough. The required size is returned in the DWORD variable
            pointed to by the pdwSize parameter.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the pdwSize parameter is NULL, or GetIpNetTable is
            unable to write to the memory pointed to by the pdwSize parameter.
            </term>
            </item>
            <item>
            <term>ERROR_NO_DATA</term>
            <term>
            There is no data to return. The IPv4 to physical address mapping table is empty. This return value indicates that the call to the
            GetIpNetTable function succeeded, but there was no data to return.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The IPv4 transport is not configured on the local computer.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>GetIpNetTable</c> function enumerates the Address Resolution Protocol (ARP) entries for IPv4 on a local system from the
            IPv4 to physical address mapping table and returns this information in a MIB_IPNETTABLE structure.
            </para>
            <para>
            The IPv4 address entries are returned in a MIB_IPNETTABLE structure in the buffer pointed to by the pIpNetTable parameter. The
            <c>MIB_IPNETTABLE</c> structure contains a count of ARP entries and an array of MIB_IPNETROW structures for each IPv4 address entry.
            </para>
            <para>
            Note that the returned MIB_IPNETTABLE structure pointed to by the pIpNetTable parameter may contain padding for alignment between
            the <c>dwNumEntries</c> member and the first MIB_IPNETROW array entry in the <c>table</c> member of the <c>MIB_IPNETTABLE</c>
            structure. Padding for alignment may also be present between the <c>MIB_IPNETROW</c> array entries. Any access to a
            <c>MIB_IPNETROW</c> array entry should assume padding may exist.
            </para>
            <para>
            on Windows Vista and later, the GetIpNetTable2 function can be used to retrieve the neighbor IP addresses for both IPv6 and IPv4.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpNetTable(System.Boolean)">
            <summary>The GetIpNetTable function retrieves the IPv4 to physical address mapping table.</summary>
            <param name="sorted">
            A Boolean value that specifies whether the returned mapping table should be sorted in ascending order by IP address. If this
            parameter is TRUE, the table is sorted.
            </param>
            <returns>The IPv4 to physical address mapping table as a MIB_IPNETTABLE structure.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpStatistics(Vanara.PInvoke.IpHlpApi.MIB_IPSTATS@)">
            <summary>The <c>GetIpStatistics</c> function retrieves the IP statistics for the current computer.</summary>
            <param name="Statistics">A pointer to a MIB_IPSTATS structure that receives the IP statistics for the local computer.</param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The pStats parameter is NULL, or GetIpStatistics is unable to write to the memory pointed to by the pStats parameter.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use the FormatMessage function to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>GetIpStatistics</c> function returns the statistics for IPv4 on the current computer. On Windows XP and later, the
            GetIpStatisticsEx can be used to obtain the IP statistics for either IPv4 or IPv6.
            </para>
            <para>Examples</para>
            <para>The following example retrieves the IPv4 statistics for the local computer and prints values from the returned data.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpStatisticsEx(Vanara.PInvoke.IpHlpApi.MIB_IPSTATS@,Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY)">
            <summary>
            The <c>GetIpStatisticsEx</c> function retrieves the Internet Protocol (IP) statistics for the current computer. The
            <c>GetIpStatisticsEx</c> function differs from the GetIpStatistics function in that <c>GetIpStatisticsEx</c> also supports the
            Internet Protocol version 6 (IPv6) protocol family.
            </summary>
            <param name="Statistics">A pointer to a MIB_IPSTATS structure that receives the IP statistics for the local computer.</param>
            <param name="Family">
            <para>The protocol family for which to retrieve statistics. This parameter must be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_INET</term>
            <term>Internet Protocol version 4 (IPv4).</term>
            </item>
            <item>
            <term>AF_INET6</term>
            <term>Internet Protocol version 6 (IPv6).</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The pStats parameter is NULL or does not point to valid memory, or the dwFamily parameter is not a valid value.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>This function is not supported on the operating system on which the function call was made.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetIpStatisticsEx</c> can be used to obtain the IP statistics for either IPv4 or IPv6 on the local computer.</para>
            <para>The GetIpStatistics function returns the statistics for only IPv4 on the local computer.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetNetworkParams(System.IntPtr,System.UInt32@)">
            <summary>
            <para>The <c>GetNetworkParams</c> function retrieves network parameters for the local computer.</para>
            </summary>
            <param name="pFixedInfo">
            <para>
            A pointer to a buffer that contains a FIXED_INFO structure that receives the network parameters for the local computer, if the
            function was successful. This buffer must be allocated by the caller prior to calling the <c>GetNetworkParams</c> function.
            </para>
            </param>
            <param name="pOutBufLen">
            <para>
            A pointer to a <c>ULONG</c> variable that specifies the size of the FIXED_INFO structure. If this size is insufficient to hold
            the information, <c>GetNetworkParams</c> fills in this variable with the required size, and returns an error code of <c>ERROR_BUFFER_OVERFLOW</c>.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>ERROR_SUCCESS</c>.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_BUFFER_OVERFLOW</term>
            <term>
            The buffer to receive the network parameter information is too small. This value is returned if the pOutBufLen parameter is too
            small to hold the network parameter information or the pFixedInfo parameter was a NULL pointer. When this error code is returned,
            the pOutBufLen parameter points to the required buffer size.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the pOutBufLen parameter is a NULL pointer, the
            calling process does not have read/write access to the memory pointed to by pOutBufLen, or the calling process does not have
            write access to the memory pointed to by the pFixedInfo parameter.
            </term>
            </item>
            <item>
            <term>ERROR_NO_DATA</term>
            <term>No network parameter information exists for the local computer.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The GetNetworkParams function is not supported by the operating system running on the local computer.</term>
            </item>
            <item>
            <term>Other</term>
            <term>If the function fails, use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>GetNetworkParams</c> function is used to retrieve network parameters for the local computer. Network parameters are
            returned in a FIXED_INFOstructure. The memory for the <c>FIXED_INFO</c> structure must be allocated by the application. It is the
            responsibility of the application to free this memory when it is no longer needed.
            </para>
            <para>
            In the Microsoft Windows Software Development Kit (SDK), the FIXED_INFO_WIN2KSP1 structure is defined. When compiling an
            application if the target platform is Windows 2000 with Service Pack 1 (SP1) and later (, , or ), the <c>FIXED_INFO_WIN2KSP1</c>
            struct is typedefed to the <c>FIXED_INFO</c> structure. When compiling an application if the target platform is not Windows 2000
            with SP1 and later, the <c>FIXED_INFO</c> structure is undefined.
            </para>
            <para>
            The <c>GetNetworkParams</c> function and the FIXED_INFO structure are supported on Windows 98and later. But to build an
            application for a target platform earlier than Windows 2000 with Service Pack 1 (SP1), an earlier version of the Platform
            Software Development Kit (SDK) must be used.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves the network parameters for the local computer and prints information from the returned data.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetNetworkParams">
            <summary>The GetNetworkParams function retrieves network parameters for the local computer.</summary>
            <returns>A <see cref="T:Vanara.PInvoke.IpHlpApi.FIXED_INFO"/> structure that receives the network parameters for the local computer.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetNumberOfInterfaces(System.UInt32@)">
            <summary>The <c>GetNumberOfInterfaces</c> functions retrieves the number of interfaces on the local computer.</summary>
            <param name="pdwNumIf">Pointer to a <c>DWORD</c> variable that receives the number of interfaces on the local computer.</param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, use FormatMessage to obtain the message string for the returned error.</para>
            </returns>
            <remarks>
            The <c>GetNumberOfInterfaces</c> function returns the number of interfaces on the local computer, including the loopback
            interface. This number is one more than the number of adapters returned by the GetAdaptersInfo and GetInterfaceInfo functions
            because these functions do not return information about the loopback interface.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetOwnerModuleFromPidAndInfo(System.UInt32,System.UInt64[],Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_INFO_CLASS,System.IntPtr,System.UInt32@)">
            <summary>Gets the owner module from pid and information. (Undocumented)</summary>
            <param name="ulPid">The pid.</param>
            <param name="pInfo">The information.</param>
            <param name="Class">
              <para>
            A TCPIP_OWNER_MODULE_INFO_CLASS enumeration value that indicates the type of data to obtain regarding the owner module. The
            <c>TCPIP_OWNER_MODULE_INFO_CLASS</c> enumeration is defined in the Iprtrmib.h header file.
            </para>
              <para>This parameter must be set to <c>TCPIP_OWNER_MODULE_INFO_BASIC</c>.</para>
            </param>
            <param name="pBuffer">
              <para>
            A pointer to a buffer that contains a TCPIP_OWNER_MODULE_BASIC_INFO structure with the owner module data. The type of data
            returned in this buffer is indicated by the value of the Class parameter.
            </para>
              <para>The following structures are used for the data in Buffer when Class is set to the corresponding value.</para>
            </param>
            <param name="pdwSize">
            The estimated size of the structure returned in Buffer, in bytes. If this value is set too small,
            <c>ERROR_INSUFFICIENT_BUFFER</c> is returned by this function, and this field will contain the correct structure size.
            </param>
            <returns>Undocumented.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetOwnerModuleFromTcp6Entry(Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_MODULE@,Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_INFO_CLASS,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>GetOwnerModuleFromTcp6Entry</c> function retrieves data about the module that issued the context bind for a specific IPv6
            TCP endpoint in a MIB table row.
            </summary>
            <param name="pTcpEntry">
            A pointer to a MIB_TCP6ROW_OWNER_MODULE structure that contains the IPv6 TCP endpoint entry used to obtain the owner module.
            </param>
            <param name="Class">
            <para>
            A TCPIP_OWNER_MODULE_INFO_CLASS enumeration value that indicates the type of data to obtain regarding the owner module. The
            <c>TCPIP_OWNER_MODULE_INFO_CLASS</c> enumeration is defined in the Iprtrmib.h header file.
            </para>
            <para>This parameter must be set to <c>TCPIP_OWNER_MODULE_INFO_BASIC</c>.</para>
            </param>
            <param name="pBuffer">
            <para>
            A pointer to a buffer that contains a TCPIP_OWNER_MODULE_BASIC_INFO structure with the owner module data. The type of data
            returned in this buffer is indicated by the value of the Class parameter.
            </para>
            <para>The following structures are used for the data in Buffer when Class is set to the corresponding value.</para>
            <list type="table">
            <listheader>
            <term>Class enumeration value</term>
            <term>Buffer data format</term>
            </listheader>
            <item>
            <term>TCPIP_OWNER_MODULE_BASIC_INFO</term>
            <term>TCPIP_OWNER_MODULE_BASIC_INFO</term>
            </item>
            </list>
            </param>
            <param name="pdwSize">
            The estimated size of the structure returned in Buffer, in bytes. If this value is set too small,
            <c>ERROR_INSUFFICIENT_BUFFER</c> is returned by this function, and this field will contain the correct structure size.
            </param>
            <returns>
            <para>If the function call is successful, the value <c>NO_ERROR</c> is returned.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            Insufficient space was allocated for the table. The size of the table is returned in the pdwSize parameter, and must be used in a
            subsequent call to this function in order to successfully retrieve the table.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            A parameter is incorrect. This value is returned if either of the pTcpEntry or pdwSize parameters are NULL. This value is also
            returned if the Class parameter is not equal to TCPIP_OWNER_MODULE_INFO_BASIC.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Not enough memory is available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The element was not found. This value is returned if the dwOwningPid member of the MIB_TCP6ROW_OWNER_MODULE pointed to by the
            pTcpEntry parameter was zero or could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_PARTIAL_COPY</term>
            <term>Only part of a request was completed.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The Buffer parameter contains not only a structure with pointers to specific data, for example, pointers to the zero-terminated
            strings that contain the name and path of the owner module, but the actual data itself; that is the name and path strings.
            Therefore, when calculating the size of the buffer, ensure that you have enough space for both the structure as well as the data
            the members of the structure point to.
            </para>
            <para>
            The resolution of TCP table entries to owner modules is a best practice. In a few cases, the owner module name returned in the
            TCPIP_OWNER_MODULE_BASIC_INFO structure can be a process name (such as "svchost.exe"), a service name (such as "RPC"), or a
            component name (such as "timer.dll").
            </para>
            <para>
            For computers running on Windows Vista or later, the <c>pModuleName</c> and <c>pModulePath</c> members of the
            TCPIP_OWNER_MODULE_BASIC_INFO retrieved by GetOwnerModuleFromTcpEntry function may point to an empty string for some TCP
            connections. Applications that start TCP connections located in the Windows system folder (C:\Windows\System32, by default) are
            considered protected. If the <c>GetOwnerModuleFromTcpEntry</c> function is called by a user that is not a member of the
            Administrators group, the function call will succeed but the <c>pModuleName</c> and <c>pModulePath</c> members will point to
            memory that contains an empty string for the TCP connections started by protected applications.
            </para>
            <para>
            For computers running on Windows Vista or later, accessing the <c>pModuleName</c> and <c>pModulePath</c> members of the
            TCPIP_OWNER_MODULE_BASIC_INFO structure is limited by user account control (UAC). If an application that calls this function is
            executed by a user logged on as a member of the Administrators group other than the built-in Administrator, this call will
            succeed but access to these members returns an empty string unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application on Windows Vista or later lacks this manifest
            file, a user logged on as a member of the Administrators group other than the built-in Administrator must then be executing the
            application in an enhanced shell as the built-in Administrator (RunAs administrator) for access to the protected
            <c>pModuleName</c> and <c>pModulePath</c> members to be allowed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetOwnerModuleFromTcp6Entry(Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_MODULE@)">
            <summary>
            The <c>GetOwnerModuleFromTcp6Entry</c> function retrieves data about the module that issued the context bind for a specific IPv6
            TCP endpoint in a MIB table row.
            </summary>
            <param name="pTcpEntry">
            A pointer to a MIB_TCP6ROW_OWNER_MODULE structure that contains the IPv6 TCP endpoint entry used to obtain the owner module.
            </param>
            <returns>
            <para>
            A pointer to a buffer that contains a TCPIP_OWNER_MODULE_BASIC_INFO structure with the owner module data. The type of data
            returned in this buffer is indicated by the value of the Class parameter.
            </para>
            <para>The following structures are used for the data in Buffer when Class is set to the corresponding value.</para>
            <list type="table">
            <listheader>
            <term>Class enumeration value</term>
            <term>Buffer data format</term>
            </listheader>
            <item>
            <term>TCPIP_OWNER_MODULE_BASIC_INFO</term>
            <term>TCPIP_OWNER_MODULE_BASIC_INFO</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetOwnerModuleFromTcpEntry(Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_MODULE@,Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_INFO_CLASS,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>GetOwnerModuleFromTcpEntry</c> function retrieves data about the module that issued the context bind for a specific IPv4
            TCP endpoint in a MIB table row.
            </summary>
            <param name="pTcpEntry">
            A pointer to a MIB_TCPROW_OWNER_MODULE structure that contains the IPv4 TCP endpoint entry used to obtain the owner module.
            </param>
            <param name="Class">
            <para>
            A TCPIP_OWNER_MODULE_INFO_CLASS enumeration value that indicates the type of data to obtain regarding the owner module. The
            <c>TCPIP_OWNER_MODULE_INFO_CLASS</c> enumeration is defined in the Iprtrmib.h header file.
            </para>
            <para>This parameter must be set to <c>TCPIP_OWNER_MODULE_INFO_BASIC</c>.</para>
            </param>
            <param name="pBuffer">
            <para>
            A pointer a buffer that contains a TCPIP_OWNER_MODULE_BASIC_INFO structure with the owner module data. The type of data returned
            in this buffer is indicated by the value of the Class parameter.
            </para>
            <para>The following structures are used for the data in Buffer when Class is set to the corresponding value.</para>
            <list type="table">
            <listheader>
            <term>Class enumeration value</term>
            <term>Buffer data format</term>
            </listheader>
            <item>
            <term>TCPIP_OWNER_MODULE_BASIC_INFO</term>
            <term>TCPIP_OWNER_MODULE_BASIC_INFO</term>
            </item>
            </list>
            </param>
            <param name="pdwSize">
            The estimated size, in bytes, of the structure returned in Buffer. If this value is set too small,
            <c>ERROR_INSUFFICIENT_BUFFER</c> is returned by this function, and this field will contain the correct size of the buffer. The
            size required is the size of the corresponding structure plus an additional number of bytes equal to the length of data pointed
            to in the structure (for example, the name and path strings).
            </param>
            <returns>
            <para>If the function call is successful, the value <c>NO_ERROR</c> is returned.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            Insufficient space was allocated for the table. The size of the table is returned in the pdwSize parameter, and must be used in a
            subsequent call to this function in order to successfully retrieve the table.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            A parameter is incorrect. This value is returned if either of the pTcpEntry or pdwSize parameters are NULL. This value is also
            returned if the Class parameter is not equal to TCPIP_OWNER_MODULE_INFO_BASIC.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Not enough memory is available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            A element was no found. This value is returned if the dwOwningPid member of the MIB_TCPROW_OWNER_MODULE structure pointed to by
            the pTcpEntry parameter was zero or could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_PARTIAL_COPY</term>
            <term>Only part of a request was completed.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The Buffer parameter contains not only a structure with pointers to specific data, for example, pointers to the zero-terminated
            strings that contain the name and path of the owner module, but the actual data itself; that is the name and path strings.
            Therefore, when calculating the buffer size, ensure that you have enough space for both the structure as well as the data the
            members of the structure point to.
            </para>
            <para>
            The resolution of TCP table entries to owner modules is a best practice. In a few cases, the owner module name returned in the
            TCPIP_OWNER_MODULE_BASIC_INFO structure can be a process name, such as "svchost.exe", a service name (such as "RPC"), or a
            component name, such as "timer.dll".
            </para>
            <para>
            For computers running on Windows Vista or later, the <c>pModuleName</c> and <c>pModulePath</c> members of the
            TCPIP_OWNER_MODULE_BASIC_INFO retrieved by <c>GetOwnerModuleFromTcpEntry</c> function may point to an empty string for some TCP
            connections. Applications that start TCP connections located in the Windows system folder (C:\Windows\System32, by default) are
            considered protected. If the <c>GetOwnerModuleFromTcpEntry</c> function is called by a user that is not a member of the
            Administrators group, the function call will succeed but the <c>pModuleName</c> and <c>pModulePath</c> members will point to
            memory that contains an empty string for the TCP connections started by protected applications.
            </para>
            <para>
            For computers running on Windows Vista or later, accessing the <c>pModuleName</c> and <c>pModulePath</c> members of the
            TCPIP_OWNER_MODULE_BASIC_INFO structure is limited by user account control (UAC). If an application that calls this function is
            executed by a user logged on as a member of the Administrators group other than the built-in Administrator, this call will
            succeed but access to these members returns an empty string unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application on Windows Vista or later lacks this manifest
            file, a user logged on as a member of the Administrators group other than the built-in Administrator must then be executing the
            application in an enhanced shell as the built-in Administrator (RunAs administrator) for access to the protected
            <c>pModuleName</c> and <c>pModulePath</c> members to be allowed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetOwnerModuleFromTcpEntry(Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_MODULE@)">
            <summary>
            The <c>GetOwnerModuleFromTcpEntry</c> function retrieves data about the module that issued the context bind for a specific IPv4
            TCP endpoint in a MIB table row.
            </summary>
            <param name="pTcpEntry">
            A pointer to a MIB_TCPROW_OWNER_MODULE structure that contains the IPv4 TCP endpoint entry used to obtain the owner module.
            </param>
            <returns>
            <para>If the function call is successful, the value <c>NO_ERROR</c> is returned.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            Insufficient space was allocated for the table. The size of the table is returned in the pdwSize parameter, and must be used in a
            subsequent call to this function in order to successfully retrieve the table.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            A parameter is incorrect. This value is returned if either of the pTcpEntry or pdwSize parameters are NULL. This value is also
            returned if the Class parameter is not equal to TCPIP_OWNER_MODULE_INFO_BASIC.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Not enough memory is available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            A element was no found. This value is returned if the dwOwningPid member of the MIB_TCPROW_OWNER_MODULE structure pointed to by
            the pTcpEntry parameter was zero or could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_PARTIAL_COPY</term>
            <term>Only part of a request was completed.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The Buffer parameter contains not only a structure with pointers to specific data, for example, pointers to the zero-terminated
            strings that contain the name and path of the owner module, but the actual data itself; that is the name and path strings.
            Therefore, when calculating the buffer size, ensure that you have enough space for both the structure as well as the data the
            members of the structure point to.
            </para>
            <para>
            The resolution of TCP table entries to owner modules is a best practice. In a few cases, the owner module name returned in the
            TCPIP_OWNER_MODULE_BASIC_INFO structure can be a process name, such as "svchost.exe", a service name (such as "RPC"), or a
            component name, such as "timer.dll".
            </para>
            <para>
            For computers running on Windows Vista or later, the <c>pModuleName</c> and <c>pModulePath</c> members of the
            TCPIP_OWNER_MODULE_BASIC_INFO retrieved by <c>GetOwnerModuleFromTcpEntry</c> function may point to an empty string for some TCP
            connections. Applications that start TCP connections located in the Windows system folder (C:\Windows\System32, by default) are
            considered protected. If the <c>GetOwnerModuleFromTcpEntry</c> function is called by a user that is not a member of the
            Administrators group, the function call will succeed but the <c>pModuleName</c> and <c>pModulePath</c> members will point to
            memory that contains an empty string for the TCP connections started by protected applications.
            </para>
            <para>
            For computers running on Windows Vista or later, accessing the <c>pModuleName</c> and <c>pModulePath</c> members of the
            TCPIP_OWNER_MODULE_BASIC_INFO structure is limited by user account control (UAC). If an application that calls this function is
            executed by a user logged on as a member of the Administrators group other than the built-in Administrator, this call will
            succeed but access to these members returns an empty string unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application on Windows Vista or later lacks this manifest
            file, a user logged on as a member of the Administrators group other than the built-in Administrator must then be executing the
            application in an enhanced shell as the built-in Administrator (RunAs administrator) for access to the protected
            <c>pModuleName</c> and <c>pModulePath</c> members to be allowed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetOwnerModuleFromUdp6Entry(Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW_OWNER_MODULE@,Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_INFO_CLASS,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>GetOwnerModuleFromUdp6Entry</c> function retrieves data about the module that issued the context bind for a specific IPv6
            UDP endpoint in a MIB table row.
            </summary>
            <param name="pUdpEntry">
            A pointer to a MIB_UDP6ROW_OWNER_MODULE structure that contains the IPv6 UDP endpoint entry used to obtain the owner module.
            </param>
            <param name="Class">
            TCPIP_OWNER_MODULE_INFO_CLASS enumeration value that indicates the type of data to obtain regarding the owner module.
            </param>
            <param name="pBuffer">
            <para>
            The buffer that contains a TCPIP_OWNER_MODULE_BASIC_INFO structure with the owner module data. The type of data returned in this
            buffer is indicated by the value of the Class parameter.
            </para>
            <para>The following structures are used for the data in Buffer when Class is set to the corresponding value.</para>
            <list type="table">
            <listheader>
            <term>Class enumeration value</term>
            <term>Buffer data format</term>
            </listheader>
            <item>
            <term>TCPIP_OWNER_MODULE_BASIC_INFO</term>
            <term>TCPIP_OWNER_MODULE_BASIC_INFO</term>
            </item>
            </list>
            </param>
            <param name="pdwSize">
            The estimated size, in bytes, of the structure returned in Buffer. If this value is set too small,
            <c>ERROR_INSUFFICIENT_BUFFER</c> is returned by this function, and this field will contain the correct size of the structure.
            </param>
            <returns>
            <para>If the call is successful, the value <c>NO_ERROR</c> is returned. Otherwise, the following error is returned.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            An insufficient amount of space was allocated for the table. The size of the table is returned in the pdwSize parameter, and must
            be used in a subsequent call to this function in order to successfully retrieve the table.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The Buffer parameter contains not only a structure with pointers to specific data, for example, pointers to the zero-terminated
            strings that contain the name and path of the owner module, but the actual data itself; that is the name and path strings.
            Therefore, when calculating the buffer size, ensure that you have enough space for both the structure as well as the data the
            members of the structure point to.
            </para>
            <para>
            The resolution of UDP table entries to owner modules is a best practice. In a few cases, the owner module name returned in the
            TCPIP_OWNER_MODULE_BASIC_INFO structure can be a process name, such as "svchost.exe", a service name, such as "RPC", or a
            component name, such as "timer.dll".
            </para>
            <para>
            For computers running on Windows Vista or later, accessing the <c>pModuleName</c> and <c>pModulePath</c> members of the
            TCPIP_OWNER_MODULE_BASIC_INFO structure is limited by user account control (UAC). If an application that calls this function is
            executed by a user logged on as a member of the Administrators group other than the built-in Administrator, this call will
            succeed but access to these members returns an empty string unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application on Windows Vista or later lacks this manifest
            file, a user logged on as a member of the Administrators group other than the built-in Administrator must then be executing the
            application in an enhanced shell as the built-in Administrator (RunAs administrator) for access to the protected
            <c>pModuleName</c> and <c>pModulePath</c> members to be allowed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetOwnerModuleFromUdp6Entry(Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW_OWNER_MODULE@)">
            <summary>
            The <c>GetOwnerModuleFromUdp6Entry</c> function retrieves data about the module that issued the context bind for a specific IPv6
            UDP endpoint in a MIB table row.
            </summary>
            <param name="pUdpEntry">
            A pointer to a MIB_UDP6ROW_OWNER_MODULE structure that contains the IPv6 UDP endpoint entry used to obtain the owner module.
            </param>
            <returns>The buffer that contains a TCPIP_OWNER_MODULE_BASIC_INFO structure with the owner module data.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetOwnerModuleFromUdpEntry(Vanara.PInvoke.IpHlpApi.MIB_UDPROW_OWNER_MODULE@,Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_INFO_CLASS,System.IntPtr,System.UInt32@)">
            <summary>
            The <c>GetOwnerModuleFromUdpEntry</c> function retrieves data about the module that issued the context bind for a specific IPv4
            UDP endpoint in a MIB table row.
            </summary>
            <param name="pUdpEntry">
            A pointer to a MIB_UDPROW_OWNER_MODULE structure that contains the IPv4 UDP endpoint entry used to obtain the owner module.
            </param>
            <param name="Class">
            A TCPIP_OWNER_MODULE_INFO_CLASS enumeration value that indicates the type of data to obtain regarding the owner module.
            </param>
            <param name="pBuffer">
            <para>
            The buffer that contains a TCPIP_OWNER_MODULE_BASIC_INFO structure with the owner module data. The type of data returned in this
            buffer is indicated by the value of the Class parameter.
            </para>
            <para>The following structures are used for the data in Buffer when Class is set to the corresponding value.</para>
            <list type="table">
            <listheader>
            <term>Class enumeration value</term>
            <term>Buffer data format</term>
            </listheader>
            <item>
            <term>TCPIP_OWNER_MODULE_BASIC_INFO</term>
            <term>TCPIP_OWNER_MODULE_BASIC_INFO</term>
            </item>
            </list>
            </param>
            <param name="pdwSize">
            The estimated size, in bytes, of the structure returned in Buffer. If this value is set too small,
            <c>ERROR_INSUFFICIENT_BUFFER</c> is returned by this function, and this field will contain the correct structure size.
            </param>
            <returns>
            <para>If the call is successful, the value <c>NO_ERROR</c> is returned. Otherwise, the following error is returned.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            Insufficient space was allocated for the table. The size of the table is returned in the pdwSize parameter, and must be used in a
            subsequent call to this function in order to successfully retrieve the table.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The Buffer parameter contains not only a structure with pointers to specific data, for example, pointers to the zero-terminated
            strings that contain the name and path of the owner module, but also the actual data itself; that is the name and path strings.
            Therefore, when calculating the buffer size, ensure that you have enough space for both the structure as well as the data the
            members of the structure point to.
            </para>
            <para>
            The resolution of UDP table entries to owner modules is a best practice. In a few cases, the owner module name returned in the
            TCPIP_OWNER_MODULE_BASIC_INFO structure can be a process name, such as "svchost.exe", a service name, such as "RPC", or a
            component name, such as "timer.dll".
            </para>
            <para>
            For computers running on Windows Vista or later, accessing the <c>pModuleName</c> and <c>pModulePath</c> members of the
            TCPIP_OWNER_MODULE_BASIC_INFO structure is limited by user account control (UAC). If an application that calls this function is
            executed by a user logged on as a member of the Administrators group other than the built-in Administrator, this call will
            succeed but access to these members returns an empty string unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application on Windows Vista or later lacks this manifest
            file, a user logged on as a member of the Administrators group other than the built-in Administrator must then be executing the
            application in an enhanced shell as the built-in Administrator (RunAs administrator) for access to the protected
            <c>pModuleName</c> and <c>pModulePath</c> members to be allowed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetOwnerModuleFromUdpEntry(Vanara.PInvoke.IpHlpApi.MIB_UDPROW_OWNER_MODULE@)">
            <summary>
            The <c>GetOwnerModuleFromUdpEntry</c> function retrieves data about the module that issued the context bind for a specific IPv4
            UDP endpoint in a MIB table row.
            </summary>
            <param name="pUdpEntry">
            A pointer to a MIB_UDPROW_OWNER_MODULE structure that contains the IPv4 UDP endpoint entry used to obtain the owner module.
            </param>
            <returns>A TCPIP_OWNER_MODULE_BASIC_INFO structure with the owner module data.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetPerAdapterInfo(System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>
            <para>The <c>GetPerAdapterInfo</c> function retrieves information about the adapter corresponding to the specified interface.</para>
            </summary>
            <param name="IfIndex">
            <para>
            Index of an interface. The <c>GetPerAdapterInfo</c> function retrieves information for the adapter corresponding to this interface.
            </para>
            </param>
            <param name="pPerAdapterInfo">
            <para>Pointer to an IP_PER_ADAPTER_INFO structure that receives information about the adapter.</para>
            </param>
            <param name="pOutBufLen">
            <para>
            Pointer to a <c>ULONG</c> variable that specifies the size of the IP_PER_ADAPTER_INFO structure. If this size is insufficient to
            hold the information, <c>GetPerAdapterInfo</c> fills in this variable with the required size, and returns an error code of ERROR_BUFFER_OVERFLOW.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_BUFFER_OVERFLOW</term>
            <term>
            The buffer size indicated by the pOutBufLen parameter is too small to hold the adapter information. The pOutBufLen parameter
            points to the required size.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            The pOutBufLen parameter is NULL, or the calling process does not have read/write access to the memory pointed to by pOutBufLen,
            or the calling process does not have write access to the memory pointed to by the pAdapterInfo parameter.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>GetPerAdapterInfo is not supported by the operating system running on the local computer.</term>
            </item>
            <item>
            <term>Other</term>
            <term>If the function fails, use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            An adapter index may change when the adapter is disabled and then enabled, or under other circumstances, and should not be
            considered persistent.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetPerAdapterInfo(System.UInt32)">
            <summary>The GetPerAdapterInfo function retrieves information about the adapter corresponding to the specified interface.</summary>
            <param name="IfIndex">
            Index of an interface. The GetPerAdapterInfo function retrieves information for the adapter corresponding to this interface.
            </param>
            <returns>A PIP_PER_ADAPTER_INFO structure that receives information about the adapter.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetPerTcp6ConnectionEStats(Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW@,Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>The <c>GetPerTcp6ConnectionEStats</c> function retrieves extended statistics for an IPv6 TCP connection.</summary>
            <param name="Row">A pointer to a MIB_TCP6ROW structure for an IPv6 TCP connection.</param>
            <param name="EstatsType">
            <para>
            The type of extended statistics for TCP requested. This parameter determines the data and format of information that is returned
            in the Rw, Rod, and Ros parameters if the call is successful.
            </para>
            <para>This parameter can be one of the values from the TCP_ESTATS_TYPE enumeration type defined in the Tcpestats.h header file.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TcpConnectionEstatsSynOpts</term>
            <term>
            This value requests SYN exchange information for a TCP connection. Only read-only static information is available for this
            enumeration value. If the Ros parameter was not NULL and the function succeeds, the buffer pointed to by the Ros parameter should
            contain a TCP_ESTATS_SYN_OPTS_ROS_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsData</term>
            <term>
            This value requests extended data transfer information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_DATA_RW_v0 structure. If extended data transfer information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_DATA_ROD_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsSndCong</term>
            <term>
            This value requests sender congestion for a TCP connection. All three types of information (read-only static, read-only dynamic,
            and read/write information) are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds,
            the buffer pointed to by the Rw parameter should contain a TCP_ESTATS_SND_CONG_RW_v0 structure. If the Ros parameter was not NULL
            and the function succeeds, the buffer pointed to by the Ros parameter should contain a TCP_ESTATS_SND_CONG_ROS_v0 structure. If
            sender congestion information was enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the
            buffer pointed to by the Rod parameter should contain a TCP_ESTATS_SND_CONG_ROD_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsPath</term>
            <term>
            This value requests extended path measurement information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_PATH_RW_v0 structure. If extended path measurement information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_PATH_ROD_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsSendBuff</term>
            <term>
            This value requests extended output-queuing information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_SEND_BUFF_RW_v0 structure. If extended output-queuing information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_SEND_BUFF_ROD_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsRec</term>
            <term>
            This value requests extended local-receiver information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_REC_RW_v0 structure. If extended local-receiver information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_REC_ROD_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsObsRec</term>
            <term>
            This value requests extended remote-receiver information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_OBS_REC_RW_v0 structure. If extended remote-receiver information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_OBS_REC_ROD_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsBandwidth</term>
            <term>
            This value requests bandwidth estimation statistics for a TCP connection on bandwidth. Only read-only dynamic information and
            read/write information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the
            buffer pointed to by the Rw parameter should contain a TCP_ESTATS_BANDWIDTH_RW_v0 structure. If bandwidth estimation statistics
            was enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_BANDWIDTH_ROD_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsFineRtt</term>
            <term>
            This value requests fine-grained round-trip time (RTT) estimation statistics for a TCP connection. Only read-only dynamic
            information and read/write information are available for this enumeration value. If the Rw parameter was not NULL and the
            function succeeds, the buffer pointed to by the Rw parameter should contain a TCP_ESTATS_FINE_RTT_RW_v0 structure. If
            fine-grained RTT estimation statistics was enabled for this TCP connection, the Rod parameter was not NULL, and the function
            succeeds, the buffer pointed to by the Rod parameter should contain a TCP_ESTATS_FINE_RTT_ROD_v0 structure.
            </term>
            </item>
            </list>
            </param>
            <param name="Rw">
            A pointer to a buffer to receive the read/write information. This parameter may be a <c>NULL</c> pointer if an application does
            not want to retrieve read/write information for the TCP connection.
            </param>
            <param name="RwVersion">The version of the read/write information requested. The current supported value is a version of zero.</param>
            <param name="RwSize">The size, in bytes, of the buffer pointed to by Rw parameter.</param>
            <param name="Ros">
            A pointer to a buffer to receive read-only static information. This parameter may be a <c>NULL</c> pointer if an application does
            not want to retrieve read-only static information for the TCP connection.
            </param>
            <param name="RosVersion">
            The version of the read-only static information requested. The current supported value is a version of zero.
            </param>
            <param name="RosSize">The size, in bytes, of the buffer pointed to by the Ros parameter.</param>
            <param name="Rod">
            A pointer to a buffer to receive read-only dynamic information. This parameter may be a <c>NULL</c> pointer if an application
            does not want to retrieve read-only dynamic information for the TCP connection.
            </param>
            <param name="RodVersion">
            The version of the read-only dynamic information requested. The current supported value is a version of zero..
            </param>
            <param name="RodSize">The size, in bytes, of the buffer pointed to by the Rod parameter.</param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            A buffer passed to a function is too small. This error is returned if the buffer pointed to by the Rw, Ros, or Rod parameters is
            not large enough to receive the data. This error also returned if one of the given buffers pointed to by the Rw, Ros, or Rod
            parameters is NULL, but a length was specified in the associated RwSize, RosSize, or RodSize. This error value is returned on
            Windows Vista and Windows Server 2008.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The parameter is incorrect. This error is returned if the Row parameter is a NULL pointer.</term>
            </item>
            <item>
            <term>ERROR_INVALID_USER_BUFFER</term>
            <term>
            The supplied user buffer is not valid for the requested operation. This error is returned if one of the given buffers pointed to
            by the Rw, Ros, or Rod parameters is NULL, but a length was specified in the associated RwSize, RosSize, or RodSize. As a result,
            this error is returned if any of the following conditions are met: This error value is returned on Windows 7 and Windows Server
            2008 R2.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            This requested entry was not found. This error is returned if the TCP connection specified in the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if the RwVersion, RosVersion, or RodVersion parameter is not set to zero.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetPerTcp6ConnectionEStats</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetPerTcp6ConnectionEStats</c> function is designed to use TCP to diagnose performance problems in both the network and
            the application. If a network based application is performing poorly, TCP can determine if the bottleneck is in the sender, the
            receiver or the network itself. If the bottleneck is in the network, TCP can provide specific information about its nature.
            </para>
            <para>
            The <c>GetPerTcp6ConnectionEStats</c> function retrieves extended statistics for the IPv6 TCP connection passed in the Row
            parameter. The type of extended statistics that is retrieved is specified in the EstatsType parameter. Extended statistics on
            this TCP connection must have previously been enabled by calls to the SetPerTcp6ConnectionEStats function for all TCP_ESTATS_TYPE
            values except when <c>TcpConnectionEstatsSynOpts</c> is passed in the EstatsType parameter.
            </para>
            <para>
            The GetTcp6Table function is used to retrieve the IPv6 TCP connection table on the local computer. This function returns a
            MIB_TCP6TABLE structure that contain an array of MIB_TCP6ROW entries. The Row parameter passed to the
            <c>GetPerTcp6ConnectionEStats</c> function must be an entry for an existing IPv6 TCP connection.
            </para>
            <para>
            The only version of TCP connection statistics currently supported is version zero. So the RwVersion, RosVersion, and RodVersion
            parameters passed to <c>GetPerTcp6ConnectionEStats</c> should be set to 0.
            </para>
            <para>
            For information on extended TCP statistics on an IPv4 connection, see the GetPerTcpConnectionEStats and SetPerTcpConnectionEStats functions.
            </para>
            <para>
            The SetPerTcp6ConnectionEStats function can only be called by a user logged on as a member of the Administrators group. If
            <c>SetPerTcp6ConnectionEStats</c> is called by a user that is not a member of the Administrators group, the function call will
            fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on Windows
            Vista and later. If an application that contains this function is executed by a user logged on as a member of the Administrators
            group other than the built-in Administrator, this call will fail unless the application has been marked in the manifest file with
            a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>
            An application that uses the <c>GetPerTcp6ConnectionEStats</c> function to retrieve extended statistics for an IPv6 TCP
            connection must check that the previous call to the SetPerTcp6ConnectionEStats function to enabled extended statistics returned
            with success. If the <c>SetPerTcp6ConnectionEStats</c> function to enable extended statistics failed, subsequent calls to the
            <c>GetPerTcp6ConnectionEStats</c> will still return numbers in the returned structures. However the returned numbers are
            meaningless random data and don't represent extended TCP statistics. This behavior can be observed by running the example below
            as both an administrator and a normal user.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves the TCP extended statistics for an IPv4 and IPv6 TCP connection and prints values from the
            returned data.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetPerTcp6ConnectionEStats(Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW@,Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE,System.Object@,System.Object@,System.Object@)">
            <summary>
            The <c>GetPerTcp6ConnectionEStats</c> function retrieves extended statistics for an IPv6 TCP connection.
            </summary>
            <param name="Row">A pointer to a MIB_TCP6ROW structure for an IPv6 TCP connection.</param>
            <param name="EstatsType"><para>
            The type of extended statistics for TCP requested. This parameter determines the data and format of information that is returned
            in the Rw, Rod, and Ros parameters if the call is successful.
            </para>
            <para>This parameter can be one of the values from the TCP_ESTATS_TYPE enumeration type defined in the Tcpestats.h header file.</para>
            <list type="table">
              <listheader>
                <term>Value</term>
                <term>Meaning</term>
              </listheader>
              <item>
                <term>TcpConnectionEstatsSynOpts</term>
                <term>
            This value requests SYN exchange information for a TCP connection. Only read-only static information is available for this
            enumeration value. If the Ros parameter was not NULL and the function succeeds, the buffer pointed to by the Ros parameter should
            contain a TCP_ESTATS_SYN_OPTS_ROS_v0 structure.
            </term>
              </item>
              <item>
                <term>TcpConnectionEstatsData</term>
                <term>
            This value requests extended data transfer information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_DATA_RW_v0 structure. If extended data transfer information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_DATA_ROD_v0 structure.
            </term>
              </item>
              <item>
                <term>TcpConnectionEstatsSndCong</term>
                <term>
            This value requests sender congestion for a TCP connection. All three types of information (read-only static, read-only dynamic,
            and read/write information) are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds,
            the buffer pointed to by the Rw parameter should contain a TCP_ESTATS_SND_CONG_RW_v0 structure. If the Ros parameter was not NULL
            and the function succeeds, the buffer pointed to by the Ros parameter should contain a TCP_ESTATS_SND_CONG_ROS_v0 structure. If
            sender congestion information was enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the
            buffer pointed to by the Rod parameter should contain a TCP_ESTATS_SND_CONG_ROD_v0 structure.
            </term>
              </item>
              <item>
                <term>TcpConnectionEstatsPath</term>
                <term>
            This value requests extended path measurement information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_PATH_RW_v0 structure. If extended path measurement information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_PATH_ROD_v0 structure.
            </term>
              </item>
              <item>
                <term>TcpConnectionEstatsSendBuff</term>
                <term>
            This value requests extended output-queuing information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_SEND_BUFF_RW_v0 structure. If extended output-queuing information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_SEND_BUFF_ROD_v0 structure.
            </term>
              </item>
              <item>
                <term>TcpConnectionEstatsRec</term>
                <term>
            This value requests extended local-receiver information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_REC_RW_v0 structure. If extended local-receiver information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_REC_ROD_v0 structure.
            </term>
              </item>
              <item>
                <term>TcpConnectionEstatsObsRec</term>
                <term>
            This value requests extended remote-receiver information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_OBS_REC_RW_v0 structure. If extended remote-receiver information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_OBS_REC_ROD_v0 structure.
            </term>
              </item>
              <item>
                <term>TcpConnectionEstatsBandwidth</term>
                <term>
            This value requests bandwidth estimation statistics for a TCP connection on bandwidth. Only read-only dynamic information and
            read/write information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the
            buffer pointed to by the Rw parameter should contain a TCP_ESTATS_BANDWIDTH_RW_v0 structure. If bandwidth estimation statistics
            was enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_BANDWIDTH_ROD_v0 structure.
            </term>
              </item>
              <item>
                <term>TcpConnectionEstatsFineRtt</term>
                <term>
            This value requests fine-grained round-trip time (RTT) estimation statistics for a TCP connection. Only read-only dynamic
            information and read/write information are available for this enumeration value. If the Rw parameter was not NULL and the
            function succeeds, the buffer pointed to by the Rw parameter should contain a TCP_ESTATS_FINE_RTT_RW_v0 structure. If
            fine-grained RTT estimation statistics was enabled for this TCP connection, the Rod parameter was not NULL, and the function
            succeeds, the buffer pointed to by the Rod parameter should contain a TCP_ESTATS_FINE_RTT_ROD_v0 structure.
            </term>
              </item>
            </list></param>
            <param name="Rw">A pointer to a buffer to receive the read/write information. This parameter may be a <c>NULL</c> pointer if an application does
            not want to retrieve read/write information for the TCP connection.</param>
            <param name="Ros">A pointer to a buffer to receive read-only static information. This parameter may be a <c>NULL</c> pointer if an application does
            not want to retrieve read-only static information for the TCP connection.</param>
            <param name="Rod">A pointer to a buffer to receive read-only dynamic information. This parameter may be a <c>NULL</c> pointer if an application
            does not want to retrieve read-only dynamic information for the TCP connection.</param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
              <listheader>
                <term>Return code</term>
                <term>Description</term>
              </listheader>
              <item>
                <term>ERROR_INSUFFICIENT_BUFFER</term>
                <term>
            A buffer passed to a function is too small. This error is returned if the buffer pointed to by the Rw, Ros, or Rod parameters is
            not large enough to receive the data. This error also returned if one of the given buffers pointed to by the Rw, Ros, or Rod
            parameters is NULL, but a length was specified in the associated RwSize, RosSize, or RodSize. This error value is returned on
            Windows Vista and Windows Server 2008.
            </term>
              </item>
              <item>
                <term>ERROR_INVALID_PARAMETER</term>
                <term>The parameter is incorrect. This error is returned if the Row parameter is a NULL pointer.</term>
              </item>
              <item>
                <term>ERROR_INVALID_USER_BUFFER</term>
                <term>
            The supplied user buffer is not valid for the requested operation. This error is returned if one of the given buffers pointed to
            by the Rw, Ros, or Rod parameters is NULL, but a length was specified in the associated RwSize, RosSize, or RodSize. As a result,
            this error is returned if any of the following conditions are met: This error value is returned on Windows 7 and Windows Server
            2008 R2.
            </term>
              </item>
              <item>
                <term>ERROR_NOT_FOUND</term>
                <term>
            This requested entry was not found. This error is returned if the TCP connection specified in the Row parameter could not be found.
            </term>
              </item>
              <item>
                <term>ERROR_NOT_SUPPORTED</term>
                <term>
            The request is not supported. This error is returned if the RwVersion, RosVersion, or RodVersion parameter is not set to zero.
            </term>
              </item>
              <item>
                <term>Other</term>
                <term>Use FormatMessage to obtain the message string for the returned error.</term>
              </item>
            </list></returns>
            <remarks>
            <para>The <c>GetPerTcp6ConnectionEStats</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetPerTcp6ConnectionEStats</c> function is designed to use TCP to diagnose performance problems in both the network and
            the application. If a network based application is performing poorly, TCP can determine if the bottleneck is in the sender, the
            receiver or the network itself. If the bottleneck is in the network, TCP can provide specific information about its nature.
            </para>
            <para>
            The <c>GetPerTcp6ConnectionEStats</c> function retrieves extended statistics for the IPv6 TCP connection passed in the Row
            parameter. The type of extended statistics that is retrieved is specified in the EstatsType parameter. Extended statistics on
            this TCP connection must have previously been enabled by calls to the SetPerTcp6ConnectionEStats function for all TCP_ESTATS_TYPE
            values except when <c>TcpConnectionEstatsSynOpts</c> is passed in the EstatsType parameter.
            </para>
            <para>
            The GetTcp6Table function is used to retrieve the IPv6 TCP connection table on the local computer. This function returns a
            MIB_TCP6TABLE structure that contain an array of MIB_TCP6ROW entries. The Row parameter passed to the
            <c>GetPerTcp6ConnectionEStats</c> function must be an entry for an existing IPv6 TCP connection.
            </para>
            <para>
            The only version of TCP connection statistics currently supported is version zero. So the RwVersion, RosVersion, and RodVersion
            parameters passed to <c>GetPerTcp6ConnectionEStats</c> should be set to 0.
            </para>
            <para>
            For information on extended TCP statistics on an IPv4 connection, see the GetPerTcpConnectionEStats and SetPerTcpConnectionEStats functions.
            </para>
            <para>
            The SetPerTcp6ConnectionEStats function can only be called by a user logged on as a member of the Administrators group. If
            <c>SetPerTcp6ConnectionEStats</c> is called by a user that is not a member of the Administrators group, the function call will
            fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on Windows
            Vista and later. If an application that contains this function is executed by a user logged on as a member of the Administrators
            group other than the built-in Administrator, this call will fail unless the application has been marked in the manifest file with
            a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>
            An application that uses the <c>GetPerTcp6ConnectionEStats</c> function to retrieve extended statistics for an IPv6 TCP
            connection must check that the previous call to the SetPerTcp6ConnectionEStats function to enabled extended statistics returned
            with success. If the <c>SetPerTcp6ConnectionEStats</c> function to enable extended statistics failed, subsequent calls to the
            <c>GetPerTcp6ConnectionEStats</c> will still return numbers in the returned structures. However the returned numbers are
            meaningless random data and don't represent extended TCP statistics. This behavior can be observed by running the example below
            as both an administrator and a normal user.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetPerTcpConnectionEStats(Vanara.PInvoke.IpHlpApi.MIB_TCPROW@,Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>The <c>GetPerTcpConnectionEStats</c> function retrieves extended statistics for an IPv4 TCP connection.</summary>
            <param name="Row">A pointer to a MIB_TCPROW structure for an IPv4 TCP connection.</param>
            <param name="EstatsType">
            <para>
            The type of extended statistics for TCP requested. This parameter determines the data and format of information that is returned
            in the Rw, Rod, and Ros parameters if the call is successful.
            </para>
            <para>This parameter can be one of the values from the TCP_ESTATS_TYPE enumeration type defined in the Tcpestats.h header file.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TcpConnectionEstatsSynOpts</term>
            <term>
            This value requests SYN exchange information for a TCP connection. Only read-only static information is available for this
            enumeration value. If the Ros parameter was not NULL and the function succeeds, the buffer pointed to by the Ros parameter should
            contain a TCP_ESTATS_SYN_OPTS_ROS_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsData</term>
            <term>
            This value requests extended data transfer information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_DATA_RW_v0 structure. If extended data transfer information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_DATA_ROD_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsSndCong</term>
            <term>
            This value requests sender congestion for a TCP connection. All three types of information (read-only static, read-only dynamic,
            and read/write information) are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds,
            the buffer pointed to by the Rw parameter should contain a TCP_ESTATS_SND_CONG_RW_v0 structure. If the Ros parameter was not NULL
            and the function succeeds, the buffer pointed to by the Ros parameter should contain a TCP_ESTATS_SND_CONG_ROS_v0 structure. If
            sender congestion information was enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the
            buffer pointed to by the Rod parameter should contain a TCP_ESTATS_SND_CONG_ROD_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsPath</term>
            <term>
            This value requests extended path measurement information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_PATH_RW_v0 structure. If extended path measurement information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_PATH_ROD_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsSendBuff</term>
            <term>
            This value requests extended output-queuing information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_SEND_BUFF_RW_v0 structure. If extended output-queuing information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_SEND_BUFF_ROD_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsRec</term>
            <term>
            This value requests extended local-receiver information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_REC_RW_v0 structure. If extended local-receiver information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_REC_ROD_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsObsRec</term>
            <term>
            This value requests extended remote-receiver information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_OBS_REC_RW_v0 structure. If extended remote-receiver information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_OBS_REC_ROD_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsBandwidth</term>
            <term>
            This value requests bandwidth estimation statistics for a TCP connection on bandwidth. Only read-only dynamic information and
            read/write information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the
            buffer pointed to by the Rw parameter should contain a TCP_ESTATS_BANDWIDTH_RW_v0 structure. If bandwidth estimation statistics
            was enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_BANDWIDTH_ROD_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsFineRtt</term>
            <term>
            This value requests fine-grained round-trip time (RTT) estimation statistics for a TCP connection. Only read-only dynamic
            information and read/write information are available for this enumeration value. If the Rw parameter was not NULL and the
            function succeeds, the buffer pointed to by the Rw parameter should contain a TCP_ESTATS_FINE_RTT_RW_v0 structure. If
            fine-grained RTT estimation statistics was enabled for this TCP connection, the Rod parameter was not NULL, and the function
            succeeds, the buffer pointed to by the Rod parameter should contain a TCP_ESTATS_FINE_RTT_ROD_v0 structure.
            </term>
            </item>
            </list>
            </param>
            <param name="Rw">
            A pointer to a buffer to receive the read/write information. This parameter may be a <c>NULL</c> pointer if an application does
            not want to retrieve read/write information for the TCP connection.
            </param>
            <param name="RwVersion">The version of the read/write information requested. The current supported value is a version of zero.</param>
            <param name="RwSize">The size, in bytes, of the buffer pointed to by Rw parameter.</param>
            <param name="Ros">
            A pointer to a buffer to receive read-only static information. This parameter may be a <c>NULL</c> pointer if an application does
            not want to retrieve read-only static information for the TCP connection.
            </param>
            <param name="RosVersion">
            The version of the read-only static information requested. The current supported value is a version of zero.
            </param>
            <param name="RosSize">The size, in bytes, of the buffer pointed to by the Ros parameter.</param>
            <param name="Rod">
            A pointer to a buffer to receive read-only dynamic information. This parameter may be a <c>NULL</c> pointer if an application
            does not want to retrieve read-only dynamic information for the TCP connection.
            </param>
            <param name="RodVersion">
            The version of the read-only dynamic information requested. The current supported value is a version of zero.
            </param>
            <param name="RodSize">The size, in bytes, of the buffer pointed to by the Rod parameter.</param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            A buffer passed to a function is too small. This error is returned if the buffer pointed to by the Rw, Ros, or Rod parameters is
            not large enough to receive the data. This error also returned if one of the given buffers pointed to by the Rw, Ros, or Rod
            parameters is NULL, but a length was specified in the associated RwSize, RosSize, or RodSize. This error value is returned on
            Windows Vista and Windows Server 2008.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The parameter is incorrect. This error is returned if the Row parameter is a NULL pointer.</term>
            </item>
            <item>
            <term>ERROR_INVALID_USER_BUFFER</term>
            <term>
            The supplied user buffer is not valid for the requested operation. This error is returned if one of the given buffers pointed to
            by the Rw, Ros, or Rod parameters is NULL, but a length was specified in the associated RwSize, RosSize, or RodSize. As a result,
            this error is returned if any of the following conditions are met: This error value is returned on Windows 7 and Windows Server
            2008 R2.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            This requested entry was not found. This error is returned if the TCP connection specified in the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if the RwVersion, RosVersion, or RodVersion parameter is not set to zero.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetPerTcpConnectionEStats</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetPerTcpConnectionEStats</c> function is designed to use TCP to diagnose performance problems in both the network and the
            application. If a network based application is performing poorly, TCP can determine if the bottleneck is in the sender, the
            receiver or the network itself. If the bottleneck is in the network, TCP can provide specific information about its nature.
            </para>
            <para>
            The <c>GetPerTcpConnectionEStats</c> function retrieves extended statistics for the IPv4 TCP connection passed in the Row
            parameter. The type of extended statistics that is retrieved is specified in the EstatsType parameter. Extended statistics on
            this TCP connection must have previously been enabled by calls to the SetPerTcpConnectionEStats function for all TCP_ESTATS_TYPE
            values except when <c>TcpConnectionEstatsSynOpts</c> is passed in the EstatsType parameter.
            </para>
            <para>
            The GetTcpTable function is used to retrieve the IPv4 TCP connection table on the local computer. This function returns a
            MIB_TCPTABLE structure that contain an array of MIB_TCPROW entries. The Row parameter passed to the
            <c>GetPerTcpConnectionEStats</c> function must be an entry for an existing IPv4 TCP connection.
            </para>
            <para>
            The only version of TCP connection statistics currently supported is version zero. So the RwVersion, RosVersion, and RodVersion
            parameters passed to <c>GetPerTcpConnectionEStats</c> should be set to 0.
            </para>
            <para>
            For information on extended TCP statistics on an IPv6 connection, see the GetPerTcp6ConnectionEStats and
            SetPerTcp6ConnectionEStats functions.
            </para>
            <para>
            The SetPerTcpConnectionEStats function can only be called by a user logged on as a member of the Administrators group. If
            <c>SetPerTcpConnectionEStats</c> is called by a user that is not a member of the Administrators group, the function call will
            fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on Windows
            Vista and later. If an application that contains this function is executed by a user logged on as a member of the Administrators
            group other than the built-in Administrator, this call will fail unless the application has been marked in the manifest file with
            a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>
            An application that uses the <c>GetPerTcpConnectionEStats</c> function to retrieve extended statistics for an IPv4 TCP connection
            must check that the previous call to the SetPerTcpConnectionEStats function to enabled extended statistics returned with success.
            If the <c>SetPerTcpConnectionEStats</c> function to enable extended statistics failed, subsequent calls to the
            <c>GetPerTcpConnectionEStats</c> will still return numbers in the returned structures. However the returned numbers are
            meaningless random data and don't represent extended TCP statistics. This behavior can be observed by running the example below
            as both an administrator and a normal user.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves the TCP extended statistics for an IPv4 and IPv6 TCP connection and prints values from the
            returned data.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetPerTcpConnectionEStats(Vanara.PInvoke.IpHlpApi.MIB_TCPROW@,Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE,System.Object@,System.Object@,System.Object@)">
            <summary>
            The <c>GetPerTcp6ConnectionEStats</c> function retrieves extended statistics for an IPv6 TCP connection.
            </summary>
            <param name="Row">A pointer to a MIB_TCP6ROW structure for an IPv6 TCP connection.</param>
            <param name="EstatsType"><para>
            The type of extended statistics for TCP requested. This parameter determines the data and format of information that is returned
            in the Rw, Rod, and Ros parameters if the call is successful.
            </para>
            <para>This parameter can be one of the values from the TCP_ESTATS_TYPE enumeration type defined in the Tcpestats.h header file.</para>
            <list type="table">
              <listheader>
                <term>Value</term>
                <term>Meaning</term>
              </listheader>
              <item>
                <term>TcpConnectionEstatsSynOpts</term>
                <term>
            This value requests SYN exchange information for a TCP connection. Only read-only static information is available for this
            enumeration value. If the Ros parameter was not NULL and the function succeeds, the buffer pointed to by the Ros parameter should
            contain a TCP_ESTATS_SYN_OPTS_ROS_v0 structure.
            </term>
              </item>
              <item>
                <term>TcpConnectionEstatsData</term>
                <term>
            This value requests extended data transfer information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_DATA_RW_v0 structure. If extended data transfer information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_DATA_ROD_v0 structure.
            </term>
              </item>
              <item>
                <term>TcpConnectionEstatsSndCong</term>
                <term>
            This value requests sender congestion for a TCP connection. All three types of information (read-only static, read-only dynamic,
            and read/write information) are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds,
            the buffer pointed to by the Rw parameter should contain a TCP_ESTATS_SND_CONG_RW_v0 structure. If the Ros parameter was not NULL
            and the function succeeds, the buffer pointed to by the Ros parameter should contain a TCP_ESTATS_SND_CONG_ROS_v0 structure. If
            sender congestion information was enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the
            buffer pointed to by the Rod parameter should contain a TCP_ESTATS_SND_CONG_ROD_v0 structure.
            </term>
              </item>
              <item>
                <term>TcpConnectionEstatsPath</term>
                <term>
            This value requests extended path measurement information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_PATH_RW_v0 structure. If extended path measurement information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_PATH_ROD_v0 structure.
            </term>
              </item>
              <item>
                <term>TcpConnectionEstatsSendBuff</term>
                <term>
            This value requests extended output-queuing information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_SEND_BUFF_RW_v0 structure. If extended output-queuing information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_SEND_BUFF_ROD_v0 structure.
            </term>
              </item>
              <item>
                <term>TcpConnectionEstatsRec</term>
                <term>
            This value requests extended local-receiver information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_REC_RW_v0 structure. If extended local-receiver information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_REC_ROD_v0 structure.
            </term>
              </item>
              <item>
                <term>TcpConnectionEstatsObsRec</term>
                <term>
            This value requests extended remote-receiver information for a TCP connection. Only read-only dynamic information and read/write
            information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the buffer
            pointed to by the Rw parameter should contain a TCP_ESTATS_OBS_REC_RW_v0 structure. If extended remote-receiver information was
            enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_OBS_REC_ROD_v0 structure.
            </term>
              </item>
              <item>
                <term>TcpConnectionEstatsBandwidth</term>
                <term>
            This value requests bandwidth estimation statistics for a TCP connection on bandwidth. Only read-only dynamic information and
            read/write information are available for this enumeration value. If the Rw parameter was not NULL and the function succeeds, the
            buffer pointed to by the Rw parameter should contain a TCP_ESTATS_BANDWIDTH_RW_v0 structure. If bandwidth estimation statistics
            was enabled for this TCP connection, the Rod parameter was not NULL, and the function succeeds, the buffer pointed to by the Rod
            parameter should contain a TCP_ESTATS_BANDWIDTH_ROD_v0 structure.
            </term>
              </item>
              <item>
                <term>TcpConnectionEstatsFineRtt</term>
                <term>
            This value requests fine-grained round-trip time (RTT) estimation statistics for a TCP connection. Only read-only dynamic
            information and read/write information are available for this enumeration value. If the Rw parameter was not NULL and the
            function succeeds, the buffer pointed to by the Rw parameter should contain a TCP_ESTATS_FINE_RTT_RW_v0 structure. If
            fine-grained RTT estimation statistics was enabled for this TCP connection, the Rod parameter was not NULL, and the function
            succeeds, the buffer pointed to by the Rod parameter should contain a TCP_ESTATS_FINE_RTT_ROD_v0 structure.
            </term>
              </item>
            </list></param>
            <param name="Rw">A pointer to a buffer to receive the read/write information. This parameter may be a <c>NULL</c> pointer if an application does
            not want to retrieve read/write information for the TCP connection.</param>
            <param name="Ros">A pointer to a buffer to receive read-only static information. This parameter may be a <c>NULL</c> pointer if an application does
            not want to retrieve read-only static information for the TCP connection.</param>
            <param name="Rod">A pointer to a buffer to receive read-only dynamic information. This parameter may be a <c>NULL</c> pointer if an application
            does not want to retrieve read-only dynamic information for the TCP connection.</param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
              <listheader>
                <term>Return code</term>
                <term>Description</term>
              </listheader>
              <item>
                <term>ERROR_INSUFFICIENT_BUFFER</term>
                <term>
            A buffer passed to a function is too small. This error is returned if the buffer pointed to by the Rw, Ros, or Rod parameters is
            not large enough to receive the data. This error also returned if one of the given buffers pointed to by the Rw, Ros, or Rod
            parameters is NULL, but a length was specified in the associated RwSize, RosSize, or RodSize. This error value is returned on
            Windows Vista and Windows Server 2008.
            </term>
              </item>
              <item>
                <term>ERROR_INVALID_PARAMETER</term>
                <term>The parameter is incorrect. This error is returned if the Row parameter is a NULL pointer.</term>
              </item>
              <item>
                <term>ERROR_INVALID_USER_BUFFER</term>
                <term>
            The supplied user buffer is not valid for the requested operation. This error is returned if one of the given buffers pointed to
            by the Rw, Ros, or Rod parameters is NULL, but a length was specified in the associated RwSize, RosSize, or RodSize. As a result,
            this error is returned if any of the following conditions are met: This error value is returned on Windows 7 and Windows Server
            2008 R2.
            </term>
              </item>
              <item>
                <term>ERROR_NOT_FOUND</term>
                <term>
            This requested entry was not found. This error is returned if the TCP connection specified in the Row parameter could not be found.
            </term>
              </item>
              <item>
                <term>ERROR_NOT_SUPPORTED</term>
                <term>
            The request is not supported. This error is returned if the RwVersion, RosVersion, or RodVersion parameter is not set to zero.
            </term>
              </item>
              <item>
                <term>Other</term>
                <term>Use FormatMessage to obtain the message string for the returned error.</term>
              </item>
            </list></returns>
            <remarks>
            <para>The <c>GetPerTcp6ConnectionEStats</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetPerTcp6ConnectionEStats</c> function is designed to use TCP to diagnose performance problems in both the network and
            the application. If a network based application is performing poorly, TCP can determine if the bottleneck is in the sender, the
            receiver or the network itself. If the bottleneck is in the network, TCP can provide specific information about its nature.
            </para>
            <para>
            The <c>GetPerTcp6ConnectionEStats</c> function retrieves extended statistics for the IPv6 TCP connection passed in the Row
            parameter. The type of extended statistics that is retrieved is specified in the EstatsType parameter. Extended statistics on
            this TCP connection must have previously been enabled by calls to the SetPerTcp6ConnectionEStats function for all TCP_ESTATS_TYPE
            values except when <c>TcpConnectionEstatsSynOpts</c> is passed in the EstatsType parameter.
            </para>
            <para>
            The GetTcp6Table function is used to retrieve the IPv6 TCP connection table on the local computer. This function returns a
            MIB_TCP6TABLE structure that contain an array of MIB_TCP6ROW entries. The Row parameter passed to the
            <c>GetPerTcp6ConnectionEStats</c> function must be an entry for an existing IPv6 TCP connection.
            </para>
            <para>
            The only version of TCP connection statistics currently supported is version zero. So the RwVersion, RosVersion, and RodVersion
            parameters passed to <c>GetPerTcp6ConnectionEStats</c> should be set to 0.
            </para>
            <para>
            For information on extended TCP statistics on an IPv4 connection, see the GetPerTcpConnectionEStats and SetPerTcpConnectionEStats functions.
            </para>
            <para>
            The SetPerTcp6ConnectionEStats function can only be called by a user logged on as a member of the Administrators group. If
            <c>SetPerTcp6ConnectionEStats</c> is called by a user that is not a member of the Administrators group, the function call will
            fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on Windows
            Vista and later. If an application that contains this function is executed by a user logged on as a member of the Administrators
            group other than the built-in Administrator, this call will fail unless the application has been marked in the manifest file with
            a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>
            An application that uses the <c>GetPerTcp6ConnectionEStats</c> function to retrieve extended statistics for an IPv6 TCP
            connection must check that the previous call to the SetPerTcp6ConnectionEStats function to enabled extended statistics returned
            with success. If the <c>SetPerTcp6ConnectionEStats</c> function to enable extended statistics failed, subsequent calls to the
            <c>GetPerTcp6ConnectionEStats</c> will still return numbers in the returned structures. However the returned numbers are
            meaningless random data and don't represent extended TCP statistics. This behavior can be observed by running the example below
            as both an administrator and a normal user.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetRTTAndHopCount(Vanara.PInvoke.Ws2_32.IN_ADDR,System.UInt32@,System.UInt32,System.UInt32@)">
            <summary>The <c>GetRTTAndHopCount</c> function determines the round-trip time (RTT) and hop count to the specified destination.</summary>
            <param name="DestIpAddress">
            IP address of the destination for which to determine the RTT and hop count, in the form of an IPAddr structure.
            </param>
            <param name="HopCount">
            Pointer to a <c>ULONG</c> variable. This variable receives the hop count to the destination specified by the DestIpAddress parameter.
            </param>
            <param name="MaxHops">
            Maximum number of hops to search for the destination. If the number of hops to the destination exceeds this number, the function
            terminates the search and returns <c>FALSE</c>.
            </param>
            <param name="RTT">Round-trip time, in milliseconds, to the destination specified by DestIpAddress.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. Call GetLastError to obtain the error code for the failure.</para>
            </returns>
            <remarks>
            <para>
            For information about the <c>IPAddr</c> data type, see Windows Data Types. To convert an IP address between dotted decimal
            notation and <c>IPAddr</c> format, use the inet_addr and inet_ntoa functions.
            </para>
            <para>Examples</para>
            <para>The following example retrieves and prints the round trip time and hop count to the destination IP address 127.0.0.1.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetTcp6Table(System.IntPtr,System.UInt32@,System.Boolean)">
            <summary>The <c>GetTcp6Table</c> function retrieves the TCP connection table for IPv6.</summary>
            <param name="TcpTable">A pointer to a buffer that receives the TCP connection table for IPv6 as a MIB_TCP6TABLE structure.</param>
            <param name="SizePointer">
            <para>On input, specifies the size in bytes of the buffer pointed to by the TcpTable parameter.</para>
            <para>
            On output, if the buffer is not large enough to hold the returned TCP connection table, the function sets this parameter equal to
            the required buffer size in bytes.
            </para>
            </param>
            <param name="Order">
            <para>
            A Boolean value that specifies whether the TCP connection table should be sorted. If this parameter is <c>TRUE</c>, the table is
            sorted in ascending order, starting with the lowest local IP address. If this parameter is <c>FALSE</c>, the table appears in the
            order in which they were retrieved.
            </para>
            <para>The following values are compared (as listed) when ordering the TCP endpoints:</para>
            <list type="number">
            <item>
            <term>Local IPv6 address</term>
            </item>
            <item>
            <term>Local scope ID</term>
            </item>
            <item>
            <term>Local port</term>
            </item>
            <item>
            <term>Remote IPv6 address</term>
            </item>
            <item>
            <term>Remote scope ID</term>
            </item>
            <item>
            <term>Remote port</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The buffer pointed to by the TcpTable parameter is not large enough. The required size is returned in the variable pointed to by
            the SizePointer parameter.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The SizePointer parameter is NULL, or GetTcp6Table is unable to write to the memory pointed to by the SizePointer parameter.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>This function is not supported on the operating system in use on the local system.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetTcp6Table</c> function is defined on Windows Vista and later.</para>
            <para>Examples</para>
            <para>The following example retrieves the TCP connection table for IPv6 and prints the state of each connection.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetTcp6Table(System.Boolean)">
            <summary>The <c>GetTcp6Table</c> function retrieves the TCP connection table for IPv6.</summary>
            <param name="Order">
            <para>
            A Boolean value that specifies whether the TCP connection table should be sorted. If this parameter is <c>TRUE</c>, the table is
            sorted in ascending order, starting with the lowest local IP address. If this parameter is <c>FALSE</c>, the table appears in the
            order in which they were retrieved.
            </para>
            <para>The following values are compared (as listed) when ordering the TCP endpoints:</para>
            <list type="number">
            <item>
            <term>Local IPv6 address</term>
            </item>
            <item>
            <term>Local scope ID</term>
            </item>
            <item>
            <term>Local port</term>
            </item>
            <item>
            <term>Remote IPv6 address</term>
            </item>
            <item>
            <term>Remote scope ID</term>
            </item>
            <item>
            <term>Remote port</term>
            </item>
            </list>
            </param>
            <returns>The TCP connection table for IPv6 as a MIB_TCP6TABLE structure.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetTcp6Table2(System.IntPtr,System.UInt32@,System.Boolean)">
            <summary>The <c>GetTcp6Table2</c> function retrieves the TCP connection table for IPv6.</summary>
            <param name="TcpTable">A pointer to a buffer that receives the TCP connection table for IPv6 as a MIB_TCP6TABLE2 structure.</param>
            <param name="SizePointer">
            <para>On input, specifies the size of the buffer pointed to by the TcpTable parameter.</para>
            <para>
            On output, if the buffer is not large enough to hold the returned TCP connection table, the function sets this parameter equal to
            the required buffer size.
            </para>
            </param>
            <param name="Order">
            <para>
            A value that specifies whether the TCP connection table should be sorted. If this parameter is <c>TRUE</c>, the table is sorted
            in ascending order, starting with the lowest local IP address. If this parameter is <c>FALSE</c>, the table appears in the order
            in which they were retrieved.
            </para>
            <para>The following values are compared (as listed) when ordering the TCP endpoints:</para>
            <list type="number">
            <item>
            <term>Local IPv6 address</term>
            </item>
            <item>
            <term>Local scope ID</term>
            </item>
            <item>
            <term>Local port</term>
            </item>
            <item>
            <term>Remote IPv6 address</term>
            </item>
            <item>
            <term>Remote scope ID</term>
            </item>
            <item>
            <term>Remote port</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The buffer pointed to by the TcpTable parameter is not large enough. The required size is returned in the variable pointed to by
            the SizePointer parameter.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The SizePointer parameter is NULL, or GetTcp6Table2 is unable to write to the memory pointed to by the SizePointer parameter.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>This function is not supported on the operating system in use on the local system.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetTcp6Table2</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetTcp6Table2</c> function is an enhanced version of the GetTcp6Table function that also retrieves information on the TCP
            offload state of the TCP connection.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetTcp6Table2(System.Boolean)">
            <summary>The <c>GetTcp6Table2</c> function retrieves the TCP connection table for IPv6.</summary>
            <param name="Order">
            <para>
            A value that specifies whether the TCP connection table should be sorted. If this parameter is <c>TRUE</c>, the table is sorted
            in ascending order, starting with the lowest local IP address. If this parameter is <c>FALSE</c>, the table appears in the order
            in which they were retrieved.
            </para>
            <para>The following values are compared (as listed) when ordering the TCP endpoints:</para>
            <list type="number">
            <item>
            <term>Local IPv6 address</term>
            </item>
            <item>
            <term>Local scope ID</term>
            </item>
            <item>
            <term>Local port</term>
            </item>
            <item>
            <term>Remote IPv6 address</term>
            </item>
            <item>
            <term>Remote scope ID</term>
            </item>
            <item>
            <term>Remote port</term>
            </item>
            </list>
            </param>
            <returns>The TCP connection table for IPv6 as a MIB_TCP6TABLE2 structure.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetTcpStatistics(Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS@)">
            <summary>The <c>GetTcpStatistics</c> function retrieves the TCP statistics for the local computer.</summary>
            <param name="Statistics">A pointer to a MIB_TCPSTATS structure that receives the TCP statistics for the local computer.</param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The pStats parameter is NULL, or GetTcpStatistics is unable to write to the memory pointed to by the pStats parameter.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use the FormatMessage function to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>GetTcpStatistics</c> function returns the TCP statistics for IPv4 on the current computer. On Windows XP and later, the
            GetTcpStatisticsEx can be used to obtain the TCP statistics for either IPv4 or IPv6.
            </para>
            <para>Examples</para>
            <para>The following example retrieves the TCP statistics for the local computer and prints some values from the returned data.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetTcpStatisticsEx(Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS@,Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY)">
            <summary>
            The <c>GetTcpStatisticsEx</c> function retrieves the Transmission Control Protocol (TCP) statistics for the current computer. The
            <c>GetTcpStatisticsEx</c> function differs from the <c>GetTcpStatistics</c> function in that <c>GetTcpStatisticsEx</c> also
            supports the Internet Protocol version 6 (IPv6) protocol family.
            </summary>
            <param name="Statistics">A pointer to a MIB_TCPSTATS structure that receives the TCP statistics for the local computer.</param>
            <param name="Family">
            <para>The protocol family for which to retrieve statistics. This parameter must be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_INET</term>
            <term>Internet Protocol version 4 (IPv4).</term>
            </item>
            <item>
            <term>AF_INET6</term>
            <term>Internet Protocol version 6 (IPv6).</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The pStats parameter is NULL or does not point to valid memory, or the dwFamily parameter is not a valid value.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>This function is not supported on the operating system on which the function call was made.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetTcpStatisticsEx2(Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS2@,Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY)">
            <summary>
            The <c>GetTcpStatisticsEx2</c> function retrieves the Transmission Control Protocol (TCP) statistics for the current computer.
            The <c>GetTcpStatisticsEx2</c> function differs from the GetTcpStatisticsEx function in that it uses a new output structure that
            contains 64-bit counters, rather than 32-bit counters.
            </summary>
            <param name="Statistics">A pointer to a MIB_TCPSTATS2 structure that receives the TCP statistics for the local computer.</param>
            <param name="Family">
            <para>The protocol family for which to retrieve statistics. This parameter must be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_INET</term>
            <term>Internet Protocol version 4 (IPv4).</term>
            </item>
            <item>
            <term>AF_INET6</term>
            <term>Internet Protocol version 6 (IPv6).</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The pStats parameter is NULL or does not point to valid memory, or the dwFamily parameter is not a valid value.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>This function is not supported on the operating system on which the function call was made.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetTcpTable(System.IntPtr,System.UInt32@,System.Boolean)">
            <summary>The <c>GetTcpTable</c> function retrieves the IPv4 TCP connection table.</summary>
            <param name="TcpTable">A pointer to a buffer that receives the TCP connection table as a MIB_TCPTABLE structure.</param>
            <param name="SizePointer">
            <para>On input, specifies the size in bytes of the buffer pointed to by the pTcpTable parameter.</para>
            <para>
            On output, if the buffer is not large enough to hold the returned connection table, the function sets this parameter equal to the
            required buffer size in bytes.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the data type for this parameter is changed to a <c>PULONG</c> which is
            equivalent to a <c>PDWORD</c>.
            </para>
            </param>
            <param name="Order">
            <para>
            A Boolean value that specifies whether the TCP connection table should be sorted. If this parameter is <c>TRUE</c>, the table is
            sorted in the order of:
            </para>
            <list type="number">
            <item>
            <term>Local IP address</term>
            </item>
            <item>
            <term>Local port</term>
            </item>
            <item>
            <term>Remote IP address</term>
            </item>
            <item>
            <term>Remote port</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The buffer pointed to by the pTcpTable parameter is not large enough. The required size is returned in the DWORD variable pointed
            to by the pdwSize parameter. This error is also returned if the pTcpTable parameter is NULL.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The pdwSize parameter is NULL, or GetTcpTable is unable to write to the memory pointed to by the pdwSize parameter.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>This function is not supported on the operating system in use on the local system.</term>
            </item>
            <item>
            <term>STATUS_UNSUCCESSFUL</term>
            <term>
            If you receive this return code then calling the function again is usually enough to clear the issue and get the desired result.
            This return code can be a consequence of the system being under high load. For example, if the size of the TCP connection table
            changes by more than 2 additional items 3 consecutive times.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            On the Windows SDK released for Windows Vista and later, the return value from the <c>GetTcpTable</c> function is changed to a
            data type of <c>ULONG</c> which is equivalent to a <c>DWORD</c>.
            </para>
            <para>Examples</para>
            <para>The following example retrieves the TCP connection table for IPv4 and prints the state of each connection.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetTcpTable(System.Boolean)">
            <summary>The <c>GetTcpTable</c> function retrieves the IPv4 TCP connection table.</summary>
            <param name="Order">
            <para>
            A Boolean value that specifies whether the TCP connection table should be sorted. If this parameter is <c>TRUE</c>, the table is
            sorted in the order of:
            </para>
            <list type="number">
            <item>
            <term>Local IP address</term>
            </item>
            <item>
            <term>Local port</term>
            </item>
            <item>
            <term>Remote IP address</term>
            </item>
            <item>
            <term>Remote port</term>
            </item>
            </list>
            </param>
            <returns>The TCP connection table as a MIB_TCPTABLE structure.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetTcpTable2(System.IntPtr,System.UInt32@,System.Boolean)">
            <summary>The <c>GetTcpTable2</c> function retrieves the IPv4 TCP connection table.</summary>
            <param name="TcpTable">A pointer to a buffer that receives the TCP connection table as a MIB_TCPTABLE2 structure.</param>
            <param name="SizePointer">
            <para>On input, specifies the size of the buffer pointed to by the TcpTable parameter.</para>
            <para>
            On output, if the buffer is not large enough to hold the returned connection table, the function sets this parameter equal to the
            required buffer size.
            </para>
            </param>
            <param name="Order">
            <para>
            A value that specifies whether the TCP connection table should be sorted. If this parameter is <c>TRUE</c>, the table is sorted
            in the order of:
            </para>
            <list type="number">
            <item>
            <term>Local IP address</term>
            </item>
            <item>
            <term>Local port</term>
            </item>
            <item>
            <term>Remote IP address</term>
            </item>
            <item>
            <term>Remote port</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The buffer pointed to by the TcpTable parameter is not large enough. The required size is returned in the PULONG variable pointed
            to by the SizePointer parameter. This error is also returned if the pTcpTable parameter is NULL.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The SizePointer parameter is NULL, or GetTcpTable2 is unable to write to the memory pointed to by the SizePointer parameter.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>This function is not supported on the operating system in use on the local system.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetTcpTable2</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetTcpTable2</c> function is an enhanced version of the GetTcpTable function that also retrieves information on the TCP
            offload state of the TCP connection.
            </para>
            <para>Examples</para>
            <para>The following example retrieves the TCP connection table for IPv4 and prints the state of each connection.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetTcpTable2(System.Boolean)">
            <summary>The <c>GetTcpTable2</c> function retrieves the IPv4 TCP connection table.</summary>
            <param name="Order">
            <para>
            A value that specifies whether the TCP connection table should be sorted. If this parameter is <c>TRUE</c>, the table is sorted
            in the order of:
            </para>
            <list type="number">
            <item>
            <term>Local IP address</term>
            </item>
            <item>
            <term>Local port</term>
            </item>
            <item>
            <term>Remote IP address</term>
            </item>
            <item>
            <term>Remote port</term>
            </item>
            </list>
            </param>
            <returns>The TCP connection table as a MIB_TCPTABLE2 structure.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetUdp6Table(System.IntPtr,System.UInt32@,System.Boolean)">
            <summary>The <c>GetUdp6Table</c> function retrieves the IPv6 User Datagram Protocol (UDP) listener table.</summary>
            <param name="Udp6Table">A pointer to a buffer that receives the IPv6 UDP listener table as a MIB_UDP6TABLE structure.</param>
            <param name="SizePointer">
            <para>On input, specifies the size in bytes of the buffer pointed to by the Udp6Table parameter.</para>
            <para>
            On output, if the buffer is not large enough to hold the returned listener table, the function sets this parameter equal to the
            required buffer size in bytes.
            </para>
            </param>
            <param name="Order">
            <para>
            A Boolean value that specifies whether the returned UDP listener table should be sorted. If this parameter is <c>TRUE</c>, the
            table is sorted in the order of:
            </para>
            <list type="number">
            <item>
            <term>Local IPv6 address</term>
            </item>
            <item>
            <term>Local scope ID</term>
            </item>
            <item>
            <term>Local port</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The buffer pointed to by the Udp6Table parameter is not large enough. The required size is returned in the ULONG variable pointed
            to by the SizePointer parameter.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The SizePointer parameter is NULL, or GetUdp6Table is unable to write to the memory pointed to by the SizePointer parameter.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>This function is not supported on the operating system in use on the local system.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>The <c>GetUdp6Table</c> function is defined on Windows Vista and later.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetUdp6Table(System.Boolean)">
            <summary>The <c>GetUdp6Table</c> function retrieves the IPv6 User Datagram Protocol (UDP) listener table.</summary>
            <param name="Order">
            <para>
            A Boolean value that specifies whether the returned UDP listener table should be sorted. If this parameter is <c>TRUE</c>, the
            table is sorted in the order of:
            </para>
            <list type="number">
            <item>
            <term>Local IPv6 address</term>
            </item>
            <item>
            <term>Local scope ID</term>
            </item>
            <item>
            <term>Local port</term>
            </item>
            </list>
            </param>
            <returns>The IPv6 UDP listener table as a MIB_UDP6TABLE structure.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetUdpStatistics(Vanara.PInvoke.IpHlpApi.MIB_UDPSTATS@)">
            <summary>The <c>GetUdpStatistics</c> function retrieves the User Datagram Protocol (UDP) statistics for the local computer.</summary>
            <param name="Stats">Pointer to a MIB_UDPSTATS structure that receives the UDP statistics for the local computer.</param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, use FormatMessage to obtain the message string for the returned error.</para>
            </returns>
            <remarks>
            <c>Windows Server 2003 and Windows XP:</c> Use the GetUdpStatisticsEx function to obtain the UDP statistics for the IPv6 protocol.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetUdpStatisticsEx(Vanara.PInvoke.IpHlpApi.MIB_UDPSTATS@,Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY)">
            <summary>
            The <c>GetUdpStatisticsEx</c> function retrieves the User Datagram Protocol (UDP) statistics for the current computer. The
            <c>GetUdpStatisticsEx</c> function differs from the <c>GetUdpStatistics</c> function in that <c>GetUdpStatisticsEx</c> also
            supports the Internet Protocol version 6 (IPv6) protocol family.
            </summary>
            <param name="Statistics">A pointer to a MIB_UDPSTATS structure that receives the UDP statistics for the local computer.</param>
            <param name="Family">
            <para>The protocol family for which to retrieve statistics. This parameter must be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_INET</term>
            <term>Internet Protocol version 4 (IPv4).</term>
            </item>
            <item>
            <term>AF_INET6</term>
            <term>Internet Protocol version 6 (IPv6).</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The pStats parameter is NULL or does not point to valid memory, or the dwFamily parameter is not a valid value.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>This function is not supported on the operating system on which the function call was made.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetUdpStatisticsEx2(Vanara.PInvoke.IpHlpApi.MIB_UDPSTATS2@,Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY)">
            <summary>
            The <c>GetUdpStatisticsEx2</c> function retrieves the User Datagram Protocol (UDP) statistics for the current computer. The
            <c>GetUdpStatisticsEx2</c> function differs from the GetUdpStatisticsEx function in that <c>GetUdpStatisticsEx2</c> uses a new
            output structure that contains 64-bit counters, rather than 32-bit counters.
            </summary>
            <param name="Statistics">A pointer to a MIB_UDPSTATS2 structure that receives the UDP statistics for the local computer.</param>
            <param name="Family">
            <para>The protocol family for which to retrieve statistics. This parameter must be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_INET</term>
            <term>Internet Protocol version 4 (IPv4).</term>
            </item>
            <item>
            <term>AF_INET6</term>
            <term>Internet Protocol version 6 (IPv6).</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The Statistics parameter is NULL or does not point to valid memory, or the Family parameter is not a valid value.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>This function is not supported on the operating system on which the function call was made.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetUdpTable(System.IntPtr,System.UInt32@,System.Boolean)">
            <summary>The <c>GetUdpTable</c> function retrieves the IPv4 User Datagram Protocol (UDP) listener table.</summary>
            <param name="UdpTable">A pointer to a buffer that receives the IPv4 UDP listener table as a MIB_UDPTABLE structure.</param>
            <param name="SizePointer">
            <para>On input, specifies the size in bytes of the buffer pointed to by the UdpTable parameter.</para>
            <para>
            On output, if the buffer is not large enough to hold the returned listener table, the function sets this parameter equal to the
            required buffer size in bytes.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the data type for this parameter is changed to a <c>PULONG</c> which is
            equivalent to a <c>PDWORD</c>.
            </para>
            </param>
            <param name="Order">
            <para>
            A Boolean value that specifies whether the returned UDP listener table should be sorted. If this parameter is <c>TRUE</c>, the
            table is sorted in the order of:
            </para>
            <list type="number">
            <item>
            <term>Local IP address</term>
            </item>
            <item>
            <term>Local port</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The buffer pointed to by the pUdpTable parameter is not large enough. The required size is returned in the ULONG variable pointed
            to by the pdwSize parameter. This error is also returned if the pUdpTable parameter is NULL.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The pdwSize parameter is NULL, or GetUdpTable is unable to write to the memory pointed to by the pdwSize parameter.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>This function is not supported on the operating system in use on the local system.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            On the Windows SDK released for Windows Vista and later, the return value from the <c>GetUdpTable</c> function is changed to a
            data type of <c>ULONG</c> which is equivalent to a <c>DWORD</c>.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetUdpTable(System.Boolean)">
            <summary>The <c>GetUdpTable</c> function retrieves the IPv4 User Datagram Protocol (UDP) listener table.</summary>
            <param name="Order">
            <para>
            A Boolean value that specifies whether the returned UDP listener table should be sorted. If this parameter is <c>TRUE</c>, the
            table is sorted in the order of:
            </para>
            <list type="number">
            <item>
            <term>Local IP address</term>
            </item>
            <item>
            <term>Local port</term>
            </item>
            </list>
            </param>
            <returns>The IPv4 UDP listener table as a MIB_UDPTABLE structure.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetUniDirectionalAdapterInfo(System.IntPtr,System.UInt32@)">
            <summary>
            <para>
            The <c>GetUniDirectionalAdapterInfo</c> function retrieves information about the unidirectional adapters installed on the local
            computer. A unidirectional adapter is an adapter that can receive datagrams, but not transmit them.
            </para>
            </summary>
            <param name="pIPIfInfo">
            <para>
            Pointer to an IP_UNIDIRECTIONAL_ADAPTER_ADDRESS structure that receives information about the unidirectional adapters installed
            on the local computer.
            </para>
            </param>
            <param name="dwOutBufLen">
            <para>Pointer to a <c>ULONG</c> variable that receives the size of the structure pointed to by the pIPIfInfo parameter.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, use FormatMessage to obtain the message string for the returned error.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetUniDirectionalAdapterInfo">
            <summary>
            The GetUniDirectionalAdapterInfo function retrieves information about the unidirectional adapters installed on the local
            computer. A unidirectional adapter is an adapter that can receive datagrams, but not transmit them.
            </summary>
            <returns>
            An IP_UNIDIRECTIONAL_ADAPTER_ADDRESS structure that receives information about the unidirectional adapters installed on the local computer.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IpReleaseAddress(Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INDEX_MAP@)">
            <summary>
            <para>
            The <c>IpReleaseAddress</c> function releases an IPv4 address previously obtained through the Dynamic Host Configuration Protocol (DHCP).
            </para>
            </summary>
            <param name="AdapterInfo">
            <para>A pointer to an IP_ADAPTER_INDEX_MAP structure that specifies the adapter associated with the IPv4 address to release.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, use FormatMessage to obtain the message string for the returned error.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            One of the parameters is invalid. This error is returned if the AdapterInfo parameter is NULL or if the Name member of the
            PIP_ADAPTER_INDEX_MAP structure pointed to by the AdapterInfo parameter is invalid.
            </term>
            </item>
            <item>
            <term>ERROR_PROC_NOT_FOUND</term>
            <term>An exception occurred during the request to DHCP for the release of the IPv4 address.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>IpReleaseAddress</c> function is specific to IPv4 and releases only an IPv4 address previously obtained through the
            Dynamic Host Configuration Protocol (DHCP). The <c>Name</c> member of the IP_ADAPTER_INDEX_MAP structure pointed to by the
            AdapterInfo parameter is the only member used to determine the DHCP address to release.
            </para>
            <para>
            An array of IP_ADAPTER_INDEX_MAP structures is returned in the IP_INTERFACE_INFO structure by the GetInterfaceInfo function. The
            <c>IP_INTERFACE_INFO</c> structure returned by <c>GetInterfaceInfo</c> contains at least one <c>IP_ADAPTER_INDEX_MAP</c>
            structure even if the <c>NumAdapters</c> member of the <c>IP_INTERFACE_INFO</c> structure indicates that no network adapters with
            IPv4 are enabled. When the <c>NumAdapters</c> member of the <c>IP_INTERFACE_INFO</c> structure returned by
            <c>GetInterfaceInfo</c> is zero, the value of the members of the single <c>IP_ADAPTER_INDEX_MAP</c> structure returned in the
            <c>IP_INTERFACE_INFO</c> structure is undefined.
            </para>
            <para>
            If the <c>Name</c> member of the IP_ADAPTER_INDEX_MAP structure pointed to by the AdapterInfo parameter is <c>NULL</c>, the
            <c>IpReleaseAddress</c> function returns <c>ERROR_INVALID_PARAMETER</c>.
            </para>
            <para>
            There are no functions available for releasing or renewing an IPv6 address. This can only be done by executing the Ipconfig command:
            </para>
            <para><c>ipconfig /release6</c></para>
            <para><c>ipconfig /renew6</c></para>
            <para>Examples</para>
            <para>
            The following example retrieves the list of network adapters with IPv4 enabled on the local system, then releases and renews the
            IPv4 address for the first adapter in the list.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IpRenewAddress(Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INDEX_MAP@)">
            <summary>
            <para>
            The <c>IpRenewAddress</c> function renews a lease on an IPv4 address previously obtained through Dynamic Host Configuration
            Protocol (DHCP).
            </para>
            </summary>
            <param name="AdapterInfo">
            <para>A pointer to an IP_ADAPTER_INDEX_MAP structure that specifies the adapter associated with the IP address to renew.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, use FormatMessage to obtain the message string for the returned error.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            One of the parameters is invalid. This error is returned if the AdapterInfo parameter is NULL or if the Name member of the
            PIP_ADAPTER_INDEX_MAP structure pointed to by the AdapterInfo parameter is invalid.
            </term>
            </item>
            <item>
            <term>ERROR_PROC_NOT_FOUND</term>
            <term>An exception occurred during the request to DHCP for the renewal of the IPv4 address.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>IpRenewAddress</c> function is specific to IPv4 and renews only an IPv4 address previously obtained through the Dynamic
            Host Configuration Protocol (DHCP). The <c>Name</c> member of the IP_ADAPTER_INDEX_MAP structure pointed to by the AdapterInfo
            parameter is the only member used to determine the DHCP address to renew.
            </para>
            <para>
            An array of IP_ADAPTER_INDEX_MAP structures are returned in the IP_INTERFACE_INFO structure by the GetInterfaceInfo function. The
            <c>IP_INTERFACE_INFO</c> structure returned by <c>GetInterfaceInfo</c> contains at least one <c>IP_ADAPTER_INDEX_MAP</c>
            structure even if the <c>NumAdapters</c> member of the <c>IP_INTERFACE_INFO</c> structure indicates that no network adapters with
            IPv4 are enabled. When the <c>NumAdapters</c> member of the <c>IP_INTERFACE_INFO</c> structure returned by
            <c>GetInterfaceInfo</c> is zero, the value of the members of the single <c>IP_ADAPTER_INDEX_MAP</c> structure returned in the
            <c>IP_INTERFACE_INFO</c> structure is undefined.
            </para>
            <para>
            If the <c>Name</c> member of the IP_ADAPTER_INDEX_MAP structure pointed to by the AdapterInfo parameter is <c>NULL</c>, the
            <c>IpRenewAddress</c> function returns <c>ERROR_INVALID_PARAMETER</c>.
            </para>
            <para>
            There are no functions available for releasing or renewing an IPv6 address. This can only be done by executing the Ipconfig command:
            </para>
            <para><c>ipconfig /release6</c></para>
            <para><c>ipconfig /renew6</c></para>
            <para>Examples</para>
            <para>
            The following example retrieves the list of network adapters with IPv4 enabled on the local system, then releases and renews the
            IPv4 address for the first adapter in the list.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.LookupPersistentTcpPortReservation(System.UInt16,System.UInt16,System.UInt64@)">
            <summary>
            The <c>LookupPersistentTcpPortReservation</c> function looks up the token for a persistent TCP port reservation for a consecutive
            block of TCP ports on the local computer.
            </summary>
            <param name="StartPort">The starting TCP port number in network byte order.</param>
            <param name="NumberOfPorts">The number of TCP port numbers that were reserved.</param>
            <param name="Token">A pointer to a port reservation token that is returned if the function succeeds.</param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if zero is passed in the StartPort or NumberOfPorts parameters.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The element was not found. This error is returned if persistent port block specified by the StartPort and NumberOfPorts
            parameters could not be found.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>LookupPersistentTcpPortReservation</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>LookupPersistentTcpPortReservation</c> function is used to lookup the token for a persistent reservation for a block of
            TCP ports.
            </para>
            <para>
            A persistent reservation for a block of TCP ports is created by a call to the CreatePersistentTcpPortReservation function. The
            StartPort or NumberOfPorts parameters passed to the <c>LookupPersistentTcpPortReservation</c> function must match the values used
            when the persistent reservation for a block of TCP ports was created by the <c>CreatePersistentTcpPortReservation</c> function.
            </para>
            <para>
            If the <c>LookupPersistentTcpPortReservation</c> function succeeds, the Token parameter returned will point to the token for the
            persistent port reservation for the block of TCP ports. Note that the token for a given persistent reservation for a block of TCP
            ports may change each time the system is restarted.
            </para>
            <para>
            An application can request port assignments from the TCP port reservation by opening a TCP socket, then calling the WSAIoctl
            function specifying the SIO_ASSOCIATE_PORT_RESERVATION IOCTL and passing the reservation token before issuing a call to the bind
            function on the socket.
            </para>
            <para>Examples</para>
            <para>
            The following example looks up a persistent TCP port reservation and then creates a socket and allocates a port from the port reservation.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.LookupPersistentUdpPortReservation(System.UInt16,System.UInt16,System.UInt64@)">
            <summary>
            The <c>LookupPersistentUdpPortReservation</c> function looks up the token for a persistent UDP port reservation for a consecutive
            block of TCP ports on the local computer.
            </summary>
            <param name="StartPort">The starting UDP port number in network byte order.</param>
            <param name="NumberOfPorts">The number of UDP port numbers that were reserved.</param>
            <param name="Token">A pointer to a port reservation token that is returned if the function succeeds.</param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if zero is passed in the StartPort or NumberOfPorts parameters.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The element was not found. This error is returned if persistent port block specified by the StartPort and NumberOfPorts
            parameters could not be found.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>LookupPersistentUdpPortReservation</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>LookupPersistentUdpPortReservation</c> function is used to lookup the token for a persistent reservation for a block of
            UDP ports.
            </para>
            <para>
            A persistent reservation for a block of UDP ports is created by a call to the CreatePersistentUdpPortReservation function. The
            StartPort or NumberOfPorts parameters passed to the <c>LookupPersistentUdpPortReservation</c> function must match the values used
            when the persistent reservation for a block of TCP ports was created by the <c>CreatePersistentUdpPortReservation</c> function.
            </para>
            <para>
            If the <c>LookupPersistentUdpPortReservation</c> function succeeds, the Token parameter returned will point to the token for the
            persistent port reservation for the block of UDP ports. Note that the token for a given persistent reservation for a block of TCP
            ports may change each time the system is restarted.
            </para>
            <para>
            An application can request port assignments from the UDP port reservation by opening a UDP socket, then calling the WSAIoctl
            function specifying the SIO_ASSOCIATE_PORT_RESERVATION IOCTL and passing the reservation token before issuing a call to the bind
            function on the socket.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.NotifyAddrChange(System.IntPtr@,System.Threading.NativeOverlapped*)">
            <summary>
            <para>
            The <c>NotifyAddrChange</c> function causes a notification to be sent to the caller whenever a change occurs in the table that
            maps IPv4 addresses to interfaces.
            </para>
            </summary>
            <param name="Handle">
            <para>
            A pointer to a <c>HANDLE</c> variable that receives a file handle for use in a subsequent call to the GetOverlappedResult function.
            </para>
            <para><c>Warning</c> Do not close this handle, and do not associate it with a completion port.</para>
            </param>
            <param name="overlapped">
            <para>A pointer to an OVERLAPPED structure that notifies the caller of any changes in the table that maps IP addresses to interfaces.</para>
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is NO_ERROR if the caller specifies <c>NULL</c> for the Handle and overlapped
            parameters. If the caller specifies non- <c>NULL</c> parameters, the return value for success is ERROR_IO_PENDING.
            </para>
            <para>If the function fails, use FormatMessage to obtain the message string for the returned error.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_CANCELLED</term>
            <term>The context is being deregistered, so the call was canceled immediately.</term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed. This error is returned if the both the Handle and overlapped parameters are not NULL, but the
            memory specified by the input parameters cannot be written by the calling process. This error is also returned if the client
            already has made a change notification request, so this duplicate request will fail.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>There was insufficient memory available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            This error is returned on versions of Windows where this function is not supported such as Windows 98/95 and Windows NT 4.0.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The</para>
            <para><c>NotifyAddrChange</c> function may be called in two ways:</para>
            <list type="bullet">
            <item>
            <term>Synchronous method</term>
            </item>
            <item>
            <term>Asynchronous method</term>
            </item>
            </list>
            <para>
            If the caller specifies <c>NULL</c> for the Handle and overlapped parameters, the call to <c>NotifyAddrChange</c> is synchronous
            and will block until an IP address change occurs. In this case if a change occurs, the <c>NotifyAddrChange</c> function completes
            to indicate that a change has occurred.
            </para>
            <para>
            If the <c>NotifyAddrChange</c> function is called synchronously, a notification will be sent on the next IPv4 address change
            until the application terminates.
            </para>
            <para>
            If the caller specifies a handle variable and an OVERLAPPED structure, then the <c>NotifyAddrChange</c> function call is
            asynchronous and the caller can use the returned handle with the <c>OVERLAPPED</c> structure to receive asynchronous notification
            of IPv4 address changes using the GetOverlappedResult function. See the following topics for information about using the handle
            and <c>OVERLAPPED</c> structure to receive notifications:
            </para>
            <list type="bullet">
            <item>
            <term>Synchronization and Overlapped Input and Output</term>
            </item>
            <item>
            <term>GetOverlappedResult</term>
            </item>
            </list>
            <para>
            The CancelIPChangeNotify function cancels notification of IPv4 address and route changes previously requested with successful
            calls to the <c>NotifyAddrChange</c> or NotifyRouteChange functions.
            </para>
            <para>
            Once an application has been notified of a change, the application can then call the GetIpAddrTable or GetAdaptersAddresses
            function to retrieve the table of IPv4 addresses to determine what has changed. If the application is notified and requires
            notification for the next change, then the <c>NotifyAddrChange</c> function must be called again.
            </para>
            <para>
            If the <c>NotifyAddrChange</c> function is called asynchronously, a notification will be sent on the next IPv4 address change
            until either the application cancels the notification by calling the CancelIPChangeNotify function or the application terminates.
            If the application terminates, the system will automatically cancel the registration for the notification. It is still
            recommended that an application explicitly cancel any notification before it terminates.
            </para>
            <para>Any registration for a notification does not persist across a system shut down or reboot.</para>
            <para>
            On Windows Vista and later, the NotifyIpInterfaceChange function can be used to register to be notified for changes to IPv4 and
            IPv6 interfaces on the local computer.
            </para>
            <para>Examples</para>
            <para>The following example waits for a change to occur in the table that maps IP addresses to interfaces.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.NotifyRouteChange(System.IntPtr@,System.Threading.NativeOverlapped*)">
            <summary>
            <para>
            The <c>NotifyRouteChange</c> function causes a notification to be sent to the caller whenever a change occurs in the IPv4 routing table.
            </para>
            </summary>
            <param name="Handle">
            <para>A pointer to a <c>HANDLE</c> variable that receives a handle to use in asynchronous notification.</para>
            </param>
            <param name="overlapped">
            <para>A pointer to an OVERLAPPED structure that notifies the caller of any changes in the routing table.</para>
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is NO_ERROR if the caller specifies <c>NULL</c> for the Handle and overlapped
            parameters. If the caller specifies non- <c>NULL</c> parameters, the return value for success is ERROR_IO_PENDING. If the
            function fails, use FormatMessage to obtain the message string for the returned error.
            </para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_CANCELLED</term>
            <term>The context is being deregistered, so the call was canceled immediately.</term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed. This error is returned if the both the Handle and overlapped parameters are not NULL, but the
            memory specified by the input parameters cannot be written by the calling process. This error is also returned if the client
            already has made a change notification request, so this duplicate request will fail.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>There was insufficient memory available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            This error is returned on versions of Windows where this function is not supported such as Windows 98/95 and Windows NT 4.0.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The</para>
            <para><c>NotifyRouteChange</c> function may be called in two ways:</para>
            <list type="bullet">
            <item>
            <term>Synchronous method</term>
            </item>
            <item>
            <term>Asynchronous method</term>
            </item>
            </list>
            <para>
            If the caller specifies <c>NULL</c> for the Handle and overlapped parameters, the call to <c>NotifyRouteChange</c> is synchronous
            and will block until an IPv4 routing table change occurs. In this case if a change occurs, the <c>NotifyRouteChange</c> function
            completes to indicate that a change has occurred.
            </para>
            <para>
            If the <c>NotifyRouteChange</c> function is called synchronously, a notification will be sent on the next IPv4 routing change
            until the application terminates.
            </para>
            <para>
            If the caller specifies a handle variable and an OVERLAPPED structure, the caller can use the returned handle with the
            <c>OVERLAPPED</c> structure to receive asynchronous notification of IPv4 routing table changes. See the following topics for
            information about using the handle and <c>OVERLAPPED</c> structure to receive notifications:
            </para>
            <list type="bullet">
            <item>
            <term>Synchronization and Overlapped Input and Output</term>
            </item>
            <item>
            <term>GetQueuedCompletionStatus</term>
            </item>
            <item>
            <term>I/O Completion Ports</term>
            </item>
            </list>
            <para>
            If the application receives a notification and requires notification for the next change, then the <c>NotifyRouteChange</c>
            function must be called again.
            </para>
            <para>
            The CancelIPChangeNotify function cancels notification of IP address and route changes previously requested with successful calls
            to the NotifyAddrChange or <c>NotifyRouteChange</c> functions.
            </para>
            <para>
            Once an application has been notified of a change, the application can then call the GetIpForwardTable or GetIpForwardTable2
            function to retrieve the IPv4 routing table to determine what has changed. If the application is notified and requires
            notification for the next change, then the <c>NotifyRouteChange</c> function must be called again.
            </para>
            <para>
            If the <c>NotifyRouteChange</c> function is called asynchronously, a notification will be sent on the next IPv4 route change
            until either the application cancels the notification by calling the CancelIPChangeNotify function or the application terminates.
            If the application terminates, the system will automatically cancel the registration for the notification. It is still
            recommended that an application explicitly cancel any notification before it terminates.
            </para>
            <para>Any registration for a notification does not persist across a system shut down or reboot.</para>
            <para>
            On Windows Vista and later, the NotifyRouteChange2 function can be used to register to be notified for changes to the IPv6
            routing table on the local computer.
            </para>
            <para>Examples</para>
            <para>The following example waits for a change to occur in the IP routing table.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.ParseNetworkString(System.String,Vanara.PInvoke.IpHlpApi.NET_STRING,Vanara.PInvoke.IpHlpApi.NET_ADDRESS_INFO@,System.UInt16@,System.Byte@)">
            <summary>
            The <c>ParseNetworkString</c> function parses the input network string and checks whether it is a legal representation of the
            specified IP network string type. If the string matches a type and its specification, the function can optionally return the
            parsed result.
            </summary>
            <param name="NetworkString">A pointer to the NULL-terminated network string to parse.</param>
            <param name="Types">
            <para>
            The type of IP network string to parse. This parameter consists of one of network string types as defined in the IpHlpApi.h
            header file.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NET_STRING_IPV4_ADDRESS 0x00000001</term>
            <term>
            The NetworkString parameter points to an IPv4 address using Internet standard dotted-decimal notation. A network port or prefix
            must not be present in the network string. An example network string is the following: 192.168.100.10
            </term>
            </item>
            <item>
            <term>NET_STRING_IPV4_SERVICE 0x00000002</term>
            <term>
            The NetworkString parameter points to an IPv4 service using Internet standard dotted-decimal notation. A network port is required
            as part of the network string. A prefix must not be present in the network string. An example network string is the following: 192.168.100.10:80
            </term>
            </item>
            <item>
            <term>NET_STRING_IPV4_NETWORK 0x00000004</term>
            <term>
            The NetworkString parameter points to an IPv4 network using Internet standard dotted-decimal notation. A network prefix that uses
            the Classless Inter-Domain Routing (CIDR) notation is required as part of the network string. A network port must not be present
            in the network string. An example network string is the following: 192.168.100/24
            </term>
            </item>
            <item>
            <term>NET_STRING_IPV6_ADDRESS 0x00000008</term>
            <term>
            The NetworkString parameter points to an IPv6 address using Internet standard hexadecimal encoding. An IPv6 scope ID may be
            present in the network string. A network port or prefix must not be present in the network string. An example network string is
            the following: 21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A%2
            </term>
            </item>
            <item>
            <term>NET_STRING_IPV6_ADDRESS_NO_SCOPE 0x00000008</term>
            <term>
            The NetworkString parameter points to an IPv6 address using Internet standard hexadecimal encoding. An IPv6 scope ID must not be
            present in the network string. A network port or prefix must not be present in the network string. An example network string is
            the following: 21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A
            </term>
            </item>
            <item>
            <term>NET_STRING_IPV6_SERVICE 0x00000020</term>
            <term>
            The NetworkString parameter points to an IPv6 service using Internet standard hexadecimal encoding. A network port is required as
            part of the network string. An IPv6 scope ID may be present in the network string. A prefix must not be present in the network
            string. An example network string with a scope ID is the following: [21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A%2]:8080
            </term>
            </item>
            <item>
            <term>NET_STRING_IPV6_SERVICE_NO_SCOPE 0x00000040</term>
            <term>
            The NetworkString parameter points to an IPv6 service using Internet standard hexadecimal encoding. A network port is required as
            part of the network string. An IPv6 scope ID must not be present in the network string. A prefix must not be present in the
            network string. An example network string is the following: 21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A:8080
            </term>
            </item>
            <item>
            <term>NET_STRING_IPV6_NETWORK 0x00000080</term>
            <term>
            The NetworkString parameter points to an IPv6 network using Internet standard hexadecimal encoding. A network prefix in CIDR
            notation is required as part of the network string. A network port or scope ID must not be present in the network string. An
            example network string is the following: 21DA:D3::/48
            </term>
            </item>
            <item>
            <term>NET_STRING_NAMED_ADDRESS 0x00000100</term>
            <term>
            The NetworkString parameter points to an Internet address using a Domain Name System (DNS) name. A network port or prefix must
            not be present in the network string. An example network string is the following: www.microsoft.com
            </term>
            </item>
            <item>
            <term>NET_STRING_NAMED_SERVICE 0x00000200</term>
            <term>
            The NetworkString parameter points to an Internet service using a DNS name. A network port must be present in the network string.
            An example network string is the following: www.microsoft.com:80
            </term>
            </item>
            <item>
            <term>NET_STRING_IP_ADDRESS 0x00000009</term>
            <term>
            The NetworkString parameter points to an IPv4 address using Internet standard dotted-decimal notation or an IPv6 address using
            the Internet standard hexadecimal encoding. An IPv6 scope ID may be present in the network string. A network port or prefix must
            not be present in the network string. This type matches either the NET_STRING_IPV4_ADDRESS or NET_STRING_IPV6_ADDRESS types.
            </term>
            </item>
            <item>
            <term>NET_STRING_IP_ADDRESS_NO_SCOPE 0x00000011</term>
            <term>
            The NetworkString parameter points to an IPv4 address using Internet standard dotted-decimal notation or an IPv6 address using
            Internet standard hexadecimal encoding. An IPv6 scope ID must not be present in the network string. A network port or prefix must
            not be present in the network string. This type matches either the NET_STRING_IPV4_ADDRESS or NET_STRING_IPV6_ADDRESS_NO_SCOPE types.
            </term>
            </item>
            <item>
            <term>NET_STRING_IP_SERVICE 0x00000022</term>
            <term>
            The NetworkString parameter points to an IPv4 service or IPv6 service. A network port is required as part of the network string.
            An IPv6 scope ID may be present in the network string. A prefix must not be present in the network string. This type matches
            either the NET_STRING_IPV4_SERVICE or NET_STRING_IPV6_SERVICE types.
            </term>
            </item>
            <item>
            <term>NET_STRING_IP_SERVICE_NO_SCOPE 0x00000042</term>
            <term>
            The NetworkString parameter points to an IPv4 service or IPv6 service. A network port is required as part of the network string.
            An IPv6 scope ID must not be present in the network string. A prefix must not be present in the network string. This type matches
            either the NET_STRING_IPV4_SERVICE or NET_STRING_IPV6_SERVICE_NO_SCOPE types.
            </term>
            </item>
            <item>
            <term>NET_STRING_IP_NETWORK 0x00000084</term>
            <term>
            The NetworkString parameter points to an IPv4 or IPv6 network. A network prefix in CIDR notation is required as part of the
            network string. A network port or scope ID must not be present in the network. This type matches either the
            NET_STRING_IPV4_NETWORK or NET_STRING_IPV6_NETWORK types.
            </term>
            </item>
            <item>
            <term>NET_STRING_ANY_ADDRESS 0x00000209</term>
            <term>
            The NetworkString parameter points to an IPv4 address in Internet standard dotted-decimal notation, an IPv6 address in Internet
            standard hexadecimal encoding, or a DNS name. An IPv6 scope ID may be present in the network string for an IPv6 address. A
            network port or prefix must not be present in the network string. This type matches either the NET_STRING_NAMED_ADDRESS or
            NET_STRING_IP_ADDRESS types.
            </term>
            </item>
            <item>
            <term>NET_STRING_ANY_ADDRESS_NO_SCOPE 0x00000211</term>
            <term>
            The NetworkString parameter points to an IPv4 address in Internet standard dotted-decimal notation, an IPv6 address in Internet
            standard hexadecimal encoding, or a DNS name. An IPv6 scope ID must not be present in the network string for an IPv6 address. A
            network port or prefix must not be present in the network string. This type matches either the NET_STRING_NAMED_ADDRESS or
            NET_STRING_IP_ADDRESS_NO_SCOPE types.
            </term>
            </item>
            <item>
            <term>NET_STRING_ANY_SERVICE 0x00000222</term>
            <term>
            The NetworkString parameter points to an IPv4 service or IPv6 service using IP address notation or a DNS name. A network port is
            required as part of the network string. An IPv6 scope ID may be present in the network string. A prefix must not be present in
            the network string. This type matches either the NET_STRING_NAMED_SERVICE or NET_STRING_IP_SERVICE types.
            </term>
            </item>
            <item>
            <term>NET_STRING_ANY_SERVICE_NO_SCOPE 0x00000242</term>
            <term>
            The NetworkString parameter points to an IPv4 service or IPv6 service using IP address notation or a DNS name. A network port is
            required as part of the network string. An IPv6 scope ID must not be present in the network string. A prefix must not be present
            in the network string. This type matches either the NET_STRING_NAMED_SERVICE or NET_STRING_IP_SERVICE_NO_SCOPE types.
            </term>
            </item>
            </list>
            </param>
            <param name="AddressInfo">
            On success, the function returns a pointer to a <c>NET_ADDRESS_INFO</c> structure that contains the parsed IP address information
            if a <c>NULL</c> pointer was not passed in this parameter.
            </param>
            <param name="PortNumber">
            On success, the function returns a pointer to the parsed network port in host order if a <c>NULL</c> pointer was not passed in
            this parameter. If a network port was not present in the NetworkString parameter, then a pointer to a value of zero is returned.
            </param>
            <param name="PrefixLength">
            On success, the function returns a pointer to the parsed prefix length if a <c>NULL</c> pointer was not passed in this parameter.
            If a prefix was not present in the NetworkString parameter, then a pointer to a value of -1 is returned.
            </param>
            <returns>
            <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The buffer passed to the function is too small. This error is returned if the buffer pointed to by the AddressInfo parameter is
            too small to hold the parsed network address.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the NetworkString parameter
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>ParseNetworkString</c> function parses the input network string passed in the NetworkString parameter and checks whether
            it is a legal representation of one of the string types as specified in the Types argument. If the string matches a type and its
            specification, the function succeeds and can optionally return the parsed result to the caller in the optional AddressInfo,
            PortNumber, and PrefixLength parameters when these parameters are not <c>NULL</c> pointers.
            </para>
            <para>
            The <c>ParseNetworkString</c> function can parse representations of IPv4 or IPv6 addresses, services, and networks, as well as
            named Internet addresses and services using DNS names.
            </para>
            <para>
            The SOCKADDR_IN, SOCKADDR_IN6, and SOCKADDR structures are used in the NET_ADDRESS_INFO structure pointed to by the AddressInfo
            parameter. The SOCKADDR_IN and SOCKADDR structures are defined in the Ws2def.h header file which is automatically included by the
            Winsock2.h header file. The SOCKADDR_IN6 structure is defined in the Ws2ipdef.h header file which is automatically included by
            the Ws2tcpip.h header file. In order to use the <c>ParseNetworkString</c> function and the <c>NET_ADDRESS_INFO</c> structure, the
            Winsock2.h and Ws2tcpip.h header files must be included before the IpHlpApi.h header file.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.ParseNetworkString(System.String,Vanara.PInvoke.IpHlpApi.NET_STRING,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            The <c>ParseNetworkString</c> function parses the input network string and checks whether it is a legal representation of the
            specified IP network string type. If the string matches a type and its specification, the function can optionally return the
            parsed result.
            </summary>
            <param name="NetworkString">A pointer to the NULL-terminated network string to parse.</param>
            <param name="Types">
            <para>
            The type of IP network string to parse. This parameter consists of one of network string types as defined in the IpHlpApi.h
            header file.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NET_STRING_IPV4_ADDRESS 0x00000001</term>
            <term>
            The NetworkString parameter points to an IPv4 address using Internet standard dotted-decimal notation. A network port or prefix
            must not be present in the network string. An example network string is the following: 192.168.100.10
            </term>
            </item>
            <item>
            <term>NET_STRING_IPV4_SERVICE 0x00000002</term>
            <term>
            The NetworkString parameter points to an IPv4 service using Internet standard dotted-decimal notation. A network port is required
            as part of the network string. A prefix must not be present in the network string. An example network string is the following: 192.168.100.10:80
            </term>
            </item>
            <item>
            <term>NET_STRING_IPV4_NETWORK 0x00000004</term>
            <term>
            The NetworkString parameter points to an IPv4 network using Internet standard dotted-decimal notation. A network prefix that uses
            the Classless Inter-Domain Routing (CIDR) notation is required as part of the network string. A network port must not be present
            in the network string. An example network string is the following: 192.168.100/24
            </term>
            </item>
            <item>
            <term>NET_STRING_IPV6_ADDRESS 0x00000008</term>
            <term>
            The NetworkString parameter points to an IPv6 address using Internet standard hexadecimal encoding. An IPv6 scope ID may be
            present in the network string. A network port or prefix must not be present in the network string. An example network string is
            the following: 21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A%2
            </term>
            </item>
            <item>
            <term>NET_STRING_IPV6_ADDRESS_NO_SCOPE 0x00000008</term>
            <term>
            The NetworkString parameter points to an IPv6 address using Internet standard hexadecimal encoding. An IPv6 scope ID must not be
            present in the network string. A network port or prefix must not be present in the network string. An example network string is
            the following: 21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A
            </term>
            </item>
            <item>
            <term>NET_STRING_IPV6_SERVICE 0x00000020</term>
            <term>
            The NetworkString parameter points to an IPv6 service using Internet standard hexadecimal encoding. A network port is required as
            part of the network string. An IPv6 scope ID may be present in the network string. A prefix must not be present in the network
            string. An example network string with a scope ID is the following: [21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A%2]:8080
            </term>
            </item>
            <item>
            <term>NET_STRING_IPV6_SERVICE_NO_SCOPE 0x00000040</term>
            <term>
            The NetworkString parameter points to an IPv6 service using Internet standard hexadecimal encoding. A network port is required as
            part of the network string. An IPv6 scope ID must not be present in the network string. A prefix must not be present in the
            network string. An example network string is the following: 21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A:8080
            </term>
            </item>
            <item>
            <term>NET_STRING_IPV6_NETWORK 0x00000080</term>
            <term>
            The NetworkString parameter points to an IPv6 network using Internet standard hexadecimal encoding. A network prefix in CIDR
            notation is required as part of the network string. A network port or scope ID must not be present in the network string. An
            example network string is the following: 21DA:D3::/48
            </term>
            </item>
            <item>
            <term>NET_STRING_NAMED_ADDRESS 0x00000100</term>
            <term>
            The NetworkString parameter points to an Internet address using a Domain Name System (DNS) name. A network port or prefix must
            not be present in the network string. An example network string is the following: www.microsoft.com
            </term>
            </item>
            <item>
            <term>NET_STRING_NAMED_SERVICE 0x00000200</term>
            <term>
            The NetworkString parameter points to an Internet service using a DNS name. A network port must be present in the network string.
            An example network string is the following: www.microsoft.com:80
            </term>
            </item>
            <item>
            <term>NET_STRING_IP_ADDRESS 0x00000009</term>
            <term>
            The NetworkString parameter points to an IPv4 address using Internet standard dotted-decimal notation or an IPv6 address using
            the Internet standard hexadecimal encoding. An IPv6 scope ID may be present in the network string. A network port or prefix must
            not be present in the network string. This type matches either the NET_STRING_IPV4_ADDRESS or NET_STRING_IPV6_ADDRESS types.
            </term>
            </item>
            <item>
            <term>NET_STRING_IP_ADDRESS_NO_SCOPE 0x00000011</term>
            <term>
            The NetworkString parameter points to an IPv4 address using Internet standard dotted-decimal notation or an IPv6 address using
            Internet standard hexadecimal encoding. An IPv6 scope ID must not be present in the network string. A network port or prefix must
            not be present in the network string. This type matches either the NET_STRING_IPV4_ADDRESS or NET_STRING_IPV6_ADDRESS_NO_SCOPE types.
            </term>
            </item>
            <item>
            <term>NET_STRING_IP_SERVICE 0x00000022</term>
            <term>
            The NetworkString parameter points to an IPv4 service or IPv6 service. A network port is required as part of the network string.
            An IPv6 scope ID may be present in the network string. A prefix must not be present in the network string. This type matches
            either the NET_STRING_IPV4_SERVICE or NET_STRING_IPV6_SERVICE types.
            </term>
            </item>
            <item>
            <term>NET_STRING_IP_SERVICE_NO_SCOPE 0x00000042</term>
            <term>
            The NetworkString parameter points to an IPv4 service or IPv6 service. A network port is required as part of the network string.
            An IPv6 scope ID must not be present in the network string. A prefix must not be present in the network string. This type matches
            either the NET_STRING_IPV4_SERVICE or NET_STRING_IPV6_SERVICE_NO_SCOPE types.
            </term>
            </item>
            <item>
            <term>NET_STRING_IP_NETWORK 0x00000084</term>
            <term>
            The NetworkString parameter points to an IPv4 or IPv6 network. A network prefix in CIDR notation is required as part of the
            network string. A network port or scope ID must not be present in the network. This type matches either the
            NET_STRING_IPV4_NETWORK or NET_STRING_IPV6_NETWORK types.
            </term>
            </item>
            <item>
            <term>NET_STRING_ANY_ADDRESS 0x00000209</term>
            <term>
            The NetworkString parameter points to an IPv4 address in Internet standard dotted-decimal notation, an IPv6 address in Internet
            standard hexadecimal encoding, or a DNS name. An IPv6 scope ID may be present in the network string for an IPv6 address. A
            network port or prefix must not be present in the network string. This type matches either the NET_STRING_NAMED_ADDRESS or
            NET_STRING_IP_ADDRESS types.
            </term>
            </item>
            <item>
            <term>NET_STRING_ANY_ADDRESS_NO_SCOPE 0x00000211</term>
            <term>
            The NetworkString parameter points to an IPv4 address in Internet standard dotted-decimal notation, an IPv6 address in Internet
            standard hexadecimal encoding, or a DNS name. An IPv6 scope ID must not be present in the network string for an IPv6 address. A
            network port or prefix must not be present in the network string. This type matches either the NET_STRING_NAMED_ADDRESS or
            NET_STRING_IP_ADDRESS_NO_SCOPE types.
            </term>
            </item>
            <item>
            <term>NET_STRING_ANY_SERVICE 0x00000222</term>
            <term>
            The NetworkString parameter points to an IPv4 service or IPv6 service using IP address notation or a DNS name. A network port is
            required as part of the network string. An IPv6 scope ID may be present in the network string. A prefix must not be present in
            the network string. This type matches either the NET_STRING_NAMED_SERVICE or NET_STRING_IP_SERVICE types.
            </term>
            </item>
            <item>
            <term>NET_STRING_ANY_SERVICE_NO_SCOPE 0x00000242</term>
            <term>
            The NetworkString parameter points to an IPv4 service or IPv6 service using IP address notation or a DNS name. A network port is
            required as part of the network string. An IPv6 scope ID must not be present in the network string. A prefix must not be present
            in the network string. This type matches either the NET_STRING_NAMED_SERVICE or NET_STRING_IP_SERVICE_NO_SCOPE types.
            </term>
            </item>
            </list>
            </param>
            <param name="AddressInfo">
            On success, the function returns a pointer to a <c>NET_ADDRESS_INFO</c> structure that contains the parsed IP address information
            if a <c>NULL</c> pointer was not passed in this parameter.
            </param>
            <param name="PortNumber">
            On success, the function returns a pointer to the parsed network port in host order if a <c>NULL</c> pointer was not passed in
            this parameter. If a network port was not present in the NetworkString parameter, then a pointer to a value of zero is returned.
            </param>
            <param name="PrefixLength">
            On success, the function returns a pointer to the parsed prefix length if a <c>NULL</c> pointer was not passed in this parameter.
            If a prefix was not present in the NetworkString parameter, then a pointer to a value of -1 is returned.
            </param>
            <returns>
            <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INSUFFICIENT_BUFFER</term>
            <term>
            The buffer passed to the function is too small. This error is returned if the buffer pointed to by the AddressInfo parameter is
            too small to hold the parsed network address.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the NetworkString parameter
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>ParseNetworkString</c> function parses the input network string passed in the NetworkString parameter and checks whether
            it is a legal representation of one of the string types as specified in the Types argument. If the string matches a type and its
            specification, the function succeeds and can optionally return the parsed result to the caller in the optional AddressInfo,
            PortNumber, and PrefixLength parameters when these parameters are not <c>NULL</c> pointers.
            </para>
            <para>
            The <c>ParseNetworkString</c> function can parse representations of IPv4 or IPv6 addresses, services, and networks, as well as
            named Internet addresses and services using DNS names.
            </para>
            <para>
            The SOCKADDR_IN, SOCKADDR_IN6, and SOCKADDR structures are used in the NET_ADDRESS_INFO structure pointed to by the AddressInfo
            parameter. The SOCKADDR_IN and SOCKADDR structures are defined in the Ws2def.h header file which is automatically included by the
            Winsock2.h header file. The SOCKADDR_IN6 structure is defined in the Ws2ipdef.h header file which is automatically included by
            the Ws2tcpip.h header file. In order to use the <c>ParseNetworkString</c> function and the <c>NET_ADDRESS_INFO</c> structure, the
            Winsock2.h and Ws2tcpip.h header files must be included before the IpHlpApi.h header file.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.PhysicalAddressToString(System.Byte[])">
            <summary>Converts a 6 byte Physical Address (MAC) to string.</summary>
            <param name="physAddr">The physical address that must have a minimum of 6 values.</param>
            <returns>Dashed hex value string representation of a Physical Address (MAC).</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.PhysicalAddressToString(System.Byte*)">
            <inheritdoc cref="M:Vanara.PInvoke.IpHlpApi.PhysicalAddressToString(System.Byte[])"/>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.RestoreMediaSense(System.Threading.NativeOverlapped*,System.UInt32@)">
            <summary>
            The <c>RestoreMediaSense</c> function restores the media sensing capability of the TCP/IP stack on a local computer on which the
            DisableMediaSense function was previously called.
            </summary>
            <param name="pOverlapped">
            A pointer to an OVERLAPPED structure. Except for the <c>hEvent</c> member, all members of this structure must be set to zero. The
            <c>hEvent</c> member should contain a handle to a valid event object. Use the CreateEvent function to create this event object.
            </param>
            <param name="lpdwEnableCount">
            An optional pointer to a DWORD variable that receives the number of references remaining if the <c>RestoreMediaSense</c> function
            succeeds. The variable is also used by the EnableRouter and UnenableRouter functions.
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if an pOverlapped parameter is a bad pointer. This error
            is also returned if the DisableMediaSense function was not called prior to calling the RestoreMediaSense function.
            </term>
            </item>
            <item>
            <term>ERROR_IO_PENDING</term>
            <term>The operation is in progress. This value may be returned by a successful asynchronous call to RestoreMediaSense.</term>
            </item>
            <item>
            <term>ERROR_OPEN_FAILED</term>
            <term>An internal handle to the driver was invalid.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>If the pOverlapped parameter is <c>NULL</c>, the <c>RestoreMediaSense</c> function is executed synchronously.</para>
            <para>
            If the pOverlapped parameter is not <c>NULL</c>, the <c>RestoreMediaSense</c> function is executed asynchronously using the
            OVERLAPPED structure pointed to by the pOverlapped parameter.
            </para>
            <para>
            The DisableMediaSense function does not complete until the <c>RestoreMediaSense</c> function is called later to restore the media
            sensing capability. Until then, an I/O request packet (IRP) remains queued up. Alternatively, when the process that called
            <c>DisableMediaSense</c> exits, the IRP is canceled and a cancel routine is called that would again restore the media sensing capability.
            </para>
            <para>
            To call <c>RestoreMediaSense</c> synchronously, an application needs to pass a <c>NULL</c> pointer in the pOverlapped parameter.
            When <c>RestoreMediaSense</c> is called synchronously, the function returns when the I/O request packet (IRP) to restore the
            media sense has completed.
            </para>
            <para>
            To call <c>RestoreMediaSense</c> asynchronously, an application needs to allocate an OVERLAPPED structure. Except for the
            <c>hEvent</c> member, all members of this structure must be set to zero. The <c>hEvent</c> member requires a handle to a valid
            event object. Use the CreateEvent function to create this event. When called asynchronously, <c>RestoreMediaSense</c> can return
            return ERROR_IO_PENDING. The IRP completes when the media sensing capability has been restored. Use the CloseHandle function to
            close the handle to the event object when it is no longer needed. The system closes the handle automatically when the process
            terminates. The event object is destroyed when its last handle has been closed.
            </para>
            <para>If DisableMediaSense was not called prior to calling <c>RestoreMediaSense</c>, then <c>RestoreMediaSense</c> returns ERROR_INVALID_PARAMETER.</para>
            <para>
            On Windows Server 2003and Windows XP, the TCP/IP stack implements a policy of deleting all IP addresses on an interface in
            response to a media sense disconnect event from an underlying network interface. If a network switch or hub that the local
            computer is connected to is powered off, or a network cable is disconnected, the network interface will deliver disconnection
            events. IP configuration information associated with the network interface is lost. As a result, the TCP/IP stack implements a
            policy of hiding disconnected interfaces so these interfaces and their associated IP addresses do not show up in configuration
            information retrieved through IP helper. This policy prevents some applications from easily detecting that a network interface is
            merely disconnected, rather than removed from the system.
            </para>
            <para>
            This behavior does not normally impact a local client computer if it is using DHCP requests to a DHCP server for IP configuration
            information. But this can have a serious impact on server computers, particularly computers used as part of clusters. The
            DisableMediaSense function can be used to temporarily disable the media sense capability for these cases. At some later time, the
            <c>RestoreMediaSense</c> function would be called to restore the media sensing capability.
            </para>
            <para>The following registry setting is related to the DisableMediaSense and <c>RestoreMediaSense</c> functions:</para>
            <para><c>System</c>&lt;b&gt;CurrentControlSet&lt;b&gt;Services&lt;b&gt;Tcpip&lt;b&gt;Parameters&lt;b&gt;DisableDHCPMediaSense</para>
            <para>
            There is an internal flag in Windows that is set if this registry key exists when the machine first boots up. The same internal
            flag also gets set and reset by calling DisableMediaSense and <c>RestoreMediaSense</c>. However with registry setting, you need
            to reboot the machine for the changes to take place.
            </para>
            <para>
            The TCP/IP stack on Windows Vista and later was changed to not hide disconnected interfaces when a disconnect event occurs. So on
            Windows Vista and later, the DisableMediaSense and <c>RestoreMediaSense</c> functions don't do anything and always returns NO_ERROR.
            </para>
            <para>Examples</para>
            <para>
            The following example shows how to call the DisableMediaSense and <c>RestoreMediaSense</c> functions synchronously. This sample
            is only useful on Windows Server 2003and Windows XP where the <c>DisableMediaSense</c> and <c>RestoreMediaSense</c> functions do
            something useful.
            </para>
            <para>
            The sample first creates a separate thread that calls the DisableMediaSense function synchronously, the main thread sleeps for 60
            seconds to allow the user to disconnect a network cable, retrieves the IP address table and prints some members of the IP address
            entries in the table, calls the <c>RestoreMediaSense</c> function synchronously, retrieves the IP address table again, and prints
            some members of the IP address entries in the table. The impact of disabling the media sensing capability can be seen in the
            difference in the IP address table entries.
            </para>
            <para>
            For an example that shows how to call the DisableMediaSense and <c>RestoreMediaSense</c> functions asynchronously, see the
            <c>DisableMediaSense</c> function reference.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SendARP(Vanara.PInvoke.Ws2_32.IN_ADDR,Vanara.PInvoke.Ws2_32.IN_ADDR,System.Byte[],System.UInt32@)">
            <summary>
            <para>
            The <c>SendARP</c> function sends an Address Resolution Protocol (ARP) request to obtain the physical address that corresponds to
            the specified destination IPv4 address.
            </para>
            </summary>
            <param name="DestIP">
            <para>
            The destination IPv4 address, in the form of an IPAddr structure. The ARP request attempts to obtain the physical address that
            corresponds to this IPv4 address.
            </para>
            </param>
            <param name="SrcIP">
            <para>
            The source IPv4 address of the sender, in the form of an IPAddr structure. This parameter is optional and is used to select the
            interface to send the request on for the ARP entry. The caller may specify zero corresponding to the <c>INADDR_ANY</c> IPv4
            address for this parameter.
            </para>
            </param>
            <param name="pMacAddr">
            <para>
            A pointer to an array of <c>ULONG</c> variables. This array must have at least two <c>ULONG</c> elements to hold an Ethernet or
            token ring physical address. The first six bytes of this array receive the physical address that corresponds to the IPv4 address
            specified by the DestIP parameter.
            </para>
            </param>
            <param name="PhyAddrLen">
            <para>
            On input, a pointer to a <c>ULONG</c> value that specifies the maximum buffer size, in bytes, the application has set aside to
            receive the physical address or MAC address. The buffer size should be at least 6 bytes for an Ethernet or token ring physical address
            </para>
            <para>The buffer to receive the physical address is pointed to by the pMacAddr parameter.</para>
            <para>
            On successful output, this parameter points to a value that specifies the number of bytes written to the buffer pointed to by the pMacAddr.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_BAD_NET_NAME</term>
            <term>
            The network name cannot be found. This error is returned on Windows Vista and later when an ARP reply to the SendARP request was
            not received. This error occurs if the destination IPv4 address could not be reached because it is not on the same subnet or the
            destination computer is not operating.
            </term>
            </item>
            <item>
            <term>ERROR_BUFFER_OVERFLOW</term>
            <term>
            The file name is too long. This error is returned on Windows Vista if the ULONG value pointed to by the PhyAddrLen parameter is
            less than 6, the size required to store a complete physical address.
            </term>
            </item>
            <item>
            <term>ERROR_GEN_FAILURE</term>
            <term>
            A device attached to the system is not functioning. This error is returned on Windows Server 2003 and earlier when an ARP reply
            to the SendARP request was not received. This error can occur if destination IPv4 address could not be reached because it is not
            on the same subnet or the destination computer is not operating.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            One of the parameters is invalid. This error is returned on Windows Server 2003 and earlier if either the pMacAddr or PhyAddrLen
            parameter is a NULL pointer.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_USER_BUFFER</term>
            <term>
            The supplied user buffer is not valid for the requested operation. This error is returned on Windows Server 2003 and earlier if
            the ULONG value pointed to by the PhyAddrLen parameter is zero.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            Element not found. This error is returned on Windows Vista if the the SrcIp parameter does not specify a source IPv4 address on
            an interface on the local computer or the INADDR_ANY IP address (an IPv4 address of 0.0.0.0).
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The SendARP function is not supported by the operating system running on the local computer.</term>
            </item>
            <item>
            <term>Other</term>
            <term>If the function fails, use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>SendARP</c> function is used to request the physical hardware address (sometimes referred to as the MAC address) that
            corresponds to a specified destination IPv4 address. If the information requested is not in the ARP table on the local computer,
            then the <c>SendARP</c> function will cause an ARP request to be sent to obtain the physical address. If the function is
            successful, the physical address that corresponds to the specified destination IPv4 address is returned in the array pointed to
            by the pMacAddr parameter.
            </para>
            <para>
            The physical address of an IPv4 address is only available if the destination IPv4 address is on the local subnet (the IPv4
            address can be reached directly without going through any routers). The <c>SendARP</c> function will fail if the destination IPv4
            address is not on the local subnet.
            </para>
            <para>
            If the <c>SendARP</c> function is successful on Windows Vista and later, the ARP table on the local computer is updated with the
            results. If the <c>SendARP</c> function is successful on Windows Server 2003 and earlier, the ARP table on the local computer is
            not affected.
            </para>
            <para>
            The <c>SendARP</c> function on Windows Vista and later returns different error return values than the <c>SendARP</c> function on
            Windows Server 2003 and earlier.
            </para>
            <para>
            On Windows Vista and later, a <c>NULL</c> pointer passed as the pMacAddr or PhyAddrLen parameter to the <c>SendARP</c> function
            causes an access violation and the application is terminated. If an error occurs on Windows Vista and later and
            <c>ERROR_BAD_NET_NAME</c>, <c>ERROR_BUFFER_OVERFLOW</c>, or <c>ERROR_NOT_FOUND</c> is returned, the <c>ULONG</c> value pointed to
            by the PhyAddrLen parameter is set to zero. If the <c>ULONG</c> value pointed to by the PhyAddrLen parameter is less than 6 on
            Windows Vista and later, <c>SendARP</c> function returns <c>ERROR_BUFFER_OVERFLOW</c> indicating the buffer to receive the
            physical address is too small. If the SrcIp parameter specifies an IPv4 address that is not an interface on the local computer,
            the <c>SendARP</c> function on Windows Vista and later returns <c>ERROR_NOT_FOUND</c>.
            </para>
            <para>
            On Windows Server 2003 and earlier, a <c>NULL</c> pointer passed as the pMacAddr or PhyAddrLen parameter to the <c>SendARP</c>
            function returns <c>ERROR_INVALID_PARAMETER</c>. If an error occurs on Windows Server 2003 and earlier and
            <c>ERROR_GEN_FAILURE</c> or <c>ERROR_INVALID_USER_BUFFER</c> is returned, the <c>ULONG</c> value pointed to by the PhyAddrLen
            parameter is set to zero. If the <c>ULONG</c> value pointed to by the PhyAddrLen parameter is less than 6 on Windows Server 2003
            and earlier, the <c>SendARP</c> function does not return an error but only returns part of the hardware address in the array
            pointed to by the pMacAddr parameter. So if the value pointed to by the PhyAddrLen parameter is 4, then only the first 4 bytes of
            the hardware address are returned in the array pointed to by the pMacAddr parameter. If the SrcIp parameter specifies an IPv4
            address that is not an interface on the local computer, the <c>SendARP</c> function on Windows Server 2003 and earlier ignores
            the SrcIp parameter and uses an IPv4 address on the local computer for the source IPv4 address.
            </para>
            <para>The GetIpNetTable function retrieves the ARP table on the local computer that maps IPv4 addresses to physical addresses.</para>
            <para>The CreateIpNetEntry function creates an ARP entry in the ARP table on the local computer.</para>
            <para>The DeleteIpNetEntry function deletes an ARP entry from the ARP table on the local computer.</para>
            <para>The SetIpNetEntry function modifies an existing ARP entry in the ARP table on the local computer.</para>
            <para>The FlushIpNetTable function deletes all ARP entries for the specified interface from the ARP table on the local computer.</para>
            <para>
            On Windows Vista and later, the ResolveIpNetEntry2 function can used to replace the <c>SendARP</c> function. An ARP request is
            sent if the <c>Address</c> member of the MIB_IPNET_ROW2 structure passed to the <c>ResolveIpNetEntry2</c> function is an IPv4 address.
            </para>
            <para>
            On Windows Vista, a new group of functions can be used to access, modify, and delete the ARP table entries when the
            <c>Address</c> member of the MIB_IPNET_ROW2 structure passed to these functions is an IPv4 address. The new functions include the
            following: GetIpNetTable2, CreateIpNetEntry2, DeleteIpNetEntry2, FlushIpNetTable2, and SetIpNetEntry2.
            </para>
            <para>
            For information about the <c>IPAddr</c> data type, see Windows Data Types. To convert an IP address between dotted decimal
            notation and <c>IPAddr</c> format, use the inet_addr and inet_ntoa functions.
            </para>
            <para>Examples</para>
            <para>
            The following code demonstrates how to obtain the hardware or media access control (MAC) address associated with a specified IPv4 address.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SendARP(Vanara.PInvoke.Ws2_32.IN_ADDR,Vanara.PInvoke.Ws2_32.IN_ADDR)">
            <summary>
            The SendARP function sends an Address Resolution Protocol (ARP) request to obtain the physical address that corresponds to the
            specified destination IPv4 address.
            </summary>
            <param name="DestIP">
            The destination IPv4 address, in the form of an IPAddr structure. The ARP request attempts to obtain the physical address that
            corresponds to this IPv4 address.
            </param>
            <param name="SrcIP">
            The source IPv4 address of the sender, in the form of an IPAddr structure. This parameter is optional and is used to select the
            interface to send the request on for the ARP entry. The caller may specify zero corresponding to the INADDR_ANY IPv4 address for
            this parameter.
            </param>
            <returns>The physical address that corresponds to the IPv4 address specified by the DestIP parameter.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetIfEntry(Vanara.PInvoke.IpHlpApi.MIB_IFROW@)">
            <summary>The <c>SetIfEntry</c> function sets the administrative status of an interface.</summary>
            <param name="pIfRow">
            <para>
            A pointer to a MIB_IFROW structure. The <c>dwIndex</c> member of this structure specifies the interface on which to set
            administrative status. The <c>dwAdminStatus</c> member specifies the new administrative status. The <c>dwAdminStatus</c> member
            can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MIB_IF_ADMIN_STATUS_UP</term>
            <term>The interface is administratively enabled.</term>
            </item>
            <item>
            <term>MIB_IF_ADMIN_STATUS_DOWN</term>
            <term>The interface is administratively disabled.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned on Windows Vista and later under several conditions that include the following: the user
            lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the
            built-in Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            The system cannot find the file specified. This error is returned on Windows Vista and later if the network interface specified
            by the dwIndex member of the MIB_IFROW structure pointed to by the pIfRow parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the pIfRow parameter, or
            the dwIndex member of the MIB_IFROW pointed to by the pIfRow parameter was unspecified. This error is also returned on Windows
            Server 2003 and earlier if the network interface specified by the dwIndex member of the MIB_IFROW structure pointed to by the
            pIfRow parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned on Windows Server 2003 and earlier if no TCP/IP stack is configured on the
            local computer.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>SetIfEntry</c> function is used to set the administrative status of an interface on a local computer.</para>
            <para>
            The <c>dwIndex</c> member in the MIB_IFROW structure pointed to by the pIfRow parameter must be initialized to the interface index.
            </para>
            <para>
            The <c>SetIfEntry</c> function will fail if the <c>dwIndex</c> member of the MIB_IFROW pointed to by the pIfRow parameter does
            not match an existing interface on the local computer.
            </para>
            <para>
            On Windows Vista and later, the <c>SetIfEntry</c> function can only be called by a user logged on as a member of the
            Administrators group. If <c>SetIfEntry</c> is called by a user that is not a member of the Administrators group, the function
            call will fail and <c>ERROR_ACCESS_DENIED</c> is returned.
            </para>
            <para>
            The <c>SetIfEntry</c> function can also fail because of user account control (UAC) on Windows Vista and later. If an application
            that contains this function is executed by a user logged on as a member of the Administrators group other than the built-in
            Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>
            <c>Note</c> On Windows NT 4.0 and Windows 2000 and later, this function executes a privileged operation. For this function to
            execute successfully, the caller must be logged on as a member of the Administrators group or the NetworkConfigurationOperators group.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetIpForwardEntry(Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW@)">
            <summary>The <c>SetIpForwardEntry</c> function modifies an existing route in the local computer's IPv4 routing table.</summary>
            <param name="pRoute">
            A pointer to a MIB_IPFORWARDROW structure that specifies the new information for the existing route. The caller must specify
            <c>MIB_IPPROTO_NETMGMT</c> for the <c>dwForwardProto</c> member of this structure. The caller must also specify values for the
            <c>dwForwardIfIndex</c>, <c>dwForwardDest</c>, <c>dwForwardMask</c>, <c>dwForwardNextHop</c>, and <c>dwForwardPolicy</c> members
            of the structure.
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the
            following: the user lacks the required administrative privileges on the local computer or the application is not running in an
            enhanced shell as the built-in Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            The system cannot find the file specified. This error is returned on Windows Vista and later if the network interface specified
            by the dwForwardIfIndex member of the MIB_IPFORWARDROW structure pointed to by the pRoute parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            The pRoute parameter is NULL, or SetIpForwardEntry is unable to read from the memory pointed to by pRoute, or one of the members
            of the MIB_IPFORWARDROW structure is invalid.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The element is not found. The error is returned on Windows Vista and later when the DeleteIpForwardEntry function and then the
            SetIpForwardEntry function are called for the same IPv4 route table entry.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This value is returned if the IPv4 transport is not configured on the local computer. This error is
            also returned on Windows Server 2003 and earlier if no TCP/IP stack is configured on the local computer.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>dwForwardProto</c> member of MIB_IPFORWARDROW structure pointed to by the route parameter must be set to
            <c>MIB_IPPROTO_NETMGMT</c> otherwise <c>SetIpForwardEntry</c> will fail. Routing protocol identifiers are used to identify route
            information for the specified routing protocol. For example, <c>MIB_IPPROTO_NETMGMT</c> is used to identify route information for
            IP routing set through network management such as the Dynamic Host Configuration Protocol (DHCP), the Simple Network Management
            Protocol (SNMP), or by calls to the CreateIpForwardEntry, DeleteIpForwardEntry, or <c>SetIpForwardEntry</c> functions.
            </para>
            <para>
            On Windows Vista and Windows Server 2008, the route metric specified in the <c>dwForwardMetric1</c> member of the
            MIB_IPFORWARDROW structure pointed to by pRoute parameter represents a combination of the route metric added to the interface
            metric specified in the <c>Metric</c> member of the MIB_IPINTERFACE_ROW structure of the associated interface. So the
            <c>dwForwardMetric1</c> member of the <c>MIB_IPFORWARDROW</c> structure should be equal to or greater than <c>Metric</c> member
            of the associated <c>MIB_IPINTERFACE_ROW</c> structure. If an application would like to set the route metric to 0, then the
            <c>dwForwardMetric1</c> member of the <c>MIB_IPFORWARDROW</c> structure should be set equal to the value of the interface metric
            specified in the <c>Metric</c> member of the associated <c>MIB_IPINTERFACE_ROW</c> structure. An application can retrieve the
            interface metric by calling the GetIpInterfaceEntry function.
            </para>
            <para>
            On Windows Vista and Windows Server 2008, the <c>SetIpForwardEntry</c> function only works on interfaces with a single
            sub-interface (where the interface LUID and subinterface LUID are the same). The <c>dwForwardIfIndex</c> member of the
            MIB_IPFORWARDROW structure specifies the interface.
            </para>
            <para>
            The <c>dwForwardAge</c> member the MIB_IPFORWARDROW structure pointed to by the route parameter is not currently used by
            <c>SetIpForwardEntry</c>. The <c>dwForwardAge</c> member is used only if the Routing and Remote Access Service (RRAS)is running,
            and then only for routes of type <c>MIB_IPPROTO_NETMGMT</c> as defined on the Protocol Identifiers reference page. When
            <c>dwForwardAge</c> is set to <c>INFINITE</c>, the route will not be removed based on a timeout
            </para>
            <para>
            value. Any other value for <c>dwForwardAge</c> specifies the number of seconds until the TCP/IP stack will remove the route from
            the network routing table.
            </para>
            <para>A route modified by <c>SetIpForwardEntry</c> will automatically have a default value for <c>dwForwardAge</c> of INFINITE.</para>
            <para>
            A number of members of the MIB_IPFORWARDROW structure pointed to by the route parameter are not currently used by
            <c>SetIpForwardEntry</c>. These members include <c>dwForwardPolicy</c>, <c>dwForwardType</c>, <c>dwForwardAge</c>,
            <c>dwForwardNextHopAS</c>, <c>dwForwardMetric1</c>, <c>dwForwardMetric2</c>, <c>dwForwardMetric3</c>, <c>dwForwardMetric4</c>,
            and <c>dwForwardMetric5</c>.
            </para>
            <para>
            To create a new route in the IP routing table, use the CreateIpForwardEntry function. To retrieve the IP routing table, call the
            GetIpForwardTable function.
            </para>
            <para>
            On Windows Vista and later, the <c>SetIpForwardEntry</c> function can only be called by a user logged on as a member of the
            Administrators group. If <c>SetIpForwardEntry</c> is called by a user that is not a member of the Administrators group, the
            function call will fail and <c>ERROR_ACCESS_DENIED</c> is returned.
            </para>
            <para>
            This function can also fail because of user account control (UAC) on Windows Vista and later. If an application that contains
            this function is executed by a user logged on as a member of the Administrators group other than the built-in Administrator, this
            call will fail unless the application has been marked in the manifest file with a <c>requestedExecutionLevel</c> set to
            requireAdministrator. If the application lacks this manifest file, a user logged on as a member of the Administrators group other
            than the built-in Administrator must then be executing the application in an enhanced shell as the built-in Administrator (RunAs
            administrator) for this function to succeed.
            </para>
            <para>
            <c>Note</c> On Windows NT 4.0 and Windows 2000 and later, this function executes a privileged operation. For this function to
            execute successfully, the caller must be logged on as a member of the Administrators group or the NetworkConfigurationOperators group.
            </para>
            <para>Examples</para>
            <para>
            The following example demonstrates how to change the default gateway to NewGateway. Simply calling GetIpForwardTable, changing
            the gateway and then calling <c>SetIpForwardEntry</c> will not change the route, but rather will just add a new one. If for some
            reason there are multiple default gateways present, this code will delete them. Note that the new gateway must be viable;
            otherwise, TCP/IP will ignore the change.
            </para>
            <para><c>Note</c> Executing this code will change your IP routing tables and will likely cause network activity to fail.</para>
            <para>
            <c>Windows Vista and later:</c> When the DeleteIpForwardEntry function and then <c>SetIpForwardEntry</c> function are called for
            the same route table entry on Windows Vista and later, ERROR_NOT_FOUND is returned. The proper way to replicate this example on
            Windows Vista and later is to use the CreateIpForwardEntry function to create the new route table entry and then delete the old
            route table entry by calling the <c>DeleteIpForwardEntry</c> function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetIpNetEntry(Vanara.PInvoke.IpHlpApi.MIB_IPNETROW@)">
            <summary>
            <para>The <c>SetIpNetEntry</c> function modifies an existing ARP entry in the ARP table on the local computer.</para>
            </summary>
            <param name="pArpEntry">
            <para>
            A pointer to a MIB_IPNETROW structure. The information in this structure specifies the entry to modify and the new information
            for the entry. The caller must specify values for all members of this structure.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the
            following: the user lacks the required administrative privileges on the local computer or the application is not running in an
            enhanced shell as the built-in Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            The pArpEntry parameter is NULL, or SetIpNetEntry is unable to read from the memory pointed to by pArpEntry, or one of the
            members of the MIB_IPNETROW structure is invalid.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The IPv4 transport is not configured on the local computer.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            On Windows Vista and later , the <c>SetIpNetEntry</c> function can only be called by a user logged on as a member of the
            Administrators group. If <c>SetIpNetEntry</c> is called by a user that is not a member of the Administrators group, the function
            call will fail and <c>ERROR_ACCESS_DENIED</c> is returned.
            </para>
            <para>
            The <c>SetIpNetEntry</c> function can also fail because of user account control (UAC) on Windows Vista and later. If an
            application that contains this function is executed by a user logged on as a member of the Administrators group other than the
            built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>
            <c>Note</c> On Windows NT 4.0 and Windows 2000 and later, this function executes a privileged operation. For this function to
            execute successfully, the caller must be logged on as a member of the Administrators group or the NetworkConfigurationOperators group.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetIpStatistics(Vanara.PInvoke.IpHlpApi.MIB_IPSTATS@)">
            <summary>
            The <c>SetIpStatistics</c> function toggles IP forwarding on or off and sets the default time-to-live (TTL) value for the local computer.
            </summary>
            <param name="pIpStats">
            A pointer to a MIB_IPSTATS structure. The caller should set the <c>dwForwarding</c> and <c>dwDefaultTTL</c> members of this
            structure to the new values. To keep one of the members at its current value, use MIB_USE_CURRENT_TTL or MIB_USE_CURRENT_FORWARDING.
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the
            following: the user lacks the required administrative privileges on the local computer or the application is not running in an
            enhanced shell as the built-in Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the pIpStats parameter.
            This error is also returned if the dwForwarding member in the MIB_IPSTATS structure pointed to by the pIpStats parameter contains
            a value other than MIB_IP_NOT_FORWARDING, MIB_IP_FORWARDING, or MIB_USE_CURRENT_FORWARDING.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>To set only the default TTL, the caller can also use the SetIpTTL function.</para>
            <para>
            On Windows Vista and later, the <c>SetIpStatistics</c> function can only be called by a user logged on as a member of the
            Administrators group. If <c>SetIpStatistics</c> is called by a user that is not a member of the Administrators group, the
            function call will fail and <c>ERROR_ACCESS_DENIED</c> is returned.
            </para>
            <para>
            The <c>SetIpStatistics</c> function can also fail because of user account control (UAC) on Windows Vista and later. If an
            application that contains this function is executed by a user logged on as a member of the Administrators group other than the
            built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>
            <c>Note</c> On Windows NT 4.0 and Windows 2000 and later, this function executes a privileged operation. For this function to
            execute successfully, the caller must be logged on as a member of the Administrators group or the NetworkConfigurationOperators group.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetIpStatisticsEx(Vanara.PInvoke.IpHlpApi.MIB_IPSTATS@,Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY)">
            <summary>
            The <c>SetIpStatisticsEx</c> function toggles IP forwarding on or off and sets the default time-to-live (TTL) value for the local computer.
            </summary>
            <param name="Statistics">
            A pointer to a MIB_IPSTATS structure. The caller should set the <c>dwForwarding</c> and <c>dwDefaultTTL</c> members of this
            structure to the new values. To keep one of the members at its current value, use MIB_USE_CURRENT_TTL or MIB_USE_CURRENT_FORWARDING.
            </param>
            <param name="Family">
            <para>The address family for which forwarding and TTL is to be set.</para>
            <para>
            Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family
            and PF_ protocol family constants are identical (for example, <c>AF_INET</c> and <c>PF_INET</c>), so either constant can be used.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for
            this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h,
            and should never be used directly.
            </para>
            <para>The values currently supported are <c>AF_INET</c>, and <c>AF_INET6</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_INET 2</term>
            <term>
            The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function sets forwarding and TTL
            options for IPv4 entries.
            </term>
            </item>
            <item>
            <term>AF_INET6 23</term>
            <term>
            The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function sets forwarding and TTL
            options for IPv6 entries.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the pIpStats parameter or
            the Family parameter was not set to AF_INET, and AF_INET6. This error is also returned if the dwForwarding member in the
            MIB_IPSTATS structure pointed to by the pIpStats parameter contains a value other than MIB_IP_NOT_FORWARDING, MIB_IP_FORWARDING,
            or MIB_USE_CURRENT_FORWARDING.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and AF_INET was specified in the
            Family parameter or no IPv6 stack is on the local computer and AF_INET6 was specified in the Family member.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>To set only the default TTL, the caller can also use the SetIpTTL function.</para>
            <para>
            The <c>SetIpStatisticsEx</c> function can only be called by a user logged on as a member of the Administrators group. If
            <c>SetIpStatisticsEx</c> is called by a user that is not a member of the Administrators group, the function call will fail and
            <c>ERROR_ACCESS_DENIED</c> is returned.
            </para>
            <para>
            The <c>SetIpStatisticsEx</c> function can also fail because of user account control (UAC) on Windows Vista and later. If an
            application that contains this function is executed by a user logged on as a member of the Administrators group other than the
            built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application on lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetIpTTL(System.UInt32)">
            <summary>The <c>SetIpTTL</c> function sets the default time-to-live (TTL) value for the local computer.</summary>
            <param name="nTTL">The new TTL value for the local computer.</param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the
            following: the user lacks the required administrative privileges on the local computer or the application is not running in an
            enhanced shell as the built-in Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>An invalid parameter was passed to the function. This error is returned if the nTTL parameter is invalid.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The default TTL can also be set using the SetIpStatistics function.</para>
            <para>
            On Windows Vista and later, the <c>SetIpTTL</c> function can only be called by a user logged on as a member of the Administrators
            group. If <c>SetIpTTL</c> is called by a user that is not a member of the Administrators group, the function call will fail and
            <c>ERROR_ACCESS_DENIED</c> is returned.
            </para>
            <para>
            The SetIpStatistics function can also fail because of user account control (UAC) on Windows Vista and later. If an application
            that contains this function is executed by a user logged on as a member of the Administrators group other than the built-in
            Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>
            <c>Note</c> On Windows NT 4.0 and Windows 2000 and later, this function executes a privileged operation. For this function to
            execute successfully, the caller must be logged on as a member of the Administrators group or the NetworkConfigurationOperators group.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetPerTcp6ConnectionEStats(Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW@,Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE,System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            The <c>SetPerTcp6ConnectionEStats</c> function sets a value in the read/write information for an IPv6 TCP connection. This
            function is used to enable or disable extended statistics for an IPv6 TCP connection.
            </summary>
            <param name="Row">A pointer to a MIB_TCP6ROW structure for an IPv6 TCP connection.</param>
            <param name="EstatsType">
            <para>
            The type of extended statistics for TCP to set. This parameter determines the data and format of information that is expected in
            the Rw parameter.
            </para>
            <para>This parameter can be one of the values from the TCP_ESTATS_TYPE enumeration type defined in the Tcpestats.h header file.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TcpConnectionEstatsData</term>
            <term>
            This value specifies extended data transfer information for a TCP connection. When this value is specified, the buffer pointed to
            by the Rw parameter should point to a TCP_ESTATS_DATA_RW_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsSndCong</term>
            <term>
            This value specifies sender congestion for a TCP connection. When this value is specified, the buffer pointed to by the Rw
            parameter should point to a TCP_ESTATS_SND_CONG_RW_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsPath</term>
            <term>
            This value specifies extended path measurement information for a TCP connection. When this value is specified, the buffer pointed
            to by the Rw parameter should point to a TCP_ESTATS_PATH_RW_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsSendBuff</term>
            <term>
            This value specifies extended output-queuing information for a TCP connection. When this value is specified, the buffer pointed
            to by the Rw parameter should point to a TCP_ESTATS_SEND_BUFF_RW_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsRec</term>
            <term>
            This value specifies extended local-receiver information for a TCP connection. When this value is specified, the buffer pointed
            to by the Rw parameter should point to a TCP_ESTATS_REC_RW_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsObsRec</term>
            <term>
            This value specifies extended remote-receiver information for a TCP connection. When this value is specified, the buffer pointed
            to by the Rw parameter should point to a TCP_ESTATS_OBS_REC_RW_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsBandwidth</term>
            <term>
            This value specifies bandwidth estimation statistics for a TCP connection on bandwidth. When this value is specified, the buffer
            pointed to by the Rw parameter should point to a TCP_ESTATS_BANDWIDTH_RW_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsFineRtt</term>
            <term>
            This value specifies fine-grained round-trip time (RTT) estimation statistics for a TCP connection. When this value is specified,
            the buffer pointed to by the Rw parameter should point to a TCP_ESTATS_FINE_RTT_RW_v0 structure.
            </term>
            </item>
            </list>
            </param>
            <param name="Rw">
            A pointer to a buffer that contains the read/write information to set. The buffer should contain a value from the
            TCP_BOOLEAN_OPTIONAL enumeration for each structure member that specifies how each member should be updated.
            </param>
            <param name="RwVersion">
            The version of the read/write information to be set. This parameter should be set to zero for Windows Vista, Windows Server 2008,
            and Windows 7.
            </param>
            <param name="RwSize">The size, in bytes, of the buffer pointed to by the Rw parameter.</param>
            <param name="Offset">
            The offset, in bytes, to the member in the structure pointed to by the Rw parameter to be set. This parameter is currently unused
            and must be set to zero.
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The parameter is incorrect. This error is returned if the Row parameter is a NULL pointer.</term>
            </item>
            <item>
            <term>ERROR_INVALID_USER_BUFFER</term>
            <term>
            The supplied user buffer is not valid for the requested operation. This error is returned if the Row parameter is a NULL pointer
            and the RwSize parameter is nonzero.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            This requested entry was not found. This error is returned if the TCP connection specified in the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported. This error is returned if the RwVersion or the Offset parameter is not set to 0.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>SetPerTcp6ConnectionEStats</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>SetPerTcp6ConnectionEStats</c> function is used to enable or disable extended statistics for the IPv6 TCP connection
            passed in the Row parameter. Extended statistics on a TCP connection are disabled by default.
            </para>
            <para>
            The <c>SetPerTcp6ConnectionEStats</c> function is used to set the value of a member in the read/write information for extended
            statistics for an IPv6 TCP connection. The type and format of the structure to be set is specified by the EstatsType parameter.
            The Rw parameter contains a pointer to the structure being passed. The member to set in this structure is specified by the Offset
            parameter. All members in the structure pointed to by Rw parameter must be specified.
            </para>
            <para>
            The only version of TCP connection statistics currently supported is version zero. So the RwVersion parameter passed to
            <c>SetPerTcp6ConnectionEStats</c> should be set to 0.
            </para>
            <para>
            The structure pointed to by the Rw parameter passed this function depends on the enumeration value passed in the EstatsType
            parameter. The following table below indicates the structure type that should be passed in the Rw parameter for each possible
            EstatsType parameter type.
            </para>
            <list type="table">
            <listheader>
            <term>EstatsType</term>
            <term>Structure pointed to by Rw</term>
            </listheader>
            <item>
            <term>TcpConnectionEstatsData</term>
            <term>TCP_ESTATS_DATA_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsSndCong</term>
            <term>TCP_ESTATS_SND_CONG_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsPath</term>
            <term>TCP_ESTATS_PATH_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsSendBuff</term>
            <term>TCP_ESTATS_SEND_BUFF_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsRec</term>
            <term>TCP_ESTATS_REC_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsObsRec</term>
            <term>TCP_ESTATS_OBS_REC_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsBandwidth</term>
            <term>TCP_ESTATS_BANDWIDTH_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsFineRtt</term>
            <term>TCP_ESTATS_FINE_RTT_RW_v0</term>
            </item>
            </list>
            <para>
            The Offset parameter is currently unused. The possible structures pointed to by the Rw parameter all have a single member except
            for the TCP_ESTATS_BANDWIDTH_RW_v0 structure. When the EstatsType parameter is set to <c>TcpConnectionEstatsBandwidth</c>, the
            <c>TCP_ESTATS_BANDWIDTH_RW_v0</c> structure pointed to by the Rw parameter must have both structure members set to the preferred
            values in a single call to the <c>SetPerTcp6ConnectionEStats</c> function.
            </para>
            <para>
            If the RwSize parameter is set to 0, the <c>SetPerTcp6ConnectionEStats</c> function returns NO_ERROR and makes no changes tothe
            extended statistics status.
            </para>
            <para>
            The GetTcp6Table function is used to retrieve the IPv6 TCP connection table on the local computer. This function returns a
            MIB_TCP6TABLE structure that contain an array of MIB_TCP6ROW entries. The Row parameter passed to the
            <c>SetPerTcp6ConnectionEStats</c> function must be an entry for an existing IPv6 TCP connection.
            </para>
            <para>
            Once extended statistics are enabled on a TCP connection for IPv6, an application calls the GetPerTcp6ConnectionEStats function
            to retrieve extended statistics on the TCP connection.
            </para>
            <para>
            The GetPerTcp6ConnectionEStats function is designed to use TCP to diagnose performance problems in both the network and the
            application. If a network based application is performing poorly, TCP can determine if the bottleneck is in the sender, the
            receiver or the network itself. If the bottleneck is in the network, TCP can provide specific information about its nature.
            </para>
            <para>
            For information on extended TCP statistics on an IPv4 connection, see the GetPerTcpConnectionEStats and SetPerTcpConnectionEStats functions.
            </para>
            <para>
            The <c>SetPerTcp6ConnectionEStats</c> function can only be called by a user logged on as a member of the Administrators group. If
            <c>SetPerTcp6ConnectionEStats</c> is called by a user that is not a member of the Administrators group, the function call will
            fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on Windows
            Vista and Windows Server 2008. If an application that contains this function is executed by a user logged on as a member of the
            Administrators group other than the built-in Administrator, this call will fail unless the application has been marked in the
            manifest file with a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application on Windows Vista or Windows
            Server 2008 lacks this manifest file, a user logged on as a member of the Administrators group other than the built-in
            Administrator must then be executing the application in an enhanced shell as the built-in Administrator (RunAs administrator) for
            this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetPerTcp6ConnectionEStats(Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW@,Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE,System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            The <c>SetPerTcp6ConnectionEStats</c> function sets a value in the read/write information for an IPv6 TCP connection. This
            function is used to enable or disable extended statistics for an IPv6 TCP connection.
            </summary>
            <param name="Row">A pointer to a MIB_TCP6ROW structure for an IPv6 TCP connection.</param>
            <param name="EstatsType">
            <para>
            The type of extended statistics for TCP to set. This parameter determines the data and format of information that is expected in
            the Rw parameter.
            </para>
            <para>This parameter can be one of the values from the TCP_ESTATS_TYPE enumeration type defined in the Tcpestats.h header file.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TcpConnectionEstatsData</term>
            <term>
            This value specifies extended data transfer information for a TCP connection. When this value is specified, the buffer pointed to
            by the Rw parameter should point to a TCP_ESTATS_DATA_RW_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsSndCong</term>
            <term>
            This value specifies sender congestion for a TCP connection. When this value is specified, the buffer pointed to by the Rw
            parameter should point to a TCP_ESTATS_SND_CONG_RW_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsPath</term>
            <term>
            This value specifies extended path measurement information for a TCP connection. When this value is specified, the buffer pointed
            to by the Rw parameter should point to a TCP_ESTATS_PATH_RW_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsSendBuff</term>
            <term>
            This value specifies extended output-queuing information for a TCP connection. When this value is specified, the buffer pointed
            to by the Rw parameter should point to a TCP_ESTATS_SEND_BUFF_RW_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsRec</term>
            <term>
            This value specifies extended local-receiver information for a TCP connection. When this value is specified, the buffer pointed
            to by the Rw parameter should point to a TCP_ESTATS_REC_RW_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsObsRec</term>
            <term>
            This value specifies extended remote-receiver information for a TCP connection. When this value is specified, the buffer pointed
            to by the Rw parameter should point to a TCP_ESTATS_OBS_REC_RW_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsBandwidth</term>
            <term>
            This value specifies bandwidth estimation statistics for a TCP connection on bandwidth. When this value is specified, the buffer
            pointed to by the Rw parameter should point to a TCP_ESTATS_BANDWIDTH_RW_v0 structure.
            </term>
            </item>
            <item>
            <term>TcpConnectionEstatsFineRtt</term>
            <term>
            This value specifies fine-grained round-trip time (RTT) estimation statistics for a TCP connection. When this value is specified,
            the buffer pointed to by the Rw parameter should point to a TCP_ESTATS_FINE_RTT_RW_v0 structure.
            </term>
            </item>
            </list>
            </param>
            <param name="Rw">
            A pointer to a buffer that contains the read/write information to set. The buffer should contain a value from the
            TCP_BOOLEAN_OPTIONAL enumeration for each structure member that specifies how each member should be updated.
            </param>
            <param name="RwVersion">
            The version of the read/write information to be set. This parameter should be set to zero for Windows Vista, Windows Server 2008,
            and Windows 7.
            </param>
            <param name="RwSize">The size, in bytes, of the buffer pointed to by the Rw parameter.</param>
            <param name="Offset">
            The offset, in bytes, to the member in the structure pointed to by the Rw parameter to be set. This parameter is currently unused
            and must be set to zero.
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The parameter is incorrect. This error is returned if the Row parameter is a NULL pointer.</term>
            </item>
            <item>
            <term>ERROR_INVALID_USER_BUFFER</term>
            <term>
            The supplied user buffer is not valid for the requested operation. This error is returned if the Row parameter is a NULL pointer
            and the RwSize parameter is nonzero.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            This requested entry was not found. This error is returned if the TCP connection specified in the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported. This error is returned if the RwVersion or the Offset parameter is not set to 0.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>SetPerTcp6ConnectionEStats</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>SetPerTcp6ConnectionEStats</c> function is used to enable or disable extended statistics for the IPv6 TCP connection
            passed in the Row parameter. Extended statistics on a TCP connection are disabled by default.
            </para>
            <para>
            The <c>SetPerTcp6ConnectionEStats</c> function is used to set the value of a member in the read/write information for extended
            statistics for an IPv6 TCP connection. The type and format of the structure to be set is specified by the EstatsType parameter.
            The Rw parameter contains a pointer to the structure being passed. The member to set in this structure is specified by the Offset
            parameter. All members in the structure pointed to by Rw parameter must be specified.
            </para>
            <para>
            The only version of TCP connection statistics currently supported is version zero. So the RwVersion parameter passed to
            <c>SetPerTcp6ConnectionEStats</c> should be set to 0.
            </para>
            <para>
            The structure pointed to by the Rw parameter passed this function depends on the enumeration value passed in the EstatsType
            parameter. The following table below indicates the structure type that should be passed in the Rw parameter for each possible
            EstatsType parameter type.
            </para>
            <list type="table">
            <listheader>
            <term>EstatsType</term>
            <term>Structure pointed to by Rw</term>
            </listheader>
            <item>
            <term>TcpConnectionEstatsData</term>
            <term>TCP_ESTATS_DATA_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsSndCong</term>
            <term>TCP_ESTATS_SND_CONG_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsPath</term>
            <term>TCP_ESTATS_PATH_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsSendBuff</term>
            <term>TCP_ESTATS_SEND_BUFF_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsRec</term>
            <term>TCP_ESTATS_REC_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsObsRec</term>
            <term>TCP_ESTATS_OBS_REC_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsBandwidth</term>
            <term>TCP_ESTATS_BANDWIDTH_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsFineRtt</term>
            <term>TCP_ESTATS_FINE_RTT_RW_v0</term>
            </item>
            </list>
            <para>
            The Offset parameter is currently unused. The possible structures pointed to by the Rw parameter all have a single member except
            for the TCP_ESTATS_BANDWIDTH_RW_v0 structure. When the EstatsType parameter is set to <c>TcpConnectionEstatsBandwidth</c>, the
            <c>TCP_ESTATS_BANDWIDTH_RW_v0</c> structure pointed to by the Rw parameter must have both structure members set to the preferred
            values in a single call to the <c>SetPerTcp6ConnectionEStats</c> function.
            </para>
            <para>
            If the RwSize parameter is set to 0, the <c>SetPerTcp6ConnectionEStats</c> function returns NO_ERROR and makes no changes tothe
            extended statistics status.
            </para>
            <para>
            The GetTcp6Table function is used to retrieve the IPv6 TCP connection table on the local computer. This function returns a
            MIB_TCP6TABLE structure that contain an array of MIB_TCP6ROW entries. The Row parameter passed to the
            <c>SetPerTcp6ConnectionEStats</c> function must be an entry for an existing IPv6 TCP connection.
            </para>
            <para>
            Once extended statistics are enabled on a TCP connection for IPv6, an application calls the GetPerTcp6ConnectionEStats function
            to retrieve extended statistics on the TCP connection.
            </para>
            <para>
            The GetPerTcp6ConnectionEStats function is designed to use TCP to diagnose performance problems in both the network and the
            application. If a network based application is performing poorly, TCP can determine if the bottleneck is in the sender, the
            receiver or the network itself. If the bottleneck is in the network, TCP can provide specific information about its nature.
            </para>
            <para>
            For information on extended TCP statistics on an IPv4 connection, see the GetPerTcpConnectionEStats and SetPerTcpConnectionEStats functions.
            </para>
            <para>
            The <c>SetPerTcp6ConnectionEStats</c> function can only be called by a user logged on as a member of the Administrators group. If
            <c>SetPerTcp6ConnectionEStats</c> is called by a user that is not a member of the Administrators group, the function call will
            fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on Windows
            Vista and Windows Server 2008. If an application that contains this function is executed by a user logged on as a member of the
            Administrators group other than the built-in Administrator, this call will fail unless the application has been marked in the
            manifest file with a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application on Windows Vista or Windows
            Server 2008 lacks this manifest file, a user logged on as a member of the Administrators group other than the built-in
            Administrator must then be executing the application in an enhanced shell as the built-in Administrator (RunAs administrator) for
            this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetPerTcpConnectionEStats(Vanara.PInvoke.IpHlpApi.MIB_TCPROW@,Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE,System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            The <c>SetPerTcpConnectionEStats</c> function sets a value in the read/write information for an IPv4 TCP connection. This
            function is used to enable or disable extended statistics for an IPv4 TCP connection.
            </summary>
            <param name="Row">A pointer to a MIB_TCPROW structure for an IPv4 TCP connection.</param>
            <param name="EstatsType">
            <para>
            The type of extended statistics for TCP to set. This parameter determines the data and format of information that is expected in
            the Rw parameter.
            </para>
            <para>This parameter can be one of the values from the TCP_ESTATS_TYPE enumeration type defined in the Tcpestats.h header file.</para>
            </param>
            <param name="Rw">
            A pointer to a buffer that contains the read/write information to set. The buffer should contain a value from the
            TCP_BOOLEAN_OPTIONAL enumeration for each structure member that specifies how each member should be updated.
            </param>
            <param name="RwVersion">
            The version of the read/write information to be set. This parameter should be set to zero for Windows Vista, Windows Server 2008,
            and Windows 7.
            </param>
            <param name="RwSize">The size, in bytes, of the buffer pointed to by the Rw parameter.</param>
            <param name="Offset">
            The offset, in bytes, to the member in the structure pointed to by the Rw parameter to be set. This parameter is currently unused
            and must be set to zero.
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_USER_BUFFER</term>
            <term>
            The supplied user buffer is not valid for the requested operation. This error is returned if the Row parameter is a NULL pointer
            and the RwSize parameter is nonzero.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The parameter is incorrect. This error is returned if the Row parameter is a NULL pointer.</term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            This requested entry was not found. This error is returned if the TCP connection specified in the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported. This error is returned if the RwVersion or the Offset parameter is not set to 0.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>SetPerTcpConnectionEStats</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>SetPerTcpConnectionEStats</c> function is used to enable or disable extended statistics on an IPv4 TCP connection passed
            in the Row parameter. Extended statistics on a TCP connection are disabled by default. The <c>SetPerTcpConnectionEStats</c>
            function is used to set the value of a member in the read/write information for extended statistics for an IPv4 TCP connection.
            The type and format of the structure to be set is specified by the EstatsType parameter. The Rw parameter contains a pointer to
            the structure being passed. All members in the structure pointed to by Rw parameter must be specified.
            </para>
            <para>
            The only version of TCP connection statistics currently supported is version zero. So the RwVersion parameter passed to
            <c>SetPerTcpConnectionEStats</c> should be set to 0.
            </para>
            <para>
            The structure pointed to by the Rw parameter passed this function depends on the enumeration value passed in the EstatsType
            parameter. The following table below indicates the structure type that should be passed in the Rw parameter for each possible
            EstatsType parameter type.
            </para>
            <list type="table">
            <listheader>
            <term>EstatsType</term>
            <term>Structure pointed to by Rw</term>
            </listheader>
            <item>
            <term>TcpConnectionEstatsData</term>
            <term>TCP_ESTATS_DATA_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsSndCong</term>
            <term>TCP_ESTATS_SND_CONG_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsPath</term>
            <term>TCP_ESTATS_PATH_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsSendBuff</term>
            <term>TCP_ESTATS_SEND_BUFF_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsRec</term>
            <term>TCP_ESTATS_REC_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsObsRec</term>
            <term>TCP_ESTATS_OBS_REC_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsBandwidth</term>
            <term>TCP_ESTATS_BANDWIDTH_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsFineRtt</term>
            <term>TCP_ESTATS_FINE_RTT_RW_v0</term>
            </item>
            </list>
            <para>
            The Offset parameter is currently unused and must be set to 0. The possible structures pointed to by the Rw parameter all have a
            single member except for the TCP_ESTATS_BANDWIDTH_RW_v0 structure. When the EstatsType parameter is set to
            <c>TcpConnectionEstatsBandwidth</c>, the <c>TCP_ESTATS_BANDWIDTH_RW_v0</c> structure pointed to by the Rw parameter must have
            both structure members set to the preferred values in a single call to the <c>SetPerTcpConnectionEStats</c> function.
            </para>
            <para>
            If the RwSize parameter is set to 0, the <c>SetPerTcpConnectionEStats</c> function returns NO_ERROR and makes no changes tothe
            extended statistics status.
            </para>
            <para>
            The GetTcpTable function is used to retrieve the IPv4 TCP connection table on the local computer. This function returns a
            MIB_TCPTABLE structure that contain an array of MIB_TCPROW entries. The Row parameter passed to the
            <c>SetPerTcpConnectionEStats</c> function must be an entry for an existing IPv4 TCP connection.
            </para>
            <para>
            Once extended statistics are enabled on a TCP connection for IPv4, applications call the GetPerTcpConnectionEStats function to
            retrieve extended statistics on the TCP connection.
            </para>
            <para>
            The GetPerTcpConnectionEStats function is designed to use TCP to diagnose performance problems in both the network and the
            application. If a network based application is performing poorly, TCP can determine if the bottleneck is in the sender, the
            receiver or the network itself. If the bottleneck is in the network, TCP can provide specific information about its nature.
            </para>
            <para>
            For information on extended TCP statistics on an IPv6 connection, see the GetPerTcp6ConnectionEStats and
            SetPerTcp6ConnectionEStats functions.
            </para>
            <para>
            The <c>SetPerTcpConnectionEStats</c> function can only be called by a user logged on as a member of the Administrators group. If
            <c>SetPerTcpConnectionEStats</c> is called by a user that is not a member of the Administrators group, the function call will
            fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on Windows
            Vista and Windows Server 2008. If an application that contains this function is executed by a user logged on as a member of the
            Administrators group other than the built-in Administrator, this call will fail unless the application has been marked in the
            manifest file with a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application on Windows Vista or Windows
            Server 2008 lacks this manifest file, a user logged on as a member of the Administrators group other than the built-in
            Administrator must then be executing the application in an enhanced shell as the built-in Administrator (RunAs administrator) for
            this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetPerTcpConnectionEStats(Vanara.PInvoke.IpHlpApi.MIB_TCPROW@,Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE,System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            The <c>SetPerTcpConnectionEStats</c> function sets a value in the read/write information for an IPv4 TCP connection. This
            function is used to enable or disable extended statistics for an IPv4 TCP connection.
            </summary>
            <param name="Row">A pointer to a MIB_TCPROW structure for an IPv4 TCP connection.</param>
            <param name="EstatsType">
            <para>
            The type of extended statistics for TCP to set. This parameter determines the data and format of information that is expected in
            the Rw parameter.
            </para>
            <para>This parameter can be one of the values from the TCP_ESTATS_TYPE enumeration type defined in the Tcpestats.h header file.</para>
            </param>
            <param name="Rw">
            A pointer to a buffer that contains the read/write information to set. The buffer should contain a value from the
            TCP_BOOLEAN_OPTIONAL enumeration for each structure member that specifies how each member should be updated.
            </param>
            <param name="RwVersion">
            The version of the read/write information to be set. This parameter should be set to zero for Windows Vista, Windows Server 2008,
            and Windows 7.
            </param>
            <param name="RwSize">The size, in bytes, of the buffer pointed to by the Rw parameter.</param>
            <param name="Offset">
            The offset, in bytes, to the member in the structure pointed to by the Rw parameter to be set. This parameter is currently unused
            and must be set to zero.
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_USER_BUFFER</term>
            <term>
            The supplied user buffer is not valid for the requested operation. This error is returned if the Row parameter is a NULL pointer
            and the RwSize parameter is nonzero.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>The parameter is incorrect. This error is returned if the Row parameter is a NULL pointer.</term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            This requested entry was not found. This error is returned if the TCP connection specified in the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported. This error is returned if the RwVersion or the Offset parameter is not set to 0.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>SetPerTcpConnectionEStats</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>SetPerTcpConnectionEStats</c> function is used to enable or disable extended statistics on an IPv4 TCP connection passed
            in the Row parameter. Extended statistics on a TCP connection are disabled by default. The <c>SetPerTcpConnectionEStats</c>
            function is used to set the value of a member in the read/write information for extended statistics for an IPv4 TCP connection.
            The type and format of the structure to be set is specified by the EstatsType parameter. The Rw parameter contains a pointer to
            the structure being passed. All members in the structure pointed to by Rw parameter must be specified.
            </para>
            <para>
            The only version of TCP connection statistics currently supported is version zero. So the RwVersion parameter passed to
            <c>SetPerTcpConnectionEStats</c> should be set to 0.
            </para>
            <para>
            The structure pointed to by the Rw parameter passed this function depends on the enumeration value passed in the EstatsType
            parameter. The following table below indicates the structure type that should be passed in the Rw parameter for each possible
            EstatsType parameter type.
            </para>
            <list type="table">
            <listheader>
            <term>EstatsType</term>
            <term>Structure pointed to by Rw</term>
            </listheader>
            <item>
            <term>TcpConnectionEstatsData</term>
            <term>TCP_ESTATS_DATA_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsSndCong</term>
            <term>TCP_ESTATS_SND_CONG_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsPath</term>
            <term>TCP_ESTATS_PATH_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsSendBuff</term>
            <term>TCP_ESTATS_SEND_BUFF_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsRec</term>
            <term>TCP_ESTATS_REC_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsObsRec</term>
            <term>TCP_ESTATS_OBS_REC_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsBandwidth</term>
            <term>TCP_ESTATS_BANDWIDTH_RW_v0</term>
            </item>
            <item>
            <term>TcpConnectionEstatsFineRtt</term>
            <term>TCP_ESTATS_FINE_RTT_RW_v0</term>
            </item>
            </list>
            <para>
            The Offset parameter is currently unused and must be set to 0. The possible structures pointed to by the Rw parameter all have a
            single member except for the TCP_ESTATS_BANDWIDTH_RW_v0 structure. When the EstatsType parameter is set to
            <c>TcpConnectionEstatsBandwidth</c>, the <c>TCP_ESTATS_BANDWIDTH_RW_v0</c> structure pointed to by the Rw parameter must have
            both structure members set to the preferred values in a single call to the <c>SetPerTcpConnectionEStats</c> function.
            </para>
            <para>
            If the RwSize parameter is set to 0, the <c>SetPerTcpConnectionEStats</c> function returns NO_ERROR and makes no changes tothe
            extended statistics status.
            </para>
            <para>
            The GetTcpTable function is used to retrieve the IPv4 TCP connection table on the local computer. This function returns a
            MIB_TCPTABLE structure that contain an array of MIB_TCPROW entries. The Row parameter passed to the
            <c>SetPerTcpConnectionEStats</c> function must be an entry for an existing IPv4 TCP connection.
            </para>
            <para>
            Once extended statistics are enabled on a TCP connection for IPv4, applications call the GetPerTcpConnectionEStats function to
            retrieve extended statistics on the TCP connection.
            </para>
            <para>
            The GetPerTcpConnectionEStats function is designed to use TCP to diagnose performance problems in both the network and the
            application. If a network based application is performing poorly, TCP can determine if the bottleneck is in the sender, the
            receiver or the network itself. If the bottleneck is in the network, TCP can provide specific information about its nature.
            </para>
            <para>
            For information on extended TCP statistics on an IPv6 connection, see the GetPerTcp6ConnectionEStats and
            SetPerTcp6ConnectionEStats functions.
            </para>
            <para>
            The <c>SetPerTcpConnectionEStats</c> function can only be called by a user logged on as a member of the Administrators group. If
            <c>SetPerTcpConnectionEStats</c> is called by a user that is not a member of the Administrators group, the function call will
            fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on Windows
            Vista and Windows Server 2008. If an application that contains this function is executed by a user logged on as a member of the
            Administrators group other than the built-in Administrator, this call will fail unless the application has been marked in the
            manifest file with a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application on Windows Vista or Windows
            Server 2008 lacks this manifest file, a user logged on as a member of the Administrators group other than the built-in
            Administrator must then be executing the application in an enhanced shell as the built-in Administrator (RunAs administrator) for
            this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetTcpEntry(Vanara.PInvoke.IpHlpApi.MIB_TCPROW@)">
            <summary>The <c>SetTcpEntry</c> function sets the state of a TCP connection.</summary>
            <param name="pTcpRow">
            A pointer to a MIB_TCPROW structure. This structure specifies information to identify the TCP connection to modify. It also
            specifies the new state for the TCP connection. The caller must specify values for all the members in this structure.
            </param>
            <returns>
            <para>The function returns <c>NO_ERROR</c> (zero) if the function is successful.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the
            following: the user lacks the required administrative privileges on the local computer or the application is not running in an
            enhanced shell as the built-in Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An input parameter is invalid, no action was taken. This error is returned if the pTcpRow parameter is NULL or the Row member in
            the MIB_TCPROW structure pointed to by the pTcpRow parameter is not set to MIB_TCP_STATE_DELETE_TCB.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The IPv4 transport is not configured on the local computer.</term>
            </item>
            <item>
            <term>317</term>
            <term>The function is unable to set the TCP entry since the application is running non-elevated.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>Currently, the only state to which a TCP connection can be set is MIB_TCP_STATE_DELETE_TCB.</para>
            <para>
            On Windows Vista and later, the <c>SetTcpEntry</c> function can only be called by a user logged on as a member of the
            Administrators group. If <c>SetTcpEntry</c> is called by a user that is not a member of the Administrators group, the function
            call will fail and <c>ERROR_ACCESS_DENIED</c> is returned.
            </para>
            <para>
            The <c>SetTcpEntry</c> function can also fail because of user account control (UAC) on Windows Vista and later. If an application
            that contains this function is executed by a user logged on as a member of the Administrators group other than the built-in
            Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.UnenableRouter(System.Threading.NativeOverlapped*,System.UInt32@)">
            <summary>
            <para>
            The <c>UnenableRouter</c> function decrements the reference count that tracks the number of requests to enable IPv4 forwarding.
            When this reference count reaches zero, <c>UnenableRouter</c> turns off IPv4 forwarding on the local computer.
            </para>
            </summary>
            <param name="pOverlapped">
            <para>
            A pointer to an OVERLAPPED structure. This structure should be the same as the one used in the call to the EnableRouter function.
            </para>
            </param>
            <param name="lpdwEnableCount">
            <para>An optional pointer to a <c>DWORD</c> variable. This variable receives the number of references remaining.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, use FormatMessage to obtain the message string for the returned error.</para>
            </returns>
            <remarks>
            <para>
            The <c>UnenableRouter</c> function is specific to IPv4 forwarding. Each call that a process makes to <c>UnenableRouter</c> must
            correspond to a previous call to EnableRouter by the same process. The system returns an error on extraneous calls to
            <c>UnenableRouter</c>. As a result, a given process is not able to decrement the reference count that tracks the number of
            requests for enabling IPv4 forwarding for another process. Also, if IPv4 forwarding was enabled by a given process, it cannot be
            disabled by a different process.
            </para>
            <para>
            It is not possible to accurately determine the reference count that tracks the number of requests for enabling IPv4 forwarding
            since there might be other outstanding EnableRouter requests. So the value returned for the lpdwEnableCountparmameter is always a
            large count equal to ULONG_MAX/2.
            </para>
            <para>
            If the process that calls EnableRouter terminates without calling <c>UnenableRouter</c>, the system decrements the reference
            count that tracks requests to enable IPv4 forwarding as though the process had called <c>UnenableRouter</c>.
            </para>
            <para>
            After calling the <c>UnenableRouter</c>, use the CloseHandle call to close the handle to the event object in the OVERLAPPED structure.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NET_ADDRESS_INFO">
            <summary>Describes a network address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_ADDRESS_INFO.Format">
            <summary>
            <para>Type: <c>NET_ADDRESS_FORMAT</c></para>
            <para>One of the following values that indicates the format of the address provided in the remainder of this structure.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_ADDRESS_INFO.NamedAddress">
            <summary>
            A structure that contains a named address. A network string that represents an Internet host/router cannot specify a port.
            However, a network string that represents an Internet service must specify a port, for example, www.example.com:443.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_ADDRESS_INFO.Ipv4Address">
            <summary>
            <para>Type: <c>SOCKADDR_IN</c></para>
            <para>A structure to describe a IP version 4 (IPv4) address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_ADDRESS_INFO.Ipv6Address">
            <summary>
            <para>Type: <c>SOCKADDR_IN6</c></para>
            <para>A structure to describe a IP version 6 (IPv6) address. For the definition of this structure, see Ws2ipdef.h.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_ADDRESS_INFO.IpAddress">
            <summary>
            <para>Type: <c>SOCKADDR</c></para>
            <para>
            A structure that describes an address that is independent of the IP version in use; for instance, an address defined at the
            application layer using Windows Sockets 2. Once a network string is parsed successfully, an application can connect using
            this address.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NET_ADDRESS_INFO.NAMEDADDRESS">
            <summary>
            A structure that contains a named address. A network string that represents an Internet host/router cannot specify a port.
            However, a network string that represents an Internet service must specify a port, for example, www.example.com:443.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_ADDRESS_INFO.NAMEDADDRESS.Address">
            <summary>
            A DNS name formatted as a NULL-terminated wide character string. The maximum length of this string is the
            DNS_MAX_NAME_BUFFER_LENGTH constant defined in the Windns.h header file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NET_ADDRESS_INFO.NAMEDADDRESS.Port">
            <summary>The network port formatted as a NULL-terminated wide character string.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES_RESULT">
            <summary>Represents a linked list of IP_ADAPTER_ADDRESSES structures returned by <see cref="M:Vanara.PInvoke.IpHlpApi.GetAdaptersAddresses(Vanara.PInvoke.IpHlpApi.GetAdaptersAddressesFlags,Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY)"/>.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO_RESULT">
            <summary>Represents a linked list of IP_ADAPTER_INFO structures returned by <see cref="M:Vanara.PInvoke.IpHlpApi.GetAdaptersInfo"/>.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_TABLE_CLASS">
            <summary>
            <para>
            The <c>TCP_TABLE_CLASS</c> enumeration defines the set of values used to indicate the type of table returned by calls to GetExtendedTcpTable.
            </para>
            </summary>
            <remarks>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the <c>TCP_TABLE_CLASS</c> enumeration is defined in the Iprtrmib.h header file, not in the Iphlpapi.h header
            file. Note that the Iprtrmib.h header file is automatically included in Iphlpapi.h header file. The Iprtrmib.h header files
            should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_TABLE_CLASS.TCP_TABLE_BASIC_LISTENER">
            <summary>
            A MIB_TCPTABLE table that contains all listening (receiving only) TCP endpoints on the local computer is returned to the caller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_TABLE_CLASS.TCP_TABLE_BASIC_CONNECTIONS">
            <summary>A MIB_TCPTABLE table that contains all connected TCP endpoints on the local computer is returned to the caller.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_TABLE_CLASS.TCP_TABLE_BASIC_ALL">
            <summary>A MIB_TCPTABLE table that contains all TCP endpoints on the local computer is returned to the caller.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_TABLE_CLASS.TCP_TABLE_OWNER_PID_LISTENER">
            <summary>
            A MIB_TCPTABLE_OWNER_PID or MIB_TCP6TABLE_OWNER_PID that contains all listening (receiving only) TCP endpoints on the local
            computer is returned to the caller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_TABLE_CLASS.TCP_TABLE_OWNER_PID_CONNECTIONS">
            <summary>
            A MIB_TCPTABLE_OWNER_PID or MIB_TCP6TABLE_OWNER_PID that structure that contains all connected TCP endpoints on the local
            computer is returned to the caller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_TABLE_CLASS.TCP_TABLE_OWNER_PID_ALL">
            <summary>
            A MIB_TCPTABLE_OWNER_PID or MIB_TCP6TABLE_OWNER_PID structure that contains all TCP endpoints on the local computer is
            returned to the caller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_TABLE_CLASS.TCP_TABLE_OWNER_MODULE_LISTENER">
            <summary>
            A MIB_TCPTABLE_OWNER_MODULE or MIB_TCP6TABLE_OWNER_MODULE structure that contains all listening (receiving only) TCP
            endpoints on the local computer is returned to the caller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_TABLE_CLASS.TCP_TABLE_OWNER_MODULE_CONNECTIONS">
            <summary>
            A MIB_TCPTABLE_OWNER_MODULE or MIB_TCP6TABLE_OWNER_MODULE structure that contains all connected TCP endpoints on the local
            computer is returned to the caller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_TABLE_CLASS.TCP_TABLE_OWNER_MODULE_ALL">
            <summary>
            A MIB_TCPTABLE_OWNER_MODULE or MIB_TCP6TABLE_OWNER_MODULE structure that contains all TCP endpoints on the local computer is
            returned to the caller.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_INFO_CLASS">
            <summary>
            The <c>TCPIP_OWNER_MODULE_INFO_CLASS</c> enumeration defines the type of module information structure passed to calls of the
            <c>GetOwnerModuleFromXXXEntry</c> family.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_INFO_CLASS.TCPIP_OWNER_MODULE_INFO_BASIC">
            <summary>A <see cref="T:Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_BASIC_INFO"/> structure is passed to the GetOwnerModuleFromXXXEntry function.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.UDP_TABLE_CLASS">
            <summary>
            <para>
            The <c>UDP_TABLE_CLASS</c> enumeration defines the set of values used to indicate the type of table returned by calls to GetExtendedUdpTable.
            </para>
            </summary>
            <remarks>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the <c>UDP_TABLE_CLASS</c> enumeration is defined in the Iprtrmib.h header file, not in the Iphlpapi.h header
            file. Note that the Iprtrmib.h header file is automatically included in Iphlpapi.h header file. The Iprtrmib.h header files
            should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.UDP_TABLE_CLASS.UDP_TABLE_BASIC">
            <summary>A MIB_UDPTABLE structure that contains all UDP endpoints on the local computer is returned to the caller.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.UDP_TABLE_CLASS.UDP_TABLE_OWNER_PID">
            <summary>
            A MIB_UDPTABLE_OWNER_PID or MIB_UDP6TABLE_OWNER_PID structure that contains all UDP endpoints on the local computer is
            returned to the caller.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.UDP_TABLE_CLASS.UDP_TABLE_OWNER_MODULE">
            <summary>
            A MIB_UDPTABLE_OWNER_MODULE or MIB_UDP6TABLE_OWNER_MODULE structure that contains all UDP endpoints on the local computer is
            returned to the caller.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_BASIC_INFO">
            <summary>
            The <c>TCPIP_OWNER_MODULE_BASIC_INFO</c> structure contains pointers to the module name and module path values associated with a
            TCP connection. The <c>TCPIP_OWNER_MODULE_BASIC_INFO</c> structure is returned by the GetOwnerModuleFromTcpEntry and
            GetOwnerModuleFromTcp6Entry functions.
            </summary>
            <remarks>
            <para>
            If the module owner is the system kernel, the <c>lpModuleName</c> and <c>lpModulePath</c> members point to a wide character
            string that contains "System".
            </para>
            <para>
            On Windows Vista and later as well as on the Microsoft Windows Software Development Kit (SDK), the organization of header files
            has changed and the <c>TCPIP_OWNER_MODULE_BASIC_INFO</c> structure is defined in the Iprtrmib.h header file.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_BASIC_INFO.pModuleName">
            <summary>
            A pointer to the name of the module. This field should be a <c>NULL</c> pointer when passed to GetOwnerModuleFromTcpEntry or
            GetOwnerModuleFromTcp6Entry function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_BASIC_INFO.pModulePath">
            <summary>
            A pointer to the full path of the module, including the module name. This field should be a <c>NULL</c> pointer when passed
            to GetOwnerModuleFromTcpEntry or GetOwnerModuleFromTcp6Entry function.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_BASIC_INFO_UNMGD">
            <summary>
            The <c>TCPIP_OWNER_MODULE_BASIC_INFO</c> structure contains pointers to the module name and module path values associated with a
            TCP connection. The <c>TCPIP_OWNER_MODULE_BASIC_INFO</c> structure is returned by the GetOwnerModuleFromTcpEntry and
            GetOwnerModuleFromTcp6Entry functions.
            </summary>
            <remarks>
            <para>
            If the module owner is the system kernel, the <c>lpModuleName</c> and <c>lpModulePath</c> members point to a wide character
            string that contains "System".
            </para>
            <para>
            On Windows Vista and later as well as on the Microsoft Windows Software Development Kit (SDK), the organization of header files
            has changed and the <c>TCPIP_OWNER_MODULE_BASIC_INFO</c> structure is defined in the Iprtrmib.h header file.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_BASIC_INFO_UNMGD.pModuleName">
            <summary>
            A pointer to the name of the module. This field should be a <c>NULL</c> pointer when passed to GetOwnerModuleFromTcpEntry or
            GetOwnerModuleFromTcp6Entry function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_BASIC_INFO_UNMGD.pModulePath">
            <summary>
            A pointer to the full path of the module, including the module name. This field should be a <c>NULL</c> pointer when passed
            to GetOwnerModuleFromTcpEntry or GetOwnerModuleFromTcp6Entry function.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_BASIC_INFO_UNMGD.op_Implicit(Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_BASIC_INFO_UNMGD)~Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_BASIC_INFO">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_BASIC_INFO_UNMGD"/> to <see cref="T:Vanara.PInvoke.IpHlpApi.TCPIP_OWNER_MODULE_BASIC_INFO"/>.</summary>
            <param name="unmgd">The unmanaged structure.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_CAST_FLAGS">
            <summary>Flags for an IP address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_CAST_FLAGS.IP_ADAPTER_ADDRESS_DNS_ELIGIBLE">
            <summary>The IP address is legal to appear in DNS.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_CAST_FLAGS.IP_ADAPTER_ADDRESS_TRANSIENT">
            <summary>The IP address is a cluster address and should not be used by most applications.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_FLAGS">
            <summary>Flags for <see cref="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_FLAGS.IP_ADAPTER_DDNS_ENABLED">
            <summary>Dynamic DNS is enabled on this adapter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_FLAGS.IP_ADAPTER_REGISTER_ADAPTER_SUFFIX">
            <summary>Register the DNS suffix for this adapter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_FLAGS.IP_ADAPTER_DHCP_ENABLED">
            <summary>Dynamic Host Configuration Protocol is enabled on this adapter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_FLAGS.IP_ADAPTER_RECEIVE_ONLY">
            <summary>The adapter is a receive-only adapter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_FLAGS.IP_ADAPTER_NO_MULTICAST">
            <summary>The adapter is not a multicast recipient.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_FLAGS.IP_ADAPTER_IPV6_OTHER_STATEFUL_CONFIG">
            <summary>The adapter contains other IPv6-specific stateful configuration information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_FLAGS.IP_ADAPTER_NETBIOS_OVER_TCPIP_ENABLED">
            <summary>
            The adapter is enabled for NetBIOS over TCP/IP. <note type="note">This flag is only supported on Windows Vista and later when
            the application has been compiled for a target platform with an NTDDI version equal or greater than NTDDI_LONGHORN. This flag
            is defined in the IP_ADAPTER_ADDRESSES_LH structure as the NetbiosOverTcpipEnabled bitfield.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_FLAGS.IP_ADAPTER_IPV4_ENABLED">
            <summary>
            The adapter is enabled for IPv4. <note type="note">This flag is only supported on Windows Vista and later when the
            application has been compiled for a target platform with an NTDDI version equal or greater than NTDDI_LONGHORN. This flag is
            defined in the IP_ADAPTER_ADDRESSES_LH structure as the Ipv4Enabled bitfield.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_FLAGS.IP_ADAPTER_IPV6_ENABLED">
            <summary>
            The adapter is enabled for IPv6. <note type="note">This flag is only supported on Windows Vista and later when the
            application has been compiled for a target platform with an NTDDI version equal or greater than NTDDI_LONGHORN. This flag is
            defined in the IP_ADAPTER_ADDRESSES_LH structure as the Ipv6Enabled bitfield.</note>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_FLAGS.IP_ADAPTER_IPV6_MANAGE_ADDRESS_CONFIG">
            <summary>
            The adapter is enabled for IPv6 managed address configuration. <note type="note">This flag is only supported on Windows Vista
            and later when the application has been compiled for a target platform with an NTDDI version equal or greater than
            NTDDI_LONGHORN. This flag is defined in the IP_ADAPTER_ADDRESSES_LH structure as the Ipv6ManagedAddressConfigurationSupported bitfield.</note>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.ILinkedListElement`1">
            <summary>Identifies a class or structure that supports a linked-list model.</summary>
            <typeparam name="T">The type of the element in the list.</typeparam>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.ILinkedListElement`1.GetNext">
            <summary>Gets the next element in the list.</summary>
            <returns>A nullable type. A <see langword="null"/> value indicates the end of the list.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.FIXED_INFO">
            <summary>
            <para>The <c>FIXED_INFO</c> structure contains information that is the same across all the interfaces on a computer.</para>
            </summary>
            <remarks>
            <para>The <c>FIXED_INFO</c> structure is retrieved by the GetNetworkParams function.</para>
            <para>
            In the Microsoft Windows Software Development Kit (SDK), the <c>FIXED_INFO_WIN2KSP1</c> structure is defined. When compiling an
            application if the target platform is Windows 2000 with Service Pack 1 (SP1) and later (, , or ), the <c>FIXED_INFO_WIN2KSP1</c>
            struct is typedefed to the <c>FIXED_INFO</c> structure. When compiling an application if the target platform is not Windows 2000
            with SP1 and later, the <c>FIXED_INFO</c> structure is undefined.
            </para>
            <para>
            The GetNetworkParams function and the <c>FIXED_INFO</c> structure are supported on Windows 98and later. But to build an
            application for a target platform earlier than Windows 2000 with Service Pack 1 (SP1), an earlier version of the Platform
            Software Development Kit (SDK) must be used.
            </para>
            <para>Examples</para>
            <para>
            The following code retrieves a <c>FIXED_INFO</c> structure that contains network configuration information for the local
            computer. The code prints selected members from the structure.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.FIXED_INFO.HostName">
            <summary>
            <para>Type: <c>char[MAX_HOSTNAME_LEN + 4]</c></para>
            <para>
            The hostname for the local computer. This may be the fully qualified hostname (including the domain) for a computer that is
            joined to a domain.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.FIXED_INFO.DomainName">
            <summary>
            <para>Type: <c>char[MAX_DOMAIN_NAME_LEN + 4]</c></para>
            <para>The domain in which the local computer is registered.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.FIXED_INFO.CurrentDnsServer">
            <summary>
            <para>Type: <c>PIP_ADDR_STRING</c></para>
            <para>Reserved. Use the <c>DnsServerList</c> member to obtain the DNS servers for the local computer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.FIXED_INFO.DnsServerList">
            <summary>
            <para>Type: <c>IP_ADDR_STRING</c></para>
            <para>A linked list of IP_ADDR_STRING structures that specify the set of DNS servers used by the local computer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.FIXED_INFO.NodeType">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>The node type of the local computer. These values are defined in the Iptypes.h header file.</para>
            <list type="table">
            <listheader>
            <term>NodeType</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BROADCAST_NODETYPE 0x0001</term>
            <term>A broadcast nodetype.</term>
            </item>
            <item>
            <term>PEER_TO_PEER_NODETYPE 0x0002</term>
            <term>A peer to peer nodetype.</term>
            </item>
            <item>
            <term>MIXED_NODETYPE 0x0004</term>
            <term>A mixed nodetype.</term>
            </item>
            <item>
            <term>HYBRID_NODETYPE 0x0008</term>
            <term>A hybrid nodetype.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.FIXED_INFO.ScopeId">
            <summary>
            <para>Type: <c>char[MAX_SCOPE_ID_LEN + 4]</c></para>
            <para>The DHCP scope name.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.FIXED_INFO.EnableRouting">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>A Boolean value that specifies whether routing is enabled on the local computer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.FIXED_INFO.EnableProxy">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>A Boolean value that specifies whether the local computer is acting as an ARP proxy.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.FIXED_INFO.EnableDns">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>A Boolean value that specifies whether DNS is enabled on the local computer.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.FIXED_INFO.DnsServers">
            <summary>
            <para>A list of IP_ADDR_STRING structures that specify the set of DNS servers used by the local computer.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES">
            <summary>
            <para>
            The <c>IP_ADAPTER_ADDRESSES</c> structure is the header node for a linked list of addresses for a particular adapter. This
            structure can simultaneously be used as part of a linked list of <c>IP_ADAPTER_ADDRESSES</c> structures.
            </para>
            </summary>
            <remarks>
            <para>
            The GetAdaptersAddresses function retrieves information for IPv4 and IPv6 addresses and returns this information as a linked list
            of <c>IP_ADAPTER_ADDRESSES</c> structures
            </para>
            <para>
            The adapter index values specified in the <c>IfIndex</c> and <c>Ipv6IfIndex</c> members may change when an adapter is disabled
            and then enabled, or under other circumstances, and should not be considered persistent.
            </para>
            <para>
            The values for the <c>IfType</c> member are defined in the Ipifcons.h header file. Only the possible values listed in the
            description of the <c>IfType</c> member are currently supported.
            </para>
            <para>
            The size of the <c>IP_ADAPTER_ADDRESSES</c> structure changed on Windows XP with SP1 and later. The size of the
            <c>IP_ADAPTER_ADDRESSES</c> structure also changed on Windows Vista and later. The size of the <c>IP_ADAPTER_ADDRESSES</c>
            structure also changed on Windows Vista with SP1and later and onWindows Server 2008 and later. The <c>Length</c> member should be
            used to determine which version of the <c>IP_ADAPTER_ADDRESSES</c> structure is being used.
            </para>
            <para>
            The version of the <c>IP_ADAPTER_ADDRESSES</c> structure on Windows XP with SP1 and later has the following new members added:
            <c>Ipv6IfIndex</c>, <c>ZoneIndices</c>, and <c>FirstPrefix</c>.
            </para>
            <para>
            The version of the <c>IP_ADAPTER_ADDRESSES</c> structure on Windows Vista and later has the following new members added:
            <c>TransmitLinkSpeed</c>, <c>ReceiveLinkSpeed</c>, <c>FirstWinsServerAddress</c>, <c>FirstGatewayAddress</c>, <c>Ipv4Metric</c>,
            <c>Ipv6Metric</c>, <c>Luid</c>, <c>Dhcpv4Server</c>, <c>CompartmentId</c>, <c>NetworkGuid</c>, <c>ConnectionType</c>,
            <c>TunnelType</c>, <c>Dhcpv6Server</c>, <c>Dhcpv6ClientDuid</c>, <c>Dhcpv6ClientDuidLength</c>, and <c>Dhcpv6Iaid</c>.
            </para>
            <para>
            The version of the <c>IP_ADAPTER_ADDRESSES</c> structure on Windows Vista with SP1and later and on Windows Server 2008 and later
            has the following new member added: <c>FirstDnsSuffix</c>.
            </para>
            <para>
            The <c>Ipv4Metric</c> and <c>Ipv6Metric</c> members are used to prioritize route metrics for routes connected to multiple
            interfaces on the local computer.
            </para>
            <para>
            The order of linked IP_ADAPTER_UNICAST_ADDRESS structures pointed to by the <c>FirstUnicastAddress</c> member that are returned
            by the GetAdaptersAddresses function does not reflect the order that IP addresses were added to an adapter and may vary between
            versions of Windows. Similarly, the order of linked <c>IP_ADAPTER_ANYCAST_ADDRESS</c> structures pointed to by the
            <c>FirstAnycastAddress</c> member and the order of linked <c>IP_ADAPTER_MULTICAST_ADDRESS</c> structures pointed to by the
            <c>FirstMulticastAddress</c> member do not reflect the order that IP addresses were added to an adapter and may vary between
            versions of Windows.
            </para>
            <para>
            In addition, the linked IP_ADAPTER_UNICAST_ADDRESS structures pointed to by the <c>FirstUnicastAddress</c> member and the linked
            IP_ADAPTER_PREFIXstructures pointed to by the <c>FirstPrefix</c> member are maintained as separate internal linked lists by the
            operating system. As a result, the order of linked <c>IP_ADAPTER_UNICAST_ADDRESS</c> structures pointed to by the
            <c>FirstUnicastAddress</c> member does not have any relationship with the order of linked <c>IP_ADAPTER_PREFIX</c> structures
            pointed to by the <c>FirstPrefix</c> member.
            </para>
            <para>
            On Windows Vista and later, the linked IP_ADAPTER_PREFIXstructures pointed to by the <c>FirstPrefix</c> member include three IP
            adapter prefixes for each IP address assigned to the adapter. These include the host IP address prefix, the subnet IP address
            prefix, and the subnet broadcast IP address prefix. In addition, for each adapter there is a multicast address prefix and a
            broadcast address prefix.
            </para>
            <para>
            On Windows XP with SP1 and later prior to Windows Vista, the linked IP_ADAPTER_PREFIXstructures pointed to by the
            <c>FirstPrefix</c> member include only a single IP adapter prefix for each IP address assigned to the adapter.
            </para>
            <para>
            In the Windows SDK, the version of the structure for use on Windows Vista and later is defined as <c>IP_ADAPTER_ADDRESSES_LH</c>.
            In the Microsoft Windows Software Development Kit (SDK), the version of this structure to be used on earlier systems including
            Windows XP with SP1 and later is defined as <c>IP_ADAPTER_ADDRESSES_XP</c>. When compiling an application if the target platform
            is Windows Vista and later (, , or ), the <c>IP_ADAPTER_ADDRESSES_LH</c> structure is typedefed to the
            <c>IP_ADAPTER_ADDRESSES</c> structure. When compiling an application if the target platform is not Windows Vista and later, the
            <c>IP_ADAPTER_ADDRESSES_XP</c> structure is typedefed to the <c>IP_ADAPTER_ADDRESSES</c> structure.
            </para>
            <para>
            The SOCKET_ADDRESS structure is used in the <c>IP_ADAPTER_ADDRESSES</c> structure. On the Windows SDK released for Windows Vista
            and later, the organization of header files has changed and the <c>SOCKET_ADDRESS</c> structure is defined in the Ws2def.h header
            file which is automatically included by the Winsock2.h header file. On the Platform Software Development Kit (SDK) released for
            Windows Server 2003 and Windows XP, the <c>SOCKET_ADDRESS</c> structure is declared in the Winsock2.h header file. In order to
            use the <c>IP_ADAPTER_ADDRESSES</c> structure, the Winsock2.h header file must be included before the Iphlpapi.h header file.
            </para>
            <para>Examples</para>
            <para>
            This example retrieves the <c>IP_ADAPTER_ADDRESSES</c> structure for the adapters associated with the system and prints some
            members for each adapter interface.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.Length">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.IfIndex">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.Next">
            <summary>
            <para>Type: <c>struct _IP_ADAPTER_ADDRESSES*</c></para>
            <para>A pointer to the next adapter addresses structure in the list.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.AdapterName">
            <summary>
            <para>Type: <c>PCHAR</c></para>
            <para>
            An array of characters that contains the name of the adapter with which these addresses are associated. Unlike an adapter's
            friendly name, the adapter name specified in <c>AdapterName</c> is permanent and cannot be modified by the user.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.FirstUnicastAddress">
            <summary>
            <para>Type: <c>PIP_ADAPTER_UNICAST_ADDRESS</c></para>
            <para>A pointer to the first IP_ADAPTER_UNICAST_ADDRESS structure in a linked list of IP unicast addresses for the adapter.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.FirstAnycastAddress">
            <summary>
            <para>Type: <c>PIP_ADAPTER_ANYCAST_ADDRESS</c></para>
            <para>A pointer to the first IP_ADAPTER_ANYCAST_ADDRESS structure in a linked list of IP anycast addresses for the adapter.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.FirstMulticastAddress">
            <summary>
            <para>Type: <c>PIP_ADAPTER_MULTICAST_ADDRESS</c></para>
            <para>A pointer to the first IP_ADAPTER_MULTICAST_ADDRESS structure in a list of IP multicast addresses for the adapter.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.FirstDnsServerAddress">
            <summary>
            <para>Type: <c>PIP_ADAPTER_DNS_SERVER_ADDRESS</c></para>
            <para>A pointer to the first IP_ADAPTER_DNS_SERVER_ADDRESS structure in a linked list of DNS server addresses for the adapter.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.DnsSuffix">
            <summary>
            <para>Type: <c>PWCHAR</c></para>
            <para>The Domain Name System (DNS) suffix associated with this adapter.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.Description">
            <summary>
            <para>Type: <c>PWCHAR</c></para>
            <para>A description for the adapter. This member is read-only.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.FriendlyName">
            <summary>
            <para>Type: <c>PWCHAR</c></para>
            <para>
            A user-friendly name for the adapter. For example: "Local Area Connection 1." This name appears in contexts such as the
            <c>ipconfig</c> command line program and the Connection folder. This member is read only and can't be modified using any IP
            Helper functions.
            </para>
            <para>
            This member is the ifAlias field used by NDIS as described in RFC 2863. The ifAlias field can be set by an NDIS interface
            provider when the NDIS driver is installed. For NDIS miniport drivers, this field is set by NDIS.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.PhysicalAddress">
            <summary>
            <para>Type: <c>BYTE[MAX_ADAPTER_ADDRESS_LENGTH]</c></para>
            <para>
            The Media Access Control (MAC) address for the adapter. For example, on an Ethernet network this member would specify the
            Ethernet hardware address.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.PhysicalAddressLength">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The length, in bytes, of the address specified in the <c>PhysicalAddress</c> member. For interfaces that do not have a
            data-link layer, this value is zero.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.Flags">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.Mtu">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The maximum transmission unit (MTU) size, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.IfType">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The interface type as defined by the Internet Assigned Names Authority (IANA). Possible values for the interface type are
            listed in the Ipifcons.h header file.
            </para>
            <para>The table below lists common values for the interface type although many other values are possible.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IF_TYPE_OTHER 1</term>
            <term>Some other type of network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_ETHERNET_CSMACD 6</term>
            <term>An Ethernet network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_ISO88025_TOKENRING 9</term>
            <term>A token ring network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_PPP 23</term>
            <term>A PPP network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_SOFTWARE_LOOPBACK 24</term>
            <term>A software loopback network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_ATM 37</term>
            <term>An ATM network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_IEEE80211 71</term>
            <term>
            An IEEE 802.11 wireless network interface. On Windows Vista and later, wireless network cards are reported as
            IF_TYPE_IEEE80211. On earlier versions of Windows, wireless network cards are reported as IF_TYPE_ETHERNET_CSMACD. On Windows
            XP with SP3 and on Windows XP with SP2 x86 with the Wireless LAN API for Windows XP with SP2 installed, the
            WlanEnumInterfaces function can be used to enumerate wireless interfaces on the local computer.
            </term>
            </item>
            <item>
            <term>IF_TYPE_TUNNEL 131</term>
            <term>A tunnel type encapsulation network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_IEEE1394 144</term>
            <term>An IEEE 1394 (Firewire) high performance serial bus network interface.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.OperStatus">
            <summary>
            <para>Type: <c>IF_OPER_STATUS</c></para>
            <para>
            The operational status for the interface as defined in RFC 2863. For more information, see
            http://www.ietf.org/rfc/rfc2863.txt. This member can be one of the values from the <c>IF_OPER_STATUS</c> enumeration type
            defined in the Iftypes.h header file. On Windows Vista and later, the header files were reorganized and this enumeration is
            defined in the Ifdef.h header file.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IfOperStatusUp 1</term>
            <term>The interface is up and able to pass packets.</term>
            </item>
            <item>
            <term>IfOperStatusDown 2</term>
            <term>
            The interface is down and not in a condition to pass packets. The IfOperStatusDown state has two meanings, depending on the
            value of AdminStatus member. If AdminStatus is not set to NET_IF_ADMIN_STATUS_DOWN and ifOperStatus is set to
            IfOperStatusDown then a fault condition is presumed to exist on the interface. If AdminStatus is set to IfOperStatusDown,
            then ifOperStatus will normally also be set to IfOperStatusDown or IfOperStatusNotPresent and there is not necessarily a
            fault condition on the interface.
            </term>
            </item>
            <item>
            <term>IfOperStatusTesting 3</term>
            <term>The interface is in testing mode.</term>
            </item>
            <item>
            <term>IfOperStatusUnknown 4</term>
            <term>The operational status of the interface is unknown.</term>
            </item>
            <item>
            <term>IfOperStatusDormant 5</term>
            <term>
            The interface is not actually in a condition to pass packets (it is not up), but is in a pending state, waiting for some
            external event. For on-demand interfaces, this new state identifies the situation where the interface is waiting for events
            to place it in the IfOperStatusUp state.
            </term>
            </item>
            <item>
            <term>IfOperStatusNotPresent 6</term>
            <term>
            A refinement on the IfOperStatusDown state which indicates that the relevant interface is down specifically because some
            component (typically, a hardware component) is not present in the managed system.
            </term>
            </item>
            <item>
            <term>IfOperStatusLowerLayerDown 7</term>
            <term>
            A refinement on the IfOperStatusDown state. This new state indicates that this interface runs on top of one or more other
            interfaces and that this interface is down specifically because one or more of these lower-layer interfaces are down.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.Ipv6IfIndex">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The interface index for the IPv6 IP address. This member is zero if IPv6 is not available on the interface.</para>
            <para><c>Note</c> This structure member is only available on Windows XP with SP1 and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.ZoneIndices">
            <summary>
            <para>Type: <c>DWORD[16]</c></para>
            <para>
            An array of scope IDs for each scope level used for composing sockaddr structures. The SCOPE_LEVEL enumeration is used to
            index the array. On IPv6, a single interface may be assigned multiple IPv6 multicast addresses based on a scope ID.
            </para>
            <para><c>Note</c> This structure member is only available on Windows XP with SP1 and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.FirstPrefix">
            <summary>
            <para>Type: <c>PIP_ADAPTER_PREFIX</c></para>
            <para>A pointer to the first IP_ADAPTER_PREFIX structure in a linked list of IP adapter prefixes for the adapter.</para>
            <para><c>Note</c> This structure member is only available on Windows XP with SP1 and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.TrasmitLinkSpeed">
            <summary>
            <para>Type: <c>ULONG64</c></para>
            <para>The current speed in bits per second of the transmit link for the adapter.</para>
            <para><c>Note</c> This structure member is only available on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.ReceiveLinkSpeed">
            <summary>
            <para>Type: <c>ULONG64</c></para>
            <para>The current speed in bits per second of the receive link for the adapter.</para>
            <para><c>Note</c> This structure member is only available on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.FirstWinsServerAddress">
            <summary>
            <para>Type: <c>PIP_ADAPTER_WINS_SERVER_ADDRESS_LH</c></para>
            <para>
            A pointer to the first IP_ADAPTER_WINS_SERVER_ADDRESS structure in a linked list of Windows Internet Name Service (WINS)
            server addresses for the adapter.
            </para>
            <para><c>Note</c> This structure member is only available on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.FirstGatewayAddress">
            <summary>
            <para>Type: <c>PIP_ADAPTER_GATEWAY_ADDRESS_LH</c></para>
            <para>A pointer to the first IP_ADAPTER_GATEWAY_ADDRESS structure in a linked list of gateways for the adapter.</para>
            <para><c>Note</c> This structure member is only available on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.Ipv4Metric">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The IPv4 interface metric for the adapter address. This member is only applicable to an IPv4 adapter address.</para>
            <para>
            The actual route metric used to compute the route preferences for IPv4 is the summation of the route metric offset specified
            in the <c>Metric</c> member of the MIB_IPFORWARD_ROW2 structure and the interface metric specified in this member for IPv4.
            </para>
            <para><c>Note</c> This structure member is only available on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.Ipv6Metric">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The IPv6 interface metric for the adapter address. This member is only applicable to an IPv6 adapter address.</para>
            <para>
            The actual route metric used to compute the route preferences for IPv6 is the summation of the route metric offset specified
            in the <c>Metric</c> member of the MIB_IPFORWARD_ROW2 structure and the interface metric specified in this member for IPv4.
            </para>
            <para><c>Note</c> This structure member is only available on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.Luid">
            <summary>
            <para>Type: <c>IF_LUID</c></para>
            <para>The interface LUID for the adapter address.</para>
            <para><c>Note</c> This structure member is only available on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.Dhcpv4Server">
            <summary>
            <para>Type: <c>SOCKET_ADDRESS</c></para>
            <para>
            The IPv4 address of the DHCP server for the adapter address. This member is only applicable to an IPv4 adapter address
            configured using DHCP.
            </para>
            <para><c>Note</c> This structure member is only available on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.CompartmentId">
            <summary>
            <para>Type: <c>NET_IF_COMPARTMENT_ID</c></para>
            <para>The routing compartment ID for the adapter address.</para>
            <para>
            <c>Note</c> This structure member is only available on Windows Vista and later. This member is not currently supported and is
            reserved for future use.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.NetworkGuid">
            <summary>
            <para>Type: <c>NET_IF_NETWORK_GUID</c></para>
            <para>The <c>GUID</c> that is associated with the network that the interface belongs to.</para>
            <para>
            If the interface provider cannot provide the network GUID, this member can be a zero <c>GUID</c>. In this case, the interface
            was registered by NDIS in the default network.
            </para>
            <para><c>Note</c> This structure member is only available on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.ConnectionType">
            <summary>
            <para>Type: <c>NET_IF_CONNECTION_TYPE</c></para>
            <para>The interface connection type for the adapter address.</para>
            <para>
            This member can be one of the values from the <c>NET_IF_CONNECTION_TYPE</c> enumeration type defined in the Ifdef.h header file.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NET_IF_CONNECTION_DEDICATED 1</term>
            <term>
            The connection type is dedicated. The connection comes up automatically when media sense is TRUE. For example, an Ethernet
            connection is dedicated.
            </term>
            </item>
            <item>
            <term>NET_IF_CONNECTION_PASSIVE 2</term>
            <term>
            The connection type is passive. The remote end must bring up the connection to the local station. For example, a RAS
            interface is passive.
            </term>
            </item>
            <item>
            <term>NET_IF_CONNECTION_DEMAND 3</term>
            <term>
            The connection type is demand-dial. A connection of this type comes up in response to a local action (sending a packet, for example).
            </term>
            </item>
            <item>
            <term>NET_IF_CONNECTION_MAXIMUM 4</term>
            <term>
            The maximum possible value for the NET_IF_CONNECTION_TYPE enumeration type. This is not a legal value for ConnectionType member.
            </term>
            </item>
            </list>
            <para><c>Note</c> This structure member is only available on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.TunnelType">
            <summary>
            <para>Type: <c>TUNNEL_TYPE</c></para>
            <para>The encapsulation method used by a tunnel if the adapter address is a tunnel.</para>
            <para><c>Note</c> This structure member is only available on Windows Vista and later.</para>
            <para>The tunnel type is defined by the Internet Assigned Names Authority (IANA). For more information, see</para>
            <para>http://www.iana.org/assignments/ianaiftype-mib</para>
            <para>. This member can be one of the values from the</para>
            <para>TUNNEL_TYPE</para>
            <para>enumeration type defined in the</para>
            <para>Ifdef.h</para>
            <para>header file.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>TUNNEL_TYPE_NONE 0</term>
            <term>Not a tunnel.</term>
            </item>
            <item>
            <term>TUNNEL_TYPE_OTHER 1</term>
            <term>None of the following tunnel types.</term>
            </item>
            <item>
            <term>TUNNEL_TYPE_DIRECT 2</term>
            <term>
            A packet is encapsulated directly within a normal IP header, with no intermediate header, and unicast to the remote tunnel endpoint.
            </term>
            </item>
            <item>
            <term>TUNNEL_TYPE_6TO4 11</term>
            <term>
            An IPv6 packet is encapsulated directly within an IPv4 header, with no intermediate header, and unicast to the destination
            determined by the 6to4 protocol.
            </term>
            </item>
            <item>
            <term>TUNNEL_TYPE_ISATAP 13</term>
            <term>
            An IPv6 packet is encapsulated directly within an IPv4 header, with no intermediate header, and unicast to the destination
            determined by the ISATAP protocol.
            </term>
            </item>
            <item>
            <term>TUNNEL_TYPE_TEREDO 14</term>
            <term>Teredo encapsulation for IPv6 packets.</term>
            </item>
            <item>
            <term>TUNNEL_TYPE_IPHTTPS 15</term>
            <term>IP over HTTPS encapsulation for IPv6 packets.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.Dhcpv6Server">
            <summary>
            <para>Type: <c>SOCKET_ADDRESS</c></para>
            <para>
            The IPv6 address of the DHCPv6 server for the adapter address. This member is only applicable to an IPv6 adapter address
            configured using DHCPv6. This structure member is not currently supported and is reserved for future use.
            </para>
            <para><c>Note</c> This structure member is only available on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.Dhcpv6ClientDuid">
            <summary>
            <para>Type: <c>BYTE[MAX_DHCPV6_DUID_LENGTH]</c></para>
            <para>
            The DHCP unique identifier (DUID) for the DHCPv6 client. This member is only applicable to an IPv6 adapter address configured
            using DHCPv6.
            </para>
            <para><c>Note</c> This structure member is only available on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.Dhcpv6ClientDuidLength">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The length, in bytes, of the DHCP unique identifier (DUID) for the DHCPv6 client. This member is only applicable to an IPv6
            adapter address configured using DHCPv6.
            </para>
            <para><c>Note</c> This structure member is only available on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.Dhcpv6Iaid">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The identifier for an identity association chosen by the DHCPv6 client. This member is only applicable to an IPv6 adapter
            address configured using DHCPv6.
            </para>
            <para><c>Note</c> This structure member is only available on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.FirstDnsSuffix">
            <summary>
            <para>Type: <c>PIP_ADAPTER_DNS_SUFFIX</c></para>
            <para>A pointer to the first IP_ADAPTER_DNS_SUFFIX structure in a linked list of DNS suffixes for the adapter.</para>
            <para>
            <c>Note</c> This structure member is only available on Windows Vista with SP1and later and on Windows Server 2008 and later.
            </para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.UnicastAddresses">
            <summary>A sequence of IP_ADAPTER_UNICAST_ADDRESS structures for the adapter.</summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.AnycastAddresses">
            <summary>A sequence of IP_ADAPTER_ANYCAST_ADDRESS structures for the adapter.</summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.MulticastAddresses">
            <summary>A sequence of IP_ADAPTER_MULTICAST_ADDRESS structures for the adapter.</summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.DnsServerAddresses">
            <summary>A sequence of IP_ADAPTER_DNS_SERVER_ADDRESS structures for the adapter.</summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.Prefixes">
            <summary>A sequence of IP_ADAPTER_PREFIX structures for the adapter.</summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.WinsServerAddresses">
            <summary>A sequence of IP_ADAPTER_WINS_SERVER_ADDRESS structures for the adapter.</summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.GatewayAddresses">
            <summary>A sequence of IP_ADAPTER_GATEWAY_ADDRESS structures for the adapter.</summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.DnsSuffixes">
            <summary>A sequence of IP_ADAPTER_DNS_SUFFIX structures for the adapter.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ADDRESSES.GetNext">
            <summary>Gets the next element in the linked list.</summary>
            <returns>A nullable type. A <see langword="null"/> value indicates the end of the list.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ANYCAST_ADDRESS">
            <summary>
            <para>
            The <c>IP_ADAPTER_ANYCAST_ADDRESS</c> structure stores a single anycast IP address in a linked list of addresses for a particular adapter.
            </para>
            </summary>
            <remarks>
            <para>
            The IP_ADAPTER_ADDRESSES structure is retrieved by the GetAdaptersAddresses function. The <c>FirstAnycastAddress</c> member of
            the <c>IP_ADAPTER_ADDRESSES</c> structure is a pointer to a linked list of <c>IP_ADAPTER_ANYCAST_ADDRESS</c> structures.
            </para>
            <para>
            The SOCKET_ADDRESS structure is used in the <c>IP_ADAPTER_ANYCAST_ADDRESS</c> structure. On the Microsoft Windows Software
            Development Kit (SDK) released for Windows Vista and later, the organization of header files has changed and the
            <c>SOCKET_ADDRESS</c> structure is defined in the Ws2def.h header file which is automatically included by the Winsock2.h header
            file. On the Platform Software Development Kit (SDK) released for Windows Server 2003 and Windows XP, the <c>SOCKET_ADDRESS</c>
            structure is declared in the Winsock2.h header file. In order to use the <c>IP_ADAPTER_ANYCAST_ADDRESS</c> structure, the
            Winsock2.h header file must be included before the Iphlpapi.h header file.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ANYCAST_ADDRESS.Length">
            <summary>Specifies the length of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ANYCAST_ADDRESS.Flags">
            <summary>Specifies flags for this address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ANYCAST_ADDRESS.Next">
            <summary>
            <para>Type: <c>struct _IP_ADAPTER_ANYCAST_ADDRESS*</c></para>
            <para>A pointer to the next anycast IP address structure in the list.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ANYCAST_ADDRESS.Address">
            <summary>
            <para>Type: <c>SOCKET_ADDRESS</c></para>
            <para>The IP address for this anycast IP address entry. This member can be an IPv6 address or an IPv4 address.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ANYCAST_ADDRESS.GetNext">
            <summary>
            <para>Gets a reference to the next <c>IP_ADAPTER_ANYCAST_ADDRESS</c> structure in the list.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_ANYCAST_ADDRESS.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_DNS_SERVER_ADDRESS">
            <summary>
            <para>
            The <c>IP_ADAPTER_DNS_SERVER_ADDRESS</c> structure stores a single DNS server address in a linked list of DNS server addresses
            for a particular adapter.
            </para>
            </summary>
            <remarks>
            <para>
            The IP_ADAPTER_ADDRESSES structure is retrieved by the GetAdaptersAddresses function. The <c>FirstDnsServerAddress</c> member of
            the <c>IP_ADAPTER_ADDRESSES</c> structure is a pointer to a linked list of <c>IP_ADAPTER_DNS_SERVER_ADDRESS</c> structures.
            </para>
            <para>
            The SOCKET_ADDRESS structure is used in the <c>IP_ADAPTER_DNS_SERVER_ADDRESS</c> structure. On the Microsoft Windows Software
            Development Kit (SDK) released for Windows Vista and later, the organization of header files has changed and the
            <c>SOCKET_ADDRESS</c> structure is defined in the Ws2def.h header file which is automatically included by the Winsock2.h header
            file. On the Platform Software Development Kit (SDK) released for Windows Server 2003 and Windows XP, the <c>SOCKET_ADDRESS</c>
            structure is declared in the Winsock2.h header file. In order to use the <c>IP_ADAPTER_DNS_SERVER_ADDRESS</c> structure, the
            Winsock2.h header file must be included before the Iphlpapi.h header file.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_DNS_SERVER_ADDRESS.Length">
            <summary>Specifies the length of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_DNS_SERVER_ADDRESS.Reserved">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_DNS_SERVER_ADDRESS.Next">
            <summary>
            <para>A pointer to the next DNS server address structure in the list.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_DNS_SERVER_ADDRESS.Address">
            <summary>
            <para>The IP address for this DNS server entry. This member can be an IPv6 address or an IPv4 address.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_DNS_SERVER_ADDRESS.GetNext">
            <summary>
            <para>Gets a reference to the next <c>IP_ADAPTER_DNS_SERVER_ADDRESS</c> structure in the list.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_DNS_SERVER_ADDRESS.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_DNS_SUFFIX">
            <summary>
            <para>The <c>IP_ADAPTER_DNS_SUFFIX</c> structure stores a DNS suffix in a linked list of DNS suffixes for a particular adapter.</para>
            </summary>
            <remarks>
            <para>
            The IP_ADAPTER_ADDRESSES structure is retrieved by the GetAdaptersAddresses function. The <c>FirstDnsSuffix</c> member of the
            <c>IP_ADAPTER_ADDRESSES</c> structure is a pointer to a linked list of <c>IP_ADAPTER_DNS_SUFFIX</c> structures.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_DNS_SUFFIX.Next">
            <summary>
            <para>A pointer to the next DNS suffix in the linked list.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_DNS_SUFFIX.String">
            <summary>
            <para>The DNS suffix for this DNS suffix entry.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_DNS_SUFFIX.GetNext">
            <summary>
            <para>Gets a reference to the next <c>IP_ADAPTER_DNS_SUFFIX</c> structure in the list.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_DNS_SUFFIX.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_GATEWAY_ADDRESS">
            <summary>
            <para>
            The <c>IP_ADAPTER_GATEWAY_ADDRESS</c> structure stores a single gateway address in a linked list of gateway addresses for a
            particular adapter.
            </para>
            </summary>
            <remarks>
            <para>
            The IP_ADAPTER_ADDRESSES structure is retrieved by the GetAdaptersAddresses function. The <c>FirstGatewayAddress</c> member of
            the <c>IP_ADAPTER_ADDRESSES</c> structure is a pointer to a linked list of <c>IP_ADAPTER_GATEWAY_ADDRESS</c> structures.
            </para>
            <para>
            The SOCKET_ADDRESS structure is used in the <c>IP_ADAPTER_GATEWAY_ADDRESS</c> structure. On the Microsoft Windows Software
            Development Kit (SDK) released for Windows Vista and later, the organization of header files has changed and the
            <c>SOCKET_ADDRESS</c> structure is defined in the Ws2def.h header file which is automatically included by the Winsock2.h header
            file. On the Platform Software Development Kit (SDK) released for Windows Server 2003 and Windows XP, the <c>SOCKET_ADDRESS</c>
            structure is declared in the Winsock2.h header file. In order to use the <c>IP_ADAPTER_GATEWAY_ADDRESS</c> structure, the
            Winsock2.h header file must be included before the Iphlpapi.h header file.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_GATEWAY_ADDRESS.Length">
            <summary>Specifies the length of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_GATEWAY_ADDRESS.Reserved">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_GATEWAY_ADDRESS.Next">
            <summary>
            <para>A pointer to the next gateway address structure in the list.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_GATEWAY_ADDRESS.Address">
            <summary>
            <para>The IP address for this gateway entry. This member can be an IPv6 address or an IPv4 address.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_GATEWAY_ADDRESS.GetNext">
            <summary>
            <para>Gets a reference to the next <c>IP_ADAPTER_GATEWAY_ADDRESS</c> structure in the list.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_GATEWAY_ADDRESS.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO">
            <summary>
            <para>The <c>IP_ADAPTER_INFO</c> structure contains information about a particular network adapter on the local computer.</para>
            </summary>
            <remarks>
            <para>
            The <c>IP_ADAPTER_INFO</c> structure is limited to IPv4 information about a particular network adapter on the local computer. The
            <c>IP_ADAPTER_INFO</c> structure is retrieved by calling the GetAdaptersInfofunction.
            </para>
            <para>
            When using Visual Studio 2005 and later, the <c>time_t</c> datatype defaults to an 8-byte datatype, not the 4-byte datatype used
            for the <c>LeaseObtained</c> and <c>LeaseExpires</c> members on a 32-bit platform. To properly use the <c>IP_ADAPTER_INFO</c>
            structure on a 32-bit platform, define <c>_USE_32BIT_TIME_T</c> (use as an option, for example) when compiling the application to
            force the <c>time_t</c> datatype to a 4-byte datatype.
            </para>
            <para>
            For use on Windows XP and later, the IP_ADAPTER_ADDRESSES structure contains both IPv4 and IPv6 information. The
            GetAdaptersAddresses function retrieves IPv4 and IPv6 adapter information.
            </para>
            <para>Examples</para>
            <para>This example retrieves the adapter information and prints various properties of each adapter.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.Next">
            <summary>
            <para>Type: <c>struct _IP_ADAPTER_INFO*</c></para>
            <para>A pointer to the next adapter in the list of adapters.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.ComboIndex">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>Reserved.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.AdapterName">
            <summary>
            <para>Type: <c>char[MAX_ADAPTER_NAME_LENGTH + 4]</c></para>
            <para>An ANSI character string of the name of the adapter.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.AdapterDescription">
            <summary>
            <para>Type: <c>char[MAX_ADAPTER_DESCRIPTION_LENGTH + 4]</c></para>
            <para>An ANSI character string that contains the description of the adapter.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.AddressLength">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>The length, in bytes, of the hardware address for the adapter.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.Address">
            <summary>
            <para>Type: <c>BYTE[MAX_ADAPTER_ADDRESS_LENGTH]</c></para>
            <para>The hardware address for the adapter represented as a <c>BYTE</c> array.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.Index">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The adapter index.</para>
            <para>
            The adapter index may change when an adapter is disabled and then enabled, or under other circumstances, and should not be
            considered persistent.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.Type">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>The adapter type. Possible values for the adapter type are listed in the Ipifcons.h header file.</para>
            <para>The table below lists common values for the adapter type although other values are possible on Windows Vista and later.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MIB_IF_TYPE_OTHER 1</term>
            <term>Some other type of network interface.</term>
            </item>
            <item>
            <term>MIB_IF_TYPE_ETHERNET 6</term>
            <term>An Ethernet network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_ISO88025_TOKENRING 9</term>
            <term>MIB_IF_TYPE_TOKENRING</term>
            </item>
            <item>
            <term>MIB_IF_TYPE_PPP 23</term>
            <term>A PPP network interface.</term>
            </item>
            <item>
            <term>MIB_IF_TYPE_LOOPBACK 24</term>
            <term>A software loopback network interface.</term>
            </item>
            <item>
            <term>MIB_IF_TYPE_SLIP 28</term>
            <term>An ATM network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_IEEE80211 71</term>
            <term>An IEEE 802.11 wireless network interface.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.DhcpEnabled">
            <summary>
            <para>Type: <c>UINT</c></para>
            <para>An option value that specifies whether the dynamic host configuration protocol (DHCP) is enabled for this adapter.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.CurrentIpAddress">
            <summary>
            <para>Type: <c>PIP_ADDR_STRING</c></para>
            <para>Reserved.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.IpAddressList">
            <summary>
            <para>Type: <c>IP_ADDR_STRING</c></para>
            <para>
            The list of IPv4 addresses associated with this adapter represented as a linked list of <c>IP_ADDR_STRING</c> structures. An
            adapter can have multiple IPv4 addresses assigned to it.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.GatewayList">
            <summary>
            <para>Type: <c>IP_ADDR_STRING</c></para>
            <para>
            The IPv4 address of the gateway for this adapter represented as a linked list of <c>IP_ADDR_STRING</c> structures. An adapter
            can have multiple IPv4 gateway addresses assigned to it. This list usually contains a single entry for IPv4 address of the
            default gateway for this adapter.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.DhcpServer">
            <summary>
            <para>Type: <c>IP_ADDR_STRING</c></para>
            <para>
            The IPv4 address of the DHCP server for this adapter represented as a linked list of <c>IP_ADDR_STRING</c> structures. This
            list contains a single entry for the IPv4 address of the DHCP server for this adapter. A value of 255.255.255.255 indicates
            the DHCP server could not be reached, or is in the process of being reached.
            </para>
            <para>This member is only valid when the <c>DhcpEnabled</c> member is nonzero.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.HaveWins">
            <summary>
            <para>Type: <c>BOOL</c></para>
            <para>An option value that specifies whether this adapter uses the Windows Internet Name Service (WINS).</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.PrimaryWinsServer">
            <summary>
            <para>Type: <c>IP_ADDR_STRING</c></para>
            <para>
            The IPv4 address of the primary WINS server represented as a linked list of <c>IP_ADDR_STRING</c> structures. This list
            contains a single entry for the IPv4 address of the primary WINS server for this adapter.
            </para>
            <para>This member is only valid when the <c>HaveWins</c> member is <c>TRUE</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.SecondaryWinsServer">
            <summary>
            <para>Type: <c>IP_ADDR_STRING</c></para>
            <para>
            The IPv4 address of the secondary WINS server represented as a linked list of <c>IP_ADDR_STRING</c> structures. An adapter
            can have multiple secondary WINS server addresses assigned to it.
            </para>
            <para>This member is only valid when the <c>HaveWins</c> member is <c>TRUE</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.LeaseObtained">
            <summary>
            <para>Type: <c>time_t</c></para>
            <para>The time when the current DHCP lease was obtained.</para>
            <para>This member is only valid when the <c>DhcpEnabled</c> member is nonzero.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.LeaseExpires">
            <summary>
            <para>Type: <c>time_t</c></para>
            <para>The time when the current DHCP lease expires.</para>
            <para>This member is only valid when the <c>DhcpEnabled</c> member is nonzero.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.IpAddresses">
            <summary>Gets a sequence of IP_ADDR_STRING values representing IP addresses.</summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.Gateways">
            <summary>Gets a sequence of IP_ADDR_STRING values representing gateways.</summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.SecondaryWinsServers">
            <summary>Gets a sequence of IP_ADDR_STRING values representing secondary WINS servers.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_INFO.GetNext">
            <summary>
            <para>Gets a reference to the next <c>IP_ADAPTER_INFO</c> structure in the list.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_MULTICAST_ADDRESS">
            <summary>
            <para>
            The <c>IP_ADAPTER_MULTICAST_ADDRESS</c> structure stores a single multicast address in a linked-list of addresses for a
            particular adapter.
            </para>
            </summary>
            <remarks>
            <para>
            The IP_ADAPTER_ADDRESSES structure is retrieved by the GetAdaptersAddresses function. The <c>FirstMulticastAddress</c> member of
            the <c>IP_ADAPTER_ADDRESSES</c> structure is a pointer to a linked list of <c>IP_ADAPTER_MULTICAST_ADDRESS</c> structures.
            </para>
            <para>
            The SOCKET_ADDRESS structure is used in the <c>IP_ADAPTER_MULTICAST_ADDRESS</c> structure. On the Microsoft Windows Software
            Development Kit (SDK) released for Windows Vista and later, the organization of header files has changed and the
            <c>SOCKET_ADDRESS</c> structure is defined in the Ws2def.h header file which is automatically included by the Winsock2.h header
            file. On the Platform Software Development Kit (SDK) released for Windows Server 2003 and Windows XP, the <c>SOCKET_ADDRESS</c>
            structure is declared in the Winsock2.h header file. In order to use the <c>IP_ADAPTER_MULTICAST_ADDRESS</c> structure, the
            Winsock2.h header file must be included before the Iphlpapi.h header file.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_MULTICAST_ADDRESS.Length">
            <summary>Specifies the length of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_MULTICAST_ADDRESS.Flags">
            <summary>Specifies flags for this address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_MULTICAST_ADDRESS.Next">
            <summary>
            <para>Type: <c>struct _IP_ADAPTER_MULTICAST_ADDRESS*</c></para>
            <para>A pointer to the next multicast IP address structure in the list.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_MULTICAST_ADDRESS.Address">
            <summary>
            <para>Type: <c>SOCKET_ADDRESS</c></para>
            <para>The IP address for this multicast IP address entry. This member can be an IPv6 address or an IPv4 address.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_MULTICAST_ADDRESS.GetNext">
            <summary>
            <para>Gets a reference to the next <c>IP_ADAPTER_MULTICAST_ADDRESS</c> structure in the list.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_MULTICAST_ADDRESS.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_PREFIX">
            <summary>
            <para>The <c>IP_ADAPTER_PREFIX</c> structure stores an IP address prefix.</para>
            </summary>
            <remarks>
            <para>
            The IP_ADAPTER_ADDRESSES structure is retrieved by the GetAdaptersAddresses function. On Windows XP with Service Pack 1 (SP1) and
            later, the <c>FirstPrefix</c> member of the <c>IP_ADAPTER_ADDRESSES</c> structure is a pointer to a linked list of
            <c>IP_ADAPTER_PREFIX</c> structures.
            </para>
            <para>
            The SOCKET_ADDRESS structure is used in the <c>IP_ADAPTER_PREFIX</c> structure. On the Microsoft Windows Software Development Kit
            (SDK) released for Windows Vista and later, the organization of header files has changed and the <c>SOCKET_ADDRESS</c> structure
            is defined in the Ws2def.h header file which is automatically included by the Winsock2.h header file. On the Platform Software
            Development Kit (SDK) released for Windows Server 2003 and Windows XP, the <c>SOCKET_ADDRESS</c> structure is declared in the
            Winsock2.h header file. In order to use the <c>IP_ADAPTER_PREFIX</c> structure, the Winsock2.h header file must be included
            before the Iphlpapi.h header file.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_PREFIX.Length">
            <summary>Specifies the length of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_PREFIX.Flags">
            <summary>This member is reserved and should be set to zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_PREFIX.Next">
            <summary>
            <para>A pointer to the next adapter prefix structure in the list.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_PREFIX.Address">
            <summary>
            <para>The address prefix, in the form of a SOCKET_ADDRESS structure.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_PREFIX.PrefixLength">
            <summary>
            <para>The length of the prefix, in bits.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_PREFIX.GetNext">
            <summary>
            <para>Gets a reference to the next <c>IP_ADAPTER_PREFIX</c> structure in the list.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_PREFIX.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_UNICAST_ADDRESS">
            <summary>
            <para>
            The <c>IP_ADAPTER_UNICAST_ADDRESS</c> structure stores a single unicast IP address in a linked list of IP addresses for a
            particular adapter.
            </para>
            </summary>
            <remarks>
            <para>
            The IP_ADAPTER_ADDRESSES structure is retrieved by the GetAdaptersAddresses function. The <c>FirstUnicastAddress</c> member of
            the <c>IP_ADAPTER_ADDRESSES</c> structure is a pointer to a linked list of <c>IP_ADAPTER_UNICAST_ADDRESS</c> structures.
            </para>
            <para>
            The size of the <c>IP_ADAPTER_UNICAST_ADDRESS</c> structure changed on Windows Vista and later. The <c>Length</c> member should
            be used to determine which version of the <c>IP_ADAPTER_UNICAST_ADDRESS</c> structure is being used.
            </para>
            <para>
            The version of the <c>IP_ADAPTER_UNICAST_ADDRESS</c> structure on Windows Vista and later has the following new member added: <c>OnLinkPrefixLength</c>.
            </para>
            <para>
            When this structure is used with the GetAdaptersAddresses function and similar management functions, all configured addresses are
            shown, including duplicate addresses. Such duplicate address entries can occur when addresses are configured statically. Such
            reporting facilitates administrator troubleshooting. The <c>DadState</c> member is effective in identifying and troubleshooting
            such situations.
            </para>
            <para>
            In the Windows SDK, the version of the structure for use on Windows Vista and later is defined as
            <c>IP_ADAPTER_UNICAST_ADDRESS_LH</c>. In the Windows SDK, the version of this structure to be used on earlier systems including
            Windows XP with Service Pack 1 (SP1) and later is defined as <c>IP_ADAPTER_UNICAST_ADDRESS_XP</c>. When compiling an application
            if the target platform is Windows Vista and later (, , or ), the <c>IP_ADAPTER_UNICAST_ADDRESS_LH</c> structure is typedefed to
            the <c>IP_ADAPTER_UNICAST_ADDRESS</c> structure. When compiling an application if the target platform is not Windows Vista and
            later, the <c>IP_ADAPTER_UNICAST_ADDRESS_XP</c> structure is typedefed to the <c>IP_ADAPTER_UNICAST_ADDRESS</c> structure.
            </para>
            <para>
            The SOCKET_ADDRESS structure is used in the <c>IP_ADAPTER_UNICAST_ADDRESS</c> structure. On the Microsoft Windows Software
            Development Kit (SDK) released for Windows Vista and later, the organization of header files has changed and the
            <c>SOCKET_ADDRESS</c> structure is defined in the Ws2def.h header file which is automatically included by the Winsock2.h header
            file. On the Platform Software Development Kit (SDK) released for Windows Server 2003 and Windows XP, the <c>SOCKET_ADDRESS</c>
            structure is declared in the Winsock2.h header file. In order to use the <c>IP_ADAPTER_UNICAST_ADDRESS</c> structure, the
            Winsock2.h header file must be included before the Iphlpapi.h header file.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_UNICAST_ADDRESS.Length">
            <summary>Specifies the length of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_UNICAST_ADDRESS.Flags">
            <summary>This member is reserved and should be set to zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_UNICAST_ADDRESS.Next">
            <summary>
            <para>Type: <c>struct _IP_ADAPTER_UNICAST_ADDRESS*</c></para>
            <para>A pointer to the next IP adapter address structure in the list.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_UNICAST_ADDRESS.Address">
            <summary>
            <para>Type: <c>SOCKET_ADDRESS</c></para>
            <para>The IP address for this unicast IP address entry. This member can be an IPv6 address or an IPv4 address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_UNICAST_ADDRESS.PrefixOrigin">
            <summary>
            <para>Type: <c>IP_PREFIX_ORIGIN</c></para>
            <para>
            The prefix or network part of IP the address. This member can be one of the values from the IP_PREFIX_ORIGIN enumeration type
            defined in the Iptypes.h header file.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_UNICAST_ADDRESS.SuffixOrigin">
            <summary>
            <para>Type: <c>IP_SUFFIX_ORIGIN</c></para>
            <para>
            The suffix or host part of the IP address. This member can be one of the values from the IP_SUFFIX_ORIGIN enumeration type
            defined in the Iptypes.h header file.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_UNICAST_ADDRESS.DadState">
            <summary>
            <para>Type: <c>IP_DAD_STATE</c></para>
            <para>
            The duplicate address detection (DAD) state. This member can be one of the values from the IP_DAD_STATE enumeration type
            defined in the Iptypes.h header file. Duplicate address detection is available for both IPv4 and IPv6 addresses.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_UNICAST_ADDRESS.ValidLifetime">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The maximum lifetime, in seconds, that the IP address is valid. A value of 0xffffffff is considered to be infinite.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_UNICAST_ADDRESS.PreferredLifetime">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The preferred lifetime, in seconds, that the IP address is valid. A value of 0xffffffff is considered to be infinite.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_UNICAST_ADDRESS.LeaseLifetime">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The lease lifetime, in seconds, that the IP address is valid.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_UNICAST_ADDRESS.OnLinkPrefixLength">
            <summary>
            <para>Type: <c>UINT8</c></para>
            <para>
            The length, in bits, of the prefix or network part of the IP address. For a unicast IPv4 address, any value greater than 32
            is an illegal value. For a unicast IPv6 address, any value greater than 128 is an illegal value. A value of 255 is commonly
            used to represent an illegal value.
            </para>
            <para><c>Note</c> This structure member is only available on Windows Vista and later.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_UNICAST_ADDRESS.GetNext">
            <summary>
            <para>Gets a reference to the next <c>IP_ADAPTER_UNICAST_ADDRESS</c> structure in the list.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_UNICAST_ADDRESS.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_WINS_SERVER_ADDRESS">
            <summary>
            <para>
            The <c>IP_ADAPTER_WINS_SERVER_ADDRESS</c> structure stores a single Windows Internet Name Service (WINS) server address in a
            linked list of WINS server addresses for a particular adapter.
            </para>
            </summary>
            <remarks>
            <para>
            The IP_ADAPTER_ADDRESSES structure is retrieved by the GetAdaptersAddresses function. The <c>FirstWinsServerAddress</c> member of
            the <c>IP_ADAPTER_ADDRESSES</c> structure is a pointer to a linked list of <c>IP_ADAPTER_WINS_SERVER_ADDRESS</c> structures.
            </para>
            <para>
            The SOCKET_ADDRESS structure is used in the IP_ADAPTER_GATEWAY_ADDRESS structure. On the Microsoft Windows Software Development
            Kit (SDK) released for Windows Vista and later, the organization of header files has changed and the <c>SOCKET_ADDRESS</c>
            structure is defined in the Ws2def.h header file which is automatically included by the Winsock2.h header file. On the Platform
            Software Development Kit (SDK) released for Windows Server 2003 and Windows XP, the <c>SOCKET_ADDRESS</c> structure is declared
            in the Winsock2.h header file. In order to use the <c>IP_ADAPTER_GATEWAY_ADDRESS</c> structure, the Winsock2.h header file must
            be included before the Iphlpapi.h header file.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_WINS_SERVER_ADDRESS.Length">
            <summary>Specifies the length of this structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_WINS_SERVER_ADDRESS.Reserved">
            <summary>This member is reserved and should be set to zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_WINS_SERVER_ADDRESS.Next">
            <summary>
            <para>A pointer to the next WINS server address structure in the list.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_WINS_SERVER_ADDRESS.Address">
            <summary>
            <para>The IP address for this WINS server entry. This member can be an IPv6 address or an IPv4 address.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_WINS_SERVER_ADDRESS.GetNext">
            <summary>
            <para>Gets a reference to the next <c>IP_ADAPTER_WINS_SERVER_ADDRESS</c> structure in the list.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADAPTER_WINS_SERVER_ADDRESS.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADDR_STRING">
            <summary>
            The <c>IP_ADDR_STRING</c> structure represents a node in a linked-list of IPv4 addresses.
            </summary>
            <seealso cref="T:Vanara.PInvoke.IpHlpApi.ILinkedListElement`1" />
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADDR_STRING.Next">
            <summary>
            A pointer to the next <c>IP_ADDR_STRING</c> structure in the list.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADDR_STRING.IpAddress">
            <summary>
            A value that specifies a structure type with a single member, <c>String</c>. The <c>String</c> member is a <c>char</c> array
            of size 16. This array holds an IPv4 address in dotted decimal notation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADDR_STRING.IpMask">
            <summary>
            A value that specifies a structure type with a single member, <c>String</c>. The <c>String</c> member is a <c>char</c> array
            of size 16. This array holds the IPv4 subnet mask in dotted decimal notation.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADDR_STRING.Context">
            <summary>
            A network table entry (NTE). This value corresponds to the NTEContext parameters in the AddIPAddress and DeleteIPAddress functions.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADDR_STRING.GetNext">
            <summary>
            Gets a reference to the next <c>IP_ADDR_STRING</c> structure in the list.
            </summary>
            <returns>
            A nullable type. A <see langword="null" /> value indicates the end of the list.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADDRESS_STRING">
            <summary>
            The <c>IP_ADDRESS_STRING</c> structure stores an IPv4 address in dotted decimal notation. The <c>IP_ADDRESS_STRING</c> structure
            definition is also the type definition for the <c>IP_MASK_STRING</c> structure.
            </summary>
            <remarks>The <c>IP_ADDRESS_STRING</c> structure is used as a parameter in the IP_ADDR_STRING structure.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADDRESS_STRING.String">
            <summary>A character string that represents an IPv4 address or an IPv4 subnet mask in dotted decimal notation.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_INTERFACE_NAME_INFO">
            <summary>The <c>IP_INTERFACE_NAME_INFO</c> structure contains information about an IPv4 interface on the local computer.</summary>
            <remarks>
            <para>
            In the Microsoft Windows Software Development Kit (SDK), the version of the structure for use on Windows 2000 with Service Pack 1
            (SP1) and later is defined as <c>IP_INTERFACE_NAME_INFO_W2KSP1</c>. When compiling an application if the target platform is
            Windows 2000 with SP1 and later (, , or ), the <c>IP_INTERFACE_NAME_INFO_W2KSP1</c> structure is typedefed to the
            <c>IP_INTERFACE_NAME_INFO</c> structure.
            </para>
            <para>
            The <c>MediaType</c>, <c>ConnectionType</c>, and <c>AccessType</c> members, definitions and assigned values are available from
            the Ipifcons.h header file.
            </para>
            <para>
            The optional <c>InterfaceGuid</c> member is often set for dial-up interfaces, and can be used to distinguish multiple dial-up
            interfaces that share the same device GUID.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_INTERFACE_NAME_INFO.Index">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The index of the IP interface for the active instance.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_INTERFACE_NAME_INFO.MediaType">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The interface type as defined by the Internet Assigned Names Authority (IANA). Possible values for the interface type are
            listed in the Ipifcons.h header file.
            </para>
            <para>The table below lists common values for the interface type; although, many other values are possible.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IF_TYPE_OTHER 1</term>
            <term>Some other type of network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_ETHERNET_CSMACD 6</term>
            <term>An Ethernet network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_ISO88025_TOKENRING 9</term>
            <term>A token ring network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_PPP 23</term>
            <term>A PPP network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_SOFTWARE_LOOPBACK 24</term>
            <term>A software loopback network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_ATM 37</term>
            <term>An ATM network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_IEEE80211 71</term>
            <term>
            An IEEE 802.11 wireless network interface. On Windows Vista and later, wireless network cards are reported as
            IF_TYPE_IEEE80211. Windows Server 2003, Windows 2000 Server with SP1 and Windows XP/2000: Wireless network cards are reported
            as IF_TYPE_ETHERNET_CSMACD.
            </term>
            </item>
            <item>
            <term>IF_TYPE_TUNNEL 131</term>
            <term>A tunnel type encapsulation network interface.</term>
            </item>
            <item>
            <term>IF_TYPE_IEEE1394 144</term>
            <term>An IEEE 1394 (Firewire) high performance serial bus network interface.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_INTERFACE_NAME_INFO.ConnectionType">
            <summary>
            <para>Type: <c>UCHAR</c></para>
            <para>The interface connection type for the adapter.</para>
            <para>The possible values for this member are defined in the Ipifcons.h header file.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IF_CONNECTION_DEDICATED 1</term>
            <term>
            The connection type is dedicated. The connection comes up automatically when media sense is TRUE. For example, an Ethernet
            connection is dedicated.
            </term>
            </item>
            <item>
            <term>IF_CONNECTION_PASSIVE 2</term>
            <term>
            The connection type is passive. The remote end must bring up the connection to the local station. For example, a RAS
            interface is passive.
            </term>
            </item>
            <item>
            <term>IF_CONNECTION_DEMAND 3</term>
            <term>
            The connection type is demand-dial. A connection of this type comes up in response to a local action (sending a packet, for example).
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_INTERFACE_NAME_INFO.AccessType">
            <summary>
            <para>Type: <c>UCHAR</c></para>
            <para>A value of the IF_ACCESS_TYPE enumeration that specifies the access type for the interface.</para>
            <para>
            <c>Windows Server 2003, Windows 2000 Server with SP1 and Windows XP/2000:</c> The possible values for this member are defined
            in the Ipifcons.h header file.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IF_ACCESS_LOOPBACK 1</term>
            <term>The loopback access type. This value indicates that the interface loops back transmit data as receive data.</term>
            </item>
            <item>
            <term>IF_ACCESS_BROADCAST 2</term>
            <term>
            The LAN access type which includes Ethernet. This value indicates that the interface provides native support for multicast or
            broadcast services.
            </term>
            </item>
            <item>
            <term>IF_ACCESS_POINT_TO_POINT 3</term>
            <term>
            The point to point access type. This value indicates support for CoNDIS/WAN, except for non-broadcast multi-access (NBMA)
            interfaces. Windows Server 2003, Windows 2000 Server with SP1 and Windows XP/2000: This value was defined as
            IF_ACCESS_POINTTOPOINT in the Ipifcons.h header file.
            </term>
            </item>
            <item>
            <term>IF_ACCESS_POINT_TO_MULTI_POINT 4</term>
            <term>
            The point to multipoint access type. This value indicates support for non-broadcast multi-access media, including the RAS
            internal interface and native ATM. Windows Server 2003, Windows 2000 Server with SP1 and Windows XP/2000: This value was
            defined as IF_ACCESS_POINTTOMULTIPOINT in the Ipifcons.h header file.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_INTERFACE_NAME_INFO.DeviceGuid">
            <summary>
            <para>Type: <c>GUID</c></para>
            <para>The GUID that identifies the underlying device for the interface. This member can be a zero GUID.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_INTERFACE_NAME_INFO.InterfaceGuid">
            <summary>
            <para>Type: <c>GUID</c></para>
            <para>The GUID that identifies the interface mapped to the device. Optional. This member can be a zero GUID.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_PER_ADAPTER_INFO">
            <summary>
            <para>The <c>IP_PER_ADAPTER_INFO</c> structure contains information specific to a particular adapter.</para>
            </summary>
            <remarks>
            <para>
            APIPA enables automatic IP address configuration on networks without DHCP servers, using the IANA-reserved Class B network
            169.254.0.0, with a subnet mask of 255.255.0.0. Clients send ARP messages to ensure the selected address is not currently in use.
            Clients auto-configured in this fashion continue to poll for a valid DHCP server every five minutes, and if found, the DHCP
            server configuration overrides all auto-configuration settings.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_PER_ADAPTER_INFO.AutoconfigEnabled">
            <summary>
            <para>Specifies whether IP address auto-configuration (APIPA) is enabled on this adapter. See Remarks.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_PER_ADAPTER_INFO.AutoconfigActive">
            <summary>
            <para>Specifies whether this adapter's IP address is currently auto-configured by APIPA.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_PER_ADAPTER_INFO.CurrentDnsServer">
            <summary>
            <para>Reserved. Use the <c>DnsServerList</c> member to obtain the DNS servers for the local computer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_PER_ADAPTER_INFO.DnsServerList">
            <summary>
            <para>A linked list of IP_ADDR_STRING structures that specify the set of DNS servers used by the local computer.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.IP_PER_ADAPTER_INFO.DnsServers">
            <summary>
            <para>
            A list of IP_ADDR_STRING structures pulled from <see cref="F:Vanara.PInvoke.IpHlpApi.IP_PER_ADAPTER_INFO.DnsServerList"/> that specify the set of DNS servers used by the
            local computer.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.PIP_PER_ADAPTER_INFO">
            <summary>
            <para>The <c>IP_PER_ADAPTER_INFO</c> structure contains information specific to a particular adapter.</para>
            </summary>
            <remarks>
            <para>
            APIPA enables automatic IP address configuration on networks without DHCP servers, using the IANA-reserved Class B network
            169.254.0.0, with a subnet mask of 255.255.0.0. Clients send ARP messages to ensure the selected address is not currently in use.
            Clients auto-configured in this fashion continue to poll for a valid DHCP server every five minutes, and if found, the DHCP
            server configuration overrides all auto-configuration settings.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.PIP_PER_ADAPTER_INFO.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.PIP_PER_ADAPTER_INFO"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.PIP_PER_ADAPTER_INFO.AutoconfigActive">
            <summary>
            <para>Specifies whether this adapter's IP address is currently auto-configured by APIPA.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.PIP_PER_ADAPTER_INFO.AutoconfigEnabled">
            <summary>
            <para>Specifies whether IP address auto-configuration (APIPA) is enabled on this adapter. See Remarks.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.PIP_PER_ADAPTER_INFO.DnsServerList">
            <summary>
            <para>A linked list of IP_ADDR_STRING structures that specify the set of DNS servers used by the local computer.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.PIP_PER_ADAPTER_INFO.op_Implicit(Vanara.PInvoke.IpHlpApi.PIP_PER_ADAPTER_INFO)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.PIP_PER_ADAPTER_INFO"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="info">The PIP_PER_ADAPTER_INFO instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_USE_CURRENT_TTL">
            <summary>Set the value of MIB_IPSTATS.dwDefaultTTL to this value to keep the current value when calling SetIpStatistics.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPADDRTYPE">
            <summary>The address type or state for <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPADDRROW"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPADDRTYPE.MIB_IPADDR_PRIMARY">
            <summary>Primary IP address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPADDRTYPE.MIB_IPADDR_DYNAMIC">
            <summary>Dynamic IP address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPADDRTYPE.MIB_IPADDR_DISCONNECTED">
            <summary>Address is on disconnected interface</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPADDRTYPE.MIB_IPADDR_DELETED">
            <summary>Address is being deleted</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPADDRTYPE.MIB_IPADDR_TRANSIENT">
            <summary>Transient address</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPADDRTYPE.MIB_IPADDR_DNS_ELIGIBLE">
            <summary>Address is eligible for DNS.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO">
            <summary>The MIB_IPFORWARD_PROTO enumeration indicates which protocols have updated routes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_OTHER">
            <summary>A route added by a protocol not specified in [RFC1354].</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_LOCAL">
            <summary>A route added locally on an interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_NETMGMT">
            <summary>
            A static route. This value is used to identify route information for IP routing set through network management such as DHCP,
            the Simple Network Management Protocol (SNMP), or by any other API to create routes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_ICMP">
            <summary>A route added as a result of an Internet Control Message Protocol (ICMP) redirect.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_EGP">
            <summary>A route added by the Exterior Gateway Protocol (EGP), a dynamic routing protocol.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_GGP">
            <summary>A route added by the Gateway-to-Gateway Protocol (GGP), a dynamic routing protocol.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_HELLO">
            <summary>
            A route added by the Hellospeak protocol, a dynamic routing protocol. This protocol is not supported and MUST NOT be used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_RIP">
            <summary>
            A route added by the Berkeley Routing Information Protocol (RIP) or RIP-II, a dynamic routing protocol. See [RFC1058] and [RFC1723].
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_IS_IS">
            <summary>
            A route added by the Intermediate System-to-Intermediate System (IS-IS) protocol, a dynamic routing protocol. The IS-IS
            protocol was developed for use in the Open Systems Interconnection (OSI) protocol suite.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_ES_IS">
            <summary>
            A route added by the End System-to-Intermediate System (ES-IS) protocol, a dynamic routing protocol. The ES-IS protocol was
            developed for use in the Open Systems Interconnection (OSI) protocol suite.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_CISCO">
            <summary>A route added by the Cisco Interior Gateway Routing Protocol (IGRP), a dynamic routing protocol.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_BBN">
            <summary>
            A route added by the Bolt, Beranek, and Newman (BBN) Interior Gateway Protocol (IGP) that used the Shortest Path First (SPF)
            algorithm, a dynamic routing protocol.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_OSPF">
            <summary>A route added by the Open Shortest Path First (OSPF) protocol, a dynamic routing protocol.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_BGP">
            <summary>A route added by the Border Gateway Protocol (BGP), a dynamic routing protocol.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_IDPR">
            <summary>The mib ipproto idpr</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_EIGRP">
            <summary>The mib ipproto eigrp</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_DVMRP">
            <summary>The mib ipproto DVMRP</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_RPL">
            <summary>The mib ipproto RPL</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_DHCP">
            <summary>The mib ipproto DHCP</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_NT_AUTOSTATIC">
            <summary>A route that was originally generated by a routing protocol, but now is static.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_NT_STATIC">
            <summary>A route added as a static route from the routing user interface (5) or a routing command.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_PROTO.MIB_IPPROTO_NT_STATIC_NON_DOD">
            <summary>
            A route added as a static route from the routing user interface or a routing command. These routes do not cause demand-dial.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_TYPE">
            <summary>Specifies the type of the IP route.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_TYPE.MIB_IPROUTE_TYPE_OTHER">
            <summary>Other than the type specified in [RFC1354].</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_TYPE.MIB_IPROUTE_TYPE_INVALID">
            <summary>An invalid route is deleted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_TYPE.MIB_IPROUTE_TYPE_DIRECT">
            <summary>A local route where the next hop is the final destination (a local interface).</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_TYPE.MIB_IPROUTE_TYPE_INDIRECT">
            <summary>The remote route where the next hop is not the final destination (a remote destination).</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_TYPE">
            <summary>The type of ARP entry in <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPNETROW"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_TYPE.MIB_IPNET_TYPE_OTHER">
            <summary>Other</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_TYPE.MIB_IPNET_TYPE_INVALID">
            <summary>An invalid ARP type. This can indicate an unreachable or incomplete ARP entry.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_TYPE.MIB_IPNET_TYPE_DYNAMIC">
            <summary>A dynamic ARP type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_TYPE.MIB_IPNET_TYPE_STATIC">
            <summary>A static ARP type.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS_FORWARDING">
            <summary>Specifies whether IP forwarding is enabled or disabled for a protocol (IPv4 or IPv6).</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS_FORWARDING.MIB_IP_FORWARDING">
            <summary>IP forwarding is enabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS_FORWARDING.MIB_IP_NOT_FORWARDING">
            <summary>IP forwarding is not enabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS_FORWARDING.MIB_USE_CURRENT_FORWARDING">
            <summary>
            Use the current IP forwarding setting. This value is only applicable when setting the forwarding and time-to-live (TTL)
            options using the SetIpStatistics and SetIpStatisticsEx functions.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCP_STATE">
            <summary>The MIB_TCP_STATE enumeration enumerates different possible TCP states.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP_STATE.MIB_TCP_STATE_CLOSED">
            <summary>The TCP connection is closed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP_STATE.MIB_TCP_STATE_LISTEN">
            <summary>The TCP connection is in the listen state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP_STATE.MIB_TCP_STATE_SYN_SENT">
            <summary>A SYN packet has been sent.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP_STATE.MIB_TCP_STATE_SYN_RCVD">
            <summary>A SYN packet has been received.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP_STATE.MIB_TCP_STATE_ESTAB">
            <summary>The TCP connection has been established.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP_STATE.MIB_TCP_STATE_FIN_WAIT1">
            <summary>The TCP connection is waiting for a FIN packet.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP_STATE.MIB_TCP_STATE_FIN_WAIT2">
            <summary>The TCP connection is waiting for a FIN packet.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP_STATE.MIB_TCP_STATE_CLOSE_WAIT">
            <summary>The TCP connection is in the close wait state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP_STATE.MIB_TCP_STATE_CLOSING">
            <summary>The TCP connection is closing.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP_STATE.MIB_TCP_STATE_LAST_ACK">
            <summary>The TCP connection is in the last ACK state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP_STATE.MIB_TCP_STATE_TIME_WAIT">
            <summary>The TCP connection is in the time wait state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP_STATE.MIB_TCP_STATE_DELETE_TCB">
            <summary>The TCP connection is in the delete TCB state.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_ICMP">
            <summary>
            The <c>MIB_ICMP</c> structure contains the Internet Control Message Protocol (ICMP) statistics for a particular computer.
            </summary>
            <remarks>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the <c>MIB_ICMP</c> structure is defined in the Ipmib.h header file not in the Iprtrmib.h header file. Note that
            the Ipmib.h header file is automatically included in Iprtrmib.h which is automatically included in the Iphlpapi.h header file.
            The Ipmib.h and Iprtrmib.h header files should never be used directly.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_ICMP.stats">
            <summary>A MIBICMPINFO structure that contains the ICMP statistics for the computer.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_ICMP_EX">
            <summary>
            <para>
            The <c>MIB_ICMP_EX</c> structure contains the extended Internet Control Message Protocol (ICMP) statistics for a particular computer.
            </para>
            </summary>
            <remarks>
            <para>
            Two MIBICMPSTATS_EX structures are required to hold all the extended ICMP statistics for a given computer. One
            <c>MIBICMPSTATS_EX</c> structure contains the extended statistics for incoming ICMP messages. The other contains the extended
            statistics for outgoing ICMP messages. For this reason, the <c>MIB_ICMP_EX</c> structure contains two <c>MIBICMPSTATS_EX</c> structures.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the <c>MIB_ICMP_EX</c> structure is defined in the Ipmib.h header file not in the Iprtrmib.h header file. Note
            that the Ipmib.h header file is automatically included in Iprtrmib.h which is automatically included in the Iphlpapi.h header
            file. The Ipmib.h and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_ICMP_EX.icmpInStats">
            <summary>Specifies an MIBICMPSTATS_EX structure that contains the extended statistics for incoming ICMP messages.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_ICMP_EX.icmpOutStats">
            <summary>Specifies an MIBICMPSTATS_EX structure that contains the extended statistics for outgoing ICMP messages.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPADDRROW">
            <summary>
            <para>The <c>MIB_IPADDRROW</c> specifies information for a particular IPv4 address in the MIB_IPADDRTABLE structure.</para>
            </summary>
            <remarks>
            <para>
            On Windows XP and later, the <c>dwIndex</c> member of the <c>MIB_IPADDRROW</c> structure has a data type of <c>IF_INDEX</c>. The
            <c>wType</c> member is only available on Windows XP and later. On Windows 2000 and earlier, this member is defined as <c>Unused2</c>.
            </para>
            <para>
            The GetIpAddrTable function retrieves the interface–to–IPv4 address mapping table on a local computer and returns this
            information in an MIB_IPADDRTABLE structure. The <c>table</c> member in the <c>MIB_IPADDRTABLE</c> structure contains an array of
            <c>MIB_IPADDRROW</c> entries.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the <c>MIB_IPADDRROW</c> structure is defined in the Ipmib.h header file not in the Iprtrmib.h header file. Note
            that the Ipmib.h header file is automatically included in Iprtrmib.h which is automatically included in the Iphlpapi.h header
            file. The Ipmib.h and Iprtrmib.h header files should never be used directly.
            </para>
            <para>Examples</para>
            <para>
            To view an example that retrieves the MIB_IPADDRTABLE structure and then prints out the <c>MIB_IPADDRROW</c> structures in this
            table, see the GetIpAddrTable function.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPADDRROW.dwAddr">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The IPv4 address in network byte order.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPADDRROW.dwIndex">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The index of the interface associated with this IPv4 address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPADDRROW.dwMask">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The subnet mask for the IPv4 address in network byte order.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPADDRROW.dwBCastAddr">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The broadcast address in network byte order. A broadcast address is typically the IPv4 address with the host portion set to
            either all zeros or all ones.
            </para>
            <para>The proper value for this member is not returned by the GetIpAddrTable function.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPADDRROW.dwReasmSize">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The maximum re-assembly size for received datagrams.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPADDRROW.unused1">
            <summary>
            <para>Type: <c>unsigned short</c></para>
            <para>This member is reserved.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPADDRROW.wType">
            <summary>
            <para>Type: <c>unsigned short</c></para>
            <para>The address type or state. This member can be a combination of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MIB_IPADDR_PRIMARY 0x0001</term>
            <term>Primary IP address</term>
            </item>
            <item>
            <term>MIB_IPADDR_DYNAMIC 0x0004</term>
            <term>Dynamic IP address</term>
            </item>
            <item>
            <term>MIB_IPADDR_DISCONNECTED 0x0008</term>
            <term>Address is on disconnected interface</term>
            </item>
            <item>
            <term>MIB_IPADDR_DELETED 0x0040</term>
            <term>Address is being deleted</term>
            </item>
            <item>
            <term>MIB_IPADDR_TRANSIENT 0x0080</term>
            <term>Transient address</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW">
            <summary>
            <para>The <c>MIB_IPFORWARDROW</c> structure contains information that describes an IPv4 network route.</para>
            </summary>
            <remarks>
            <para>
            The GetIpForwardTable function enumerates the IPv4 route entries on a local system and returns this information in a
            MIB_IPFORWARDTABLE structure that contains an array of <c>MIB_IPFORWARDROW</c> structure entries.
            </para>
            <para>
            The <c>dwForwardDest</c>, <c>dwForwardMask</c>, and <c>dwForwardNextHop</c> members of the <c>MIB_IPFORWARDROW</c> structure
            represent IPv4 addresses in network byte order.
            </para>
            <para>
            The <c>dwForwardProto</c> member of the <c>MIB_IPFORWARDROW</c> structure specifies the protocol or routing mechanism that
            generated the route. Routing protocol identifiers are used to identify route information for the specified routing protocol. For
            example, <c>MIB_IPPROTO_NETMGMT</c> is used to identify route information for IP routing set through network management such as
            the Dynamic Host Configuration Protocol (DCHP), the Simple Network Management Protocol (SNMP), or by calls to the
            CreateIpForwardEntry, DeleteIpForwardEntry , or SetIpForwardEntry functions. See Protocol Identifiers for a list of possible
            protocols and routing mechanisms.
            </para>
            <para>
            An IPv4 address of 0.0.0.0 in the <c>dwForwardDest</c> member of the <c>MIB_IPFORWARDROW</c> structure is considered a default
            route. The MIB_IPFORWARDTABLE may contain multiple <c>MIB_IPFORWARDROW</c> entries with the <c>dwForwardDest</c> member set to
            0.0.0.0 when there are multiple network adapters installed.
            </para>
            <para>When <c>dwForwardAge</c> is set to <c>INFINITE</c>, the route will not be removed based on a timeout</para>
            <para>
            value. Any other value for <c>dwForwardAge</c> specifies the number of seconds since the route was added or modified in the
            network routing table.
            </para>
            <para>
            On Windows Server 2003 or Windows 2000 Server when the Routing and Remote Access Service (RRAS) is running, the
            <c>MIB_IPFORWARDROW</c> entries returned have the <c>dwForwardType</c> and <c>dwForwardAge</c> members set to zero.
            </para>
            <para>
            On Windows Vista and Windows Server 2008, the route metric specified in the <c>dwForwardMetric1</c> member of the
            <c>MIB_IPFORWARDROW</c> structure represents a combination of the route metric added to the interface metric specified in the
            <c>Metric</c> member of the MIB_IPINTERFACE_ROW structure of the associated interface. So the <c>dwForwardMetric1</c> member of
            the <c>MIB_IPFORWARDROW</c> structure should be equal to or greater than <c>Metric</c> member of the associated
            <c>MIB_IPINTERFACE_ROW</c> structure. If an application would like to set the route metric to 0, then the <c>dwForwardMetric1</c>
            member of the <c>MIB_IPFORWARDROW</c> structure should be set equal to the value of the interface metric specified in the
            <c>Metric</c> member of the associated <c>MIB_IPINTERFACE_ROW</c> structure. An application can retrieve the interface metric by
            calling the GetIpInterfaceEntry function.
            </para>
            <para>
            A number of members of the <c>MIB_IPFORWARDROW</c> structure are not currently used by IPv4 routing. These members include
            <c>dwForwardPolicy</c>, <c>dwForwardNextHopAS</c>, <c>dwForwardMetric2</c>, <c>dwForwardMetric3</c>, <c>dwForwardMetric4</c>, and <c>dwForwardMetric5</c>.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Ipmib.h header file, not in the Iprtrmib.h header file. Note that the Ipmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Ipmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            <para>Examples</para>
            <para>
            To view an example that retrieves the MIB_IPFORWARDTABLE structure and then prints out the <c>MIB_IPFORWARDROW</c> structure
            entries in this table, see the GetIpForwardTable function.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW.dwForwardDest">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The destination IPv4 address of the route. An entry with a IPv4 address of 0.0.0.0 is considered a default route. This member
            cannot be set to a multicast (class D) IPv4 address.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW.dwForwardMask">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The IPv4 subnet mask to use with the destination IPv4 address before being compared to the value in the <c>dwForwardDest</c> member.
            </para>
            <para>
            The <c>dwForwardMask</c> value should be applied to the destination IPv4 address (logical and operation) before a comparison
            with the value in the <c>dwForwardDest</c> member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW.dwForwardPolicy">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The set of conditions that would cause the selection of a multi-path route (the set of next hops for a given destination).
            This member is typically in IP TOS format. This encoding of this member is described in RFC 1354. For more information, see http://www.ietf.org/rfc/rfc1354.txt.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW.dwForwardNextHop">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            For remote routes, the IPv4 address of the next system en route. Otherwise, this member should be an IPv4 address of 0.0.0.0.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW.dwForwardIfIndex">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The index of the local interface through which the next hop of this route should be reached.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW.dwForwardType">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW.dwForwardProto">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW.dwForwardAge">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of seconds since the route was added or modified in the network routing table.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW.dwForwardNextHopAS">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The autonomous system number of the next hop. When this member is unknown or not relevant to the protocol or routing
            mechanism specified in <c>dwForwardProto</c>, this value should be set to zero. This value is documented in RFC 1354. For
            more information, see http://www.ietf.org/rfc/rfc1354.txt
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW.dwForwardMetric1">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The primary routing metric value for this route. The semantics of this metric are determined by the routing protocol
            specified in the <c>dwForwardProto</c> member. If this metric is not used, its value should be set to -1. This value is
            documented in in RFC 1354. For more information, see http://www.ietf.org/rfc/rfc1354.txt
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW.dwForwardMetric2">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            An alternate routing metric value for this route. The semantics of this metric are determined by the routing protocol
            specified in the <c>dwForwardProto</c> member. If this metric is not used, its value should be set to -1. This value is
            documented in RFC 1354. For more information, see http://www.ietf.org/rfc/rfc1354.txt
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW.dwForwardMetric3">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            An alternate routing metric value for this route. The semantics of this metric are determined by the routing protocol
            specified in the <c>dwForwardProto</c> member. If this metric is not used, its value should be set to -1. This value is
            documented in RFC 1354. For more information, see http://www.ietf.org/rfc/rfc1354.txt
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW.dwForwardMetric4">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            An alternate routing metric value for this route. The semantics of this metric are determined by the routing protocol
            specified in the <c>dwForwardProto</c> member. If this metric is not used, its value should be set to -1. This value is
            documented in RFC 1354. For more information, see http://www.ietf.org/rfc/rfc1354.txt
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW.dwForwardMetric5">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            An alternate routing metric value for this route. The semantics of this metric are determined by the routing protocol
            specified in the <c>dwForwardProto</c> member. If this metric is not used, its value should be set to -1. This value is
            documented in RFC 1354. For more information, see http://www.ietf.org/rfc/rfc1354.txt
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPNETROW">
            <summary>
            <para>
            The <c>MIB_IPNETROW</c> structure contains information for an Address Resolution Protocol (ARP) table entry for an IPv4 address.
            </para>
            </summary>
            <remarks>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed and the <c>MIB_IPNETROW</c>
            structure is defined in the Ipmib.h header file not in the Iprtrmib.h header file. Note that the Ipmib.h header file is
            automatically included in Iprtrmib.h which is automatically included in the Iphlpapi.h header file. The Ipmib.h and Iprtrmib.h
            header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNETROW.dwIndex">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The index of the adapter.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNETROW.dwPhysAddrLen">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The length, in bytes, of the physical address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNETROW.bPhysAddr">
            <summary>
            <para>Type: <c>BYTE[MAXLEN_PHYSADDR]</c></para>
            <para>The physical address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNETROW.dwAddr">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The IPv4 address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNETROW.dwType">
            <summary>The type of ARP entry. This type can be one of the following values.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPNETROW.#ctor(Vanara.PInvoke.Ws2_32.IN_ADDR,System.UInt32,System.Byte[],System.Nullable{Vanara.PInvoke.IpHlpApi.MIB_IPNET_TYPE})">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPNETROW"/> struct.</summary>
            <param name="ipV4">The IPv4 address.</param>
            <param name="ifIdx">The index of the adapter.</param>
            <param name="macAddr">The physical hardware address of the adapter for the network interface associated with this IP address.</param>
            <param name="type">The type of ARP entry.</param>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS">
            <summary>The <c>MIB_IPSTATS</c> structure stores information about the IP protocol running on a particular computer.</summary>
            <remarks>
            <para>The <c>MIB_IPSTATS</c> structure stores information per protocol (IPv4 or IPv6).</para>
            <para>
            The <c>dwForwarding</c> member specifies the per-protocol forwarding state for IPv4 or IPv6, not the forwarding state for an
            interface. The forwarding state of each interface state is the state that is in affect for that interface. The per-protocol state
            returned by the <c>GetIpStatistics</c> or the <c>GetIpStatisticsEx</c> function is not the forwarding state in affect. The
            <c>dwForwarding</c> member exists to serve two purposes:
            </para>
            <list type="bullet">
            <item>
            <term>
            Provides a default value for the forwarding state when a new interface is created with no specific forwarding state (neither
            disabled nor enabled) . This value is inherited per-protocol state.
            </term>
            </item>
            <item>
            <term>
            Provides a value set by a domain administrator to enable or disable a per-protocol forwarding state. The forwarding states of all
            interfaces using that protocol are also enabled or disabled.
            </term>
            </item>
            </list>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the <c>MIB_IPSTATS</c> structure is defined in the Ipmib.h header file not in the Iprtrmib.h header file. Note
            that the Ipmib.h header file is automatically included in Iprtrmib.h which is automatically included in the Iphlpapi.h header
            file. The Ipmib.h and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.Forwarding">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>Specifies whether IP forwarding is enabled or disabled for a protocol (IPv4 or IPv6).</para>
            <para>
            On Windows Vista and later, this member is defined as a union containing a <c>DWORD dwForwarding</c> member and a
            <c>MIB_IPSTATS_FORWARDING Forwarding</c> member where <c>MIB_IPSTATS_FORWARDING</c> is an enumeration defined in the Ipmib.h
            header file.
            </para>
            <para>
            <c>Note</c> This member applies to the entire system per protocol (IPv4 or IPv6) and doesn’t return per interface
            configuration for IP forwarding.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MIB_IP_FORWARDING 1</term>
            <term>IP forwarding is enabled.</term>
            </item>
            <item>
            <term>MIB_IP_NOT_FORWARDING 2</term>
            <term>IP forwarding is not enabled.</term>
            </item>
            <item>
            <term>MIB_USE_CURRENT_FORWARDING 0xffff</term>
            <term>
            Use the current IP forwarding setting. This value is only applicable when setting the forwarding and time-to-live (TTL)
            options using the SetIpStatistics and SetIpStatisticsEx functions.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwDefaultTTL">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The default initial time-to-live (TTL) for datagrams originating on a particular computer.</para>
            <para>
            This member can be set to <c>MIB_USE_CURRENT_TTL</c> to use the current deafult TTL value when setting the forwarding and
            time-to-live (TTL) options using the <c>SetIpStatistics</c> and SetIpStatisticsEx functions.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwInReceives">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of datagrams received.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwInHdrErrors">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of datagrams received that have header errors.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwInAddrErrors">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of datagrams received that have address errors.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwForwDatagrams">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of datagrams forwarded.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwInUnknownProtos">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of datagrams received that have an unknown protocol.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwInDiscards">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of received datagrams discarded.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwInDelivers">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of received datagrams delivered.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwOutRequests">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of outgoing datagrams that IP is requested to transmit. This number does not include forwarded datagrams.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwRoutingDiscards">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of outgoing datagrams discarded.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwOutDiscards">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of transmitted datagrams discarded.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwOutNoRoutes">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The number of datagrams for which this computer did not have a route to the destination IP address. These datagrams were discarded.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwReasmTimeout">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The amount of time allowed for all pieces of a fragmented datagram to arrive. If all pieces do not arrive within this time,
            the datagram is discarded.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwReasmReqds">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of datagrams that require re-assembly.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwReasmOks">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of datagrams that were successfully reassembled.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwReasmFails">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of datagrams that cannot be reassembled.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwFragOks">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of datagrams that were fragmented successfully.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwFragFails">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The number of datagrams that have not been fragmented because the IP header specifies no fragmentation. These datagrams are discarded.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwFragCreates">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of fragments created.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwNumIf">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of interfaces.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwNumAddr">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of IP addresses associated with this computer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPSTATS.dwNumRoutes">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of routes in the IP routing table.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIBICMPINFO">
            <summary>The <c>MIBICMPINFO</c> structure contains Internet Control Message Protocol (ICMP) statistics for a particular computer.</summary>
            <remarks>
            <para>
            Two MIBICMPSTATS structures are required to hold all the ICMP statistics for a given computer. One <c>MIBICMPSTATS</c> structure
            contains the statistics for incoming ICMP messages. The other contains the statistics for outgoing ICMP messages. For this
            reason, the <c>MIBICMPINFO</c> structure contains two <c>MIBICMPSTATS</c> structures.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the <c>MIBICMPINFO</c> structure is defined in the Ipmib.h header file not in the Iprtrmib.h header file. Note
            that the Ipmib.h header file is automatically included in Iprtrmib.h which is automatically included in the Iphlpapi.h header
            file. The Ipmib.h and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPINFO.icmpInStats">
            <summary>An MIBICMPSTATS structure that contains the statistics for incoming ICMP messages.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPINFO.icmpOutStats">
            <summary>An MIBICMPSTATS structure that contains the statistics for outgoing ICMP messages.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS">
            <summary>
            The <c>MIBICMPSTATS</c> structure contains statistics for either incoming or outgoing Internet Control Message Protocol (ICMP)
            messages on a particular computer.
            </summary>
            <remarks>
            <para>
            Two <c>MIBICMPSTATS</c> structures are required to hold all the ICMP statistics for a given computer. One <c>MIBICMPSTATS</c>
            structure contains the statistics for incoming ICMP messages. The other contains the statistics for outgoing ICMP messages. For
            this reason, the MIBICMPINFO structure contains two <c>MIBICMPSTATS</c> structures.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the <c>MIBICMPSTATS</c> structure is defined in the Ipmib.h header file not in the Iprtrmib.h header file. Note
            that the Ipmib.h header file is automatically included in Iprtrmib.h which is automatically included in the Iphlpapi.h header
            file. The Ipmib.h and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS.dwMsgs">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of messages received or sent.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS.dwErrors">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of errors received or sent.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS.dwDestUnreachs">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The number of destination-unreachable messages received or sent. A destination-unreachable message is sent to the originating
            computer when a datagram fails to reach its intended destination.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS.dwTimeExcds">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The number of time-to-live (TTL) exceeded messages received or sent. A time-to-live exceeded message is sent to the
            originating computer when a datagram is discarded because the number of routers it has passed through exceeds its
            time-to-live value.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS.dwParmProbs">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The number of parameter-problem messages received or sent. A parameter-problem message is sent to the originating computer
            when a router or host detects an error in a datagram's IP header.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS.dwSrcQuenchs">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The number of source quench messages received or sent. A source quench request is sent to a computer to request that it
            reduce its rate of packet transmission.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS.dwRedirects">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The number of redirect messages received or sent. A redirect message is sent to the originating computer when a better route
            is discovered for a datagram sent by that computer.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS.dwEchos">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The number of echo requests received or sent. An echo request causes the receiving computer to send an echo reply message
            back to the originating computer.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS.dwEchoReps">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The number of echo replies received or sent. A computer sends an echo reply in response to receiving an echo request message.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS.dwTimestamps">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The number of time-stamp requests received or sent. A time-stamp request causes the receiving computer to send a time-stamp
            reply back to the originating computer.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS.dwTimestampReps">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The number of time-stamp replies received or sent. A computer sends a time-stamp reply in response to receiving a time-stamp
            request. Routers can use time-stamp requests and replies to measure the transmission speed of datagrams on a network.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS.dwAddrMasks">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The number of address mask requests received or sent. A computer sends an address mask request to determine the number of
            bits in the subnet mask for its local subnet.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS.dwAddrMaskReps">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The number of address mask responses received or sent. A computer sends an address mask response in response to an address
            mask request.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS_EX">
            <summary>
            <para>
            The <c>MIBICMPSTATS_EX</c> structure contains extended statistics for either incoming or outgoing Internet Control Message
            Protocol (ICMP) messages on a particular computer.
            </para>
            </summary>
            <remarks>
            <para>
            Two <c>MIBICMPSTATS_EX</c> structures are required to hold all the extended ICMP statistics for a given computer. One
            <c>MIBICMPSTATS_EX</c> structure contains the extended statistics for incoming ICMP messages. The other contains the extended
            statistics for outgoing ICMP messages. For this reason, the MIB_ICMP_EX structure contains two <c>MIBICMPSTATS_EX</c> structures.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the <c>MIBICMPSTATS_EX</c> structure is defined in the Ipmib.h header file not in the Iprtrmib.h header file.
            Note that the Ipmib.h header file is automatically included in Iprtrmib.h which is automatically included in the Iphlpapi.h
            header file. The Ipmib.h and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS_EX.dwMsgs">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>Specifies the number of messages received or sent.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS_EX.dwErrors">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of errors received or sent.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIBICMPSTATS_EX.rgdwTypeCount">
            <summary>
            <para>Type: <c>DWORD[256]</c></para>
            <para>The type count.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPADDRTABLE">
            <summary>
            <para>The <c>MIB_IPADDRTABLE</c> structure contains a table of IPv4 address entries.</para>
            </summary>
            <remarks>
            <para>
            The GetIpAddrTable function retrieves the interface–to–IPv4 address mapping table on a local computer and returns this
            information in an <c>MIB_IPADDRTABLE</c> structure.
            </para>
            <para>
            The <c>MIB_IPADDRTABLE</c> structure may contain padding for alignment between the <c>dwNumEntries</c> member and the first
            MIB_IPADDRROW array entry in the <c>table</c> member. Padding for alignment may also be present between the <c>MIB_IPADDRROW</c>
            array entries in the <c>table</c> member. Any access to a <c>MIB_IPADDRROW</c> array entry should assume padding may exist.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the MIB_IPADDRROW is defined in the Ipmib.h header file not in the Iprtrmib.h header file. Note that the Ipmib.h
            header file is automatically included in Iprtrmib.h which is automatically included in the Iphlpapi.h header file. The Ipmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            <para>Examples</para>
            <para>
            To view an example that retrieves the <c>MIB_IPADDRTABLE</c> structure and then prints out the MIB_IPADDRROW structures in this
            table, see the GetIpAddrTable function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPADDRTABLE.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPADDRTABLE"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_IPADDRTABLE.dwNumEntries">
            <summary>
            <para>The number of IPv4 address entries in the table.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_IPADDRTABLE.table">
            <summary>
            <para>A pointer to a table of IPv4 address entries implemented as an array of MIB_IPADDRROW structures.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPADDRTABLE.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_IPADDRTABLE)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPADDRTABLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The MIB_IPADDRTABLE instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDTABLE">
            <summary>The <c>MIB_IPFORWARDTABLE</c> structure contains a table of IPv4 route entries.</summary>
            <remarks>
            <para>
            The GetIpForwardTable function enumerates the IPv4 route entries on a local system and returns this information in a
            <c>MIB_IPFORWARDTABLE</c> structure.
            </para>
            <para>
            The <c>MIB_IPFORWARDTABLE</c> structure may contain padding for alignment between the <c>dwNumEntries</c> member and the first
            MIB_IPFORWARDROW array entry in the <c>table</c> member. Padding for alignment may also be present between the
            <c>MIB_IPFORWARDROW</c> array entries in the <c>table</c> member. Any access to a <c>MIB_IPFORWARDROW</c> array entry should
            assume padding may exist.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Ipmib.h header file, not in the Iprtrmib.h header file. Note that the Ipmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Ipmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            <para>Examples</para>
            <para>
            To view an example that retrieves the <c>MIB_IPFORWARDTABLE</c> structure and then prints out the MIB_IPFORWARDROW structure
            entries in this table, see the GetIpForwardTable function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDTABLE.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDTABLE"/> class.</summary>
            <param name="byteSize">Size of the byte.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDTABLE.dwNumEntries">
            <summary>The number of route entries in the table.</summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDTABLE.table">
            <summary>A pointer to a table of route entries implemented as an array of MIB_IPFORWARDROW structures.</summary>
            <value>The <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDROW"/>.</value>
            <returns></returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDTABLE.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDTABLE)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARDTABLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The table.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPNETTABLE">
            <summary>
            <para>The <c>MIB_IPNETTABLE</c> structure contains a table of Address Resolution Protocol (ARP) entries for IPv4 addresses.</para>
            </summary>
            <remarks>
            <para>The GetIpNetTable function retrieves the IPv4-to-physical address mapping table.</para>
            <para>on a local system and returns this information in a <c>MIB_IPNETTABLE</c> structure.</para>
            <para>The <c>dwNumEntries</c> member in this structure may be zero if there are no ARP entries in the table.</para>
            <para>
            The <c>MIB_IPNETTABLE</c> structure may contain padding for alignment between the <c>dwNumEntries</c> member and the first
            MIB_IPNETROW array entry in the <c>table</c> member. Padding for alignment may also be present between the <c>MIB_IPNETROW</c>
            array entries in the <c>table</c> member. Any access to a <c>MIB_IPNETROW</c> array entry should assume padding may exist.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the <c>MIB_IPNETTABLE</c> structure is defined in the Ipmib.h header file not in the Iprtrmib.h header file. Note
            that the Ipmib.h header file is automatically included in Iprtrmib.h which is automatically included in the Iphlpapi.h header
            file. The Ipmib.h and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPNETTABLE.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPNETTABLE"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_IPNETTABLE.dwNumEntries">
            <summary>
            <para>The number of ARP entries in the table.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_IPNETTABLE.table">
            <summary>
            <para>A pointer to a table of ARP entries implemented as an array of MIB_IPNETROW structures.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPNETTABLE.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_IPNETTABLE)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPNETTABLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The MIB_IPNETTABLE instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.PIPFORWARD_CHANGE_CALLBACK">
            <summary>This function is called when an interface notification is received from <see cref="M:Vanara.PInvoke.IpHlpApi.NotifyRouteChange2(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,Vanara.PInvoke.IpHlpApi.PIPFORWARD_CHANGE_CALLBACK,System.IntPtr,System.Boolean,System.IntPtr@)"/>.</summary>
            <param name="CallerContext">
            The CallerContext parameter that is passed to the NotifyRouteChange2 function when it is registering the driver for change notifications.
            </param>
            <param name="Row">
            A pointer to the MIB_IPFORWARD_ROW2 entry for the IP route entry that was changed. This parameter is a NULL pointer when the
            MIB_NOTIFICATION_TYPE value that is passed in the NotificationType parameter to the callback function is set to
            MibInitialNotification. This situation can occur only if the InitialNotification parameter that is passed to NotifyRouteChange2
            was set to TRUE when registering the driver for change notifications.
            </param>
            <param name="NotificationType">
            The notification type. This member can be one of the values from the MIB_NOTIFICATION_TYPE enumeration type.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.PIPINTERFACE_CHANGE_CALLBACK">
            <summary>This function is called when an interface notification is received from <see cref="M:Vanara.PInvoke.IpHlpApi.NotifyIpInterfaceChange(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,Vanara.PInvoke.IpHlpApi.PIPINTERFACE_CHANGE_CALLBACK,System.IntPtr,System.Boolean,System.IntPtr@)"/>.</summary>
            <param name="CallerContext">
            The CallerContext parameter that is passed to the NotifyIpInterfaceChange function when it is registering the driver for change notifications.
            </param>
            <param name="Row">
            A pointer to the MIB_IPINTERFACE_ROW entry for the interface that was changed. This parameter is a NULL pointer when the
            MIB_NOTIFICATION_TYPE value that is passed in the NotificationType parameter to the callback function is set to
            MibInitialNotification. This situation can occur only if the InitialNotification parameter that is passed to
            NotifyIpInterfaceChange was set to TRUE when registering the driver for change notifications.
            </param>
            <param name="NotificationType">
            The notification type. This member can be one of the values from the MIB_NOTIFICATION_TYPE enumeration type.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.PNETWORK_CONNECTIVITY_HINT_CHANGE_CALLBACK">
            <summary>
            <para>
            The <c>PNETWORK_CONNECTIVITY_HINT_CHANGE_CALLBACK</c> type is a pointer to a function that you define in your application. The
            function is called whenever there's a change in the network aggregate connectivity level and cost hints.
            </para>
            <para>Register your callback with a call to NotifyNetworkConnectivityHintChange.</para>
            </summary>
            <param name="CallerContext">The user-specific caller context.</param>
            <param name="ConnectivityHint">
            A value of type NL_NETWORK_CONNECTIVITY_HINT representing the aggregate connectivity level and cost hints.
            </param>
            <returns>None</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.PSTABLE_UNICAST_IPADDRESS_TABLE_CALLBACK">
            <summary>Called if NotifyStableUnicastIpAddressTable returns ERROR_IO_PENDING, which indicates that the I/O request is pending.</summary>
            <param name="CallerContext">
            The CallerContext parameter that is passed to the NotifyStableUnicastIpAddressTable function when it is registering the driver
            for notifications.
            </param>
            <param name="AddressTable">
            A pointer to a MIB_UNICASTIPADDRESS_TABLE structure that contains the stable unicast IP address table on the local computer.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.PTEREDO_PORT_CHANGE_CALLBACK">
            <summary>Function is called when a Teredo port change notification is received.</summary>
            <param name="CallerContext">
            The CallerContext parameter that is passed to the NotifyTeredoPortChange function when it is registering the driver for change notifications.
            </param>
            <param name="Port">
            The UDP port number that the Teredo client currently uses. This parameter is zero when the MIB_NOTIFICATION_TYPE value that is
            passed in the NotificationType parameter to the callback function is set to MibInitialNotification. This situation can occur only
            if the InitialNotification parameter that is passed to NotifyTeredoPortChange was set to TRUE when registering the driver for
            change notifications.
            </param>
            <param name="NotificationType">
            The notification type. This member can be one of the values from the MIB_NOTIFICATION_TYPE enumeration type.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.PUNICAST_IPADDRESS_CHANGE_CALLBACK">
            <summary>This function is called when a unicast IP address notification is received.</summary>
            <param name="CallerContext">
            The CallerContext parameter that is passed to the NotifyUnicastIpAddressChange function when it is registering the driver for
            change notifications.
            </param>
            <param name="Row">
            A pointer to the MIB_UNICASTIPADDRESS_ROW entry for the unicast IP address that was changed. This parameter is a NULL pointer
            when the MIB_NOTIFICATION_TYPE value that is passed in the NotificationType parameter to the callback function is set to
            MibInitialNotification. This situation can occur only if the InitialNotification parameter that is passed to
            NotifyUnicastIpAddressChange was set to TRUE when registering the driver for change notifications.
            </param>
            <param name="NotificationType">
            The notification type. This member can be one of the values from the MIB_NOTIFICATION_TYPE enumeration type.
            </param>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.InterfaceAndOperStatusFlags">
            <summary>A set of flags that provide information about an interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.InterfaceAndOperStatusFlags.HardwareInterface">
            <summary>Set if the network interface is for hardware.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.InterfaceAndOperStatusFlags.FilterInterface">
            <summary>Set if the network interface is for a filter module.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.InterfaceAndOperStatusFlags.ConnectorPresent">
            <summary>Set if a connector is present on the network interface. This value is set if there is a physical network adapter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.InterfaceAndOperStatusFlags.NotAuthenticated">
            <summary>
            Set if the default port for the network interface is not authenticated. If a network interface is not authenticated by the
            target, then the network interface is not in an operational mode. Although this applies to both wired and wireless network
            connections, authentication is more common for wireless network connections.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.InterfaceAndOperStatusFlags.NotMediaConnected">
            <summary>
            Set if the network interface is not in a media-connected state. If a network cable is unplugged for a wired network, this
            would be set. For a wireless network, this is set for the network adapter that is not connected to a network.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.InterfaceAndOperStatusFlags.Paused">
            <summary>
            Set if the network stack for the network interface is in the paused or pausing state. This does not mean that the computer is
            in a hibernated state.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.InterfaceAndOperStatusFlags.LowPower">
            <summary>Set if the network interface is in a low power state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.InterfaceAndOperStatusFlags.EndPointInterface">
            <summary>
            Set if the network interface is an endpoint device and not a true network interface that connects to a network. This can be
            set by devices such as smart phones which use networking infrastructure to communicate to the PC but do not provide
            connectivity to an external network. It is mandatory for these types of devices to set this flag.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IF_ENTRY_LEVEL">
            <summary>The level of interface information to retrieve.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ENTRY_LEVEL.MibIfEntryNormal">
            <summary>
            The values of statistics and state returned in members of the MIB_IF_ROW2 structure pointed to by the Row parameter are
            returned from the top of the filter stack.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ENTRY_LEVEL.MibIfEntryNormalWithoutStatistics">
            <summary>
            The values of state (without statistics) returned in members of the MIB_IF_ROW2 structure pointed to by the Row parameter
            are returned from the top of the filter stack.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IF_TABLE_LEVEL">
            <summary>
            <para>The MIB_IF_TABLE_LEVEL enumeration type defines the level of interface information to retrieve.</para>
            </summary>
            <remarks>
            <para>
            The MIB_IF_TABLE_LEVEL enumeration type is used with the GetIfTable2Ex function to specify the level of interface information to retrieve.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_TABLE_LEVEL.MibIfTableNormal">
            <summary>
            The values of statistics and state that are returned in members of the MIB_IF_ROW2 structure in the MIB_IF_TABLE2 structure
            that the Table parameter points to in the GetIfTable2Ex function are returned from the top of the filter stack.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_TABLE_LEVEL.MibIfTableRaw">
            <summary>
            The values of statistics and state that are returned in members of the MIB_IF_ROW2 structure in the MIB_IF_TABLE2 structure
            that the Table parameter points to in the GetIfTable2Ex function are returned directly for the interface that is being queried.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_TABLE_LEVEL.MibIfTableNormalWithoutStatistics">
            <summary>The values returned are the same as for the MibIfTableNormal value, but without the statistics.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_FLAGS">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_FLAGS.IsRouther">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_FLAGS.IsUnreachable">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_NOTIFICATION_TYPE">
            <summary>
            The MIB_NOTIFICATION_TYPE enumeration type defines the notification type that is passed to a callback function when a
            notification occurs.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_NOTIFICATION_TYPE.MibParameterNotification">
            <summary>A parameter was changed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_NOTIFICATION_TYPE.MibAddInstance">
            <summary>A new MIB instance was added.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_NOTIFICATION_TYPE.MibDeleteInstance">
            <summary>An existing MIB instance was deleted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_NOTIFICATION_TYPE.MibInitialNotification">
            <summary>
            A notification that is invoked immediately after registration for change notification completes. This initial notification
            does not indicate that a change occurred to a MIB instance. The purpose of this initial notification type is to provide
            confirmation that the callback function is properly registered.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.CancelMibChangeNotify2(System.IntPtr)">
            <summary>
            The <c>CancelMibChangeNotify2</c> function deregisters a driver change notification for IP interface changes, IP address changes,
            IP route changes, and requests to retrieve the stable Unicast IP address table.
            </summary>
            <param name="NotificationHandle">
            The handle that is returned from a notification registration or retrieval function to indicate which notification to cancel.
            </param>
            <returns>
            <para><c>CancelMibChangeNotify2</c> returns STATUS_SUCCESS if the function succeeds.</para>
            <para>If the function fails, <c>CancelMibChangeNotify2</c> returns one of the following error codes:</para>
            <para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. CancelMibChangeNotify2 returns this error if the NotificationHandle parameter
            was a NULL pointer.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use the FormatMessage function to obtain the message string for the returned error.</term>
            </item>
            </list>
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.ConvertInterfaceAliasToLuid(System.String,Vanara.PInvoke.IpHlpApi.NET_LUID@)">
            <summary>
            <para>
            The <c>ConvertInterfaceAliasToLuid</c> function converts an interface alias name for a network interface to the locally unique
            identifier (LUID) for the interface.
            </para>
            </summary>
            <param name="InterfaceAlias">
            <para>A pointer to a <c>NULL</c>-terminated Unicode string containing the alias name of the network interface.</para>
            </param>
            <param name="InterfaceLuid">
            <para>A pointer to the NET_LUID for this interface.</para>
            </param>
            <returns>
            <para>
            On success, <c>ConvertInterfaceAliasToLuid</c> returns NO_ERROR. Any nonzero return value indicates failure and a <c>NULL</c> is
            returned in the InterfaceLuid parameter.
            </para>
            <list type="table">
            <listheader>
            <term>Error code</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            One of the parameters was invalid. This error is returned if either the InterfaceAlias or InterfaceLuid parameter was NULL or if
            the InterfaceAlias parameter was invalid.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>ConvertInterfaceAliasToLuid</c> function is available on Windows Vista and later.</para>
            <para>
            The <c>ConvertInterfaceAliasToLuid</c> function is protocol independent and works with network interfaces for both the IPv6 and
            IPv4 protocol.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.ConvertInterfaceGuidToLuid(System.Guid@,Vanara.PInvoke.IpHlpApi.NET_LUID@)">
            <summary>
            <para>
            The <c>ConvertInterfaceGuidToLuid</c> function converts a globally unique identifier (GUID) for a network interface to the
            locally unique identifier (LUID) for the interface.
            </para>
            </summary>
            <param name="InterfaceGuid">
            <para>A pointer to a GUID for a network interface.</para>
            </param>
            <param name="InterfaceLuid">
            <para>A pointer to the NET_LUID for this interface.</para>
            </param>
            <returns>
            <para>
            On success, <c>ConvertInterfaceGuidToLuid</c> returns NO_ERROR. Any nonzero return value indicates failure and a <c>NULL</c> is
            returned in the InterfaceLuid parameter.
            </para>
            <list type="table">
            <listheader>
            <term>Error code</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            One of the parameters was invalid. This error is returned if either the InterfaceAlias or InterfaceLuid parameter was NULL or if
            the InterfaceGuid parameter was invalid.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>ConvertInterfaceGuidToLuid</c> function is available on Windows Vista and later.</para>
            <para>
            The <c>ConvertInterfaceGuidToLuid</c> function is protocol independent and works with network interfaces for both the IPv6 and
            IPv4 protocol.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.ConvertInterfaceIndexToLuid(System.UInt32,Vanara.PInvoke.IpHlpApi.NET_LUID@)">
            <summary>
            <para>
            The <c>ConvertInterfaceIndexToLuid</c> function converts a local index for a network interface to the locally unique identifier
            (LUID) for the interface.
            </para>
            </summary>
            <param name="InterfaceIndex">
            <para>The local index value for a network interface.</para>
            </param>
            <param name="InterfaceLuid">
            <para>A pointer to the NET_LUID for this interface.</para>
            </param>
            <returns>
            <para>
            On success, <c>ConvertInterfaceIndexToLuid</c> returns NO_ERROR. Any nonzero return value indicates failure and a <c>NULL</c> is
            returned in the InterfaceLuid parameter.
            </para>
            <list type="table">
            <listheader>
            <term>Error code</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            The system cannot find the file specified. This error is returned if the network interface specified by the InterfaceIndex
            parameter was not a value on the local machine.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            One of the parameters was invalid. This error is returned if the InterfaceLuid parameter was NULL or if the InterfaceIndex
            parameter was invalid.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>ConvertInterfaceIndexToLuid</c> function is available on Windows Vista and later.</para>
            <para>
            The <c>ConvertInterfaceIndexToLuid</c> function is protocol independent and works with network interfaces for both the IPv6 and
            IPv4 protocol.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.ConvertInterfaceLuidToAlias(Vanara.PInvoke.IpHlpApi.NET_LUID@,System.Text.StringBuilder,Vanara.PInvoke.SizeT)">
            <summary>
            <para>
            The <c>ConvertInterfaceLuidToAlias</c> function converts a locally unique identifier (LUID) for a network interface to an
            interface alias.
            </para>
            </summary>
            <param name="InterfaceLuid">
            <para>A pointer to a NET_LUID for a network interface.</para>
            </param>
            <param name="InterfaceAlias">
            <para>
            A pointer to a buffer to hold the <c>NULL</c>-terminated Unicode string containing the alias name of the network interface when
            the function returns successfully.
            </para>
            </param>
            <param name="Length">
            <para>
            The length, in characters, of the buffer pointed to by the InterfaceAlias parameter. This value must be large enough to
            accommodate the alias name of the network interface and the terminating <c>NULL</c> character. The maximum required length is
            <c>NDIS_IF_MAX_STRING_SIZE</c> + 1.
            </para>
            </param>
            <returns>
            <para>On success, <c>ConvertInterfaceLuidToAlias</c> returns NO_ERROR. Any nonzero return value indicates failure.</para>
            <list type="table">
            <listheader>
            <term>Error code</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            One of the parameters was invalid. This error is returned if either the InterfaceLuid or InterfaceAlias parameter was NULL or if
            the InterfaceLuid parameter was invalid.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>
            Not enough storage is available to process this command. This error is returned if the size of the buffer pointed to by the
            InterfaceAlias parameter was not large enough as specified in the Length parameter to hold the alias name.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>ConvertInterfaceLuidToAlias</c> function is available on Windows Vista and later.</para>
            <para>
            The <c>ConvertInterfaceLuidToAlias</c> function is protocol independent and works with network interfaces for both the IPv6 and
            IPv4 protocol.
            </para>
            <para>
            The maximum length of the alias name for a network interface, <c>NDIS_IF_MAX_STRING_SIZE</c>, without the terminating <c>NULL</c>
            is declared in the Ntddndis.h header file. The <c>NDIS_IF_MAX_STRING_SIZE</c> is defined to be the <c>IF_MAX_STRING_SIZE</c>
            constant defined in the Ifdef.h header file. The Ntddndis.h and Ifdef.h header files are automatically included in the Netioapi.h
            header file which is automatically included by the IpHlpApi.h header file. The Ntddndis.h, Ifdef.h, and Netioapi.h header files
            should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.ConvertInterfaceLuidToGuid(Vanara.PInvoke.IpHlpApi.NET_LUID@,System.Guid@)">
            <summary>
            <para>
            The <c>ConvertInterfaceLuidToGuid</c> function converts a locally unique identifier (LUID) for a network interface to a globally
            unique identifier (GUID) for the interface.
            </para>
            </summary>
            <param name="InterfaceLuid">
            <para>A pointer to a NET_LUID for a network interface.</para>
            </param>
            <param name="InterfaceGuid">
            <para>A pointer to the <c>GUID</c> for this interface.</para>
            </param>
            <returns>
            <para>
            On success, <c>ConvertInterfaceLuidToGuid</c> returns NO_ERROR. Any nonzero return value indicates failure and a <c>NULL</c> is
            returned in the InterfaceGuid parameter.
            </para>
            <list type="table">
            <listheader>
            <term>Error code</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            One of the parameters was invalid. This error is returned if either the InterfaceLuid or InterfaceGuid parameter was NULL or if
            the InterfaceLuid parameter was invalid.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>ConvertInterfaceLuidToGuid</c> function is available on Windows Vista and later.</para>
            <para>
            The <c>ConvertInterfaceLuidToGuid</c> function is protocol independent and works with network interfaces for both the IPv6 and
            IPv4 protocol.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.ConvertInterfaceLuidToIndex(Vanara.PInvoke.IpHlpApi.NET_LUID@,System.UInt32@)">
            <summary>
            The <c>ConvertInterfaceLuidToIndex</c> function converts a locally unique identifier (LUID) for a network interface to the local
            index for the interface.
            </summary>
            <param name="InterfaceLuid">A pointer to a NET_LUID for a network interface.</param>
            <param name="InterfaceIndex">The local index value for the interface.</param>
            <returns>
            <para>
            On success, <c>ConvertInterfaceLuidToIndex</c> returns NO_ERROR. Any nonzero return value indicates failure and a
            <c>NET_IFINDEX_UNSPECIFIED</c> is returned in the InterfaceIndex parameter.
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>Error code</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            One of the parameters was invalid. This error is returned if either the InterfaceLuid or InterfaceIndex parameter was NULL or if
            the InterfaceLuid parameter was invalid.
            </term>
            </item>
            </list>
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.ConvertInterfaceLuidToName(Vanara.PInvoke.IpHlpApi.NET_LUID@,System.Text.StringBuilder,Vanara.PInvoke.SizeT)">
            <summary>
            <para>
            The <c>ConvertInterfaceLuidToNameA</c> function converts a locally unique identifier (LUID) for a network interface to the ANSI
            interface name.
            </para>
            </summary>
            <param name="InterfaceLuid">
            <para>A pointer to a NET_LUID for a network interface.</para>
            </param>
            <param name="InterfaceName">
            <para>
            A pointer to a buffer to hold the <c>NULL</c>-terminated ANSI string containing the interface name when the function returns successfully.
            </para>
            </param>
            <param name="Length">
            <para>
            The length, in bytes, of the buffer pointed to by the InterfaceName parameter. This value must be large enough to accommodate the
            interface name and the terminating null character. The maximum required length is <c>NDIS_IF_MAX_STRING_SIZE</c> + 1.
            </para>
            </param>
            <returns>
            <para>
            On success, <c>ConvertInterfaceLuidToNameA</c> returns <c>NETIO_ERROR_SUCCESS</c>. Any nonzero return value indicates failure.
            </para>
            <list type="table">
            <listheader>
            <term>Error code</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            One of the parameters was invalid. This error is returned if either the InterfaceLuid or the InterfaceName parameter was NULL or
            if the InterfaceLuid parameter was invalid.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>
            Not enough storage is available to process this command. This error is returned if the size of the buffer pointed to by
            InterfaceName parameter was not large enough as specified in the Length parameter to hold the interface name.
            </term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>ConvertInterfaceLuidToNameA</c> function is available on Windows Vista and later.</para>
            <para>
            The <c>ConvertInterfaceLuidToNameA</c> function is protocol independent and works with network interfaces for both the IPv6 and
            IPv4 protocol. The <c>ConvertInterfaceLuidToNameA</c> converts a network interface LUID to an ANSI interface name.
            </para>
            <para>The ConvertInterfaceLuidToNameW converts a network interface LUID to a Unicode interface name.</para>
            <para>
            The maximum length of an interface name, <c>NDIS_IF_MAX_STRING_SIZE</c>, without the terminating <c>NULL</c> is declared in the
            Ntddndis.h header file. The <c>NDIS_IF_MAX_STRING_SIZE</c> is defined to be the <c>IF_MAX_STRING_SIZE</c> constant defined in the
            Ifdef.h header file. The Ntddndis.h and Ifdef.h header files are automatically included in the Netioapi.h header file which is
            automatically included by the IpHlpApi.h header file. The Ntddndis.h, Ifdef.h, and Netioapi.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.ConvertInterfaceNameToLuid(System.String,Vanara.PInvoke.IpHlpApi.NET_LUID@)">
            <summary>
            <para>
            The <c>ConvertInterfaceNameToLuidA</c> function converts an ANSI network interface name to the locally unique identifier (LUID)
            for the interface.
            </para>
            </summary>
            <param name="InterfaceName">
            <para>A pointer to a <c>NULL</c>-terminated ANSI string containing the network interface name.</para>
            </param>
            <param name="InterfaceLuid">
            <para>A pointer to the NET_LUID for this interface.</para>
            </param>
            <returns>
            <para>
            On success, <c>ConvertInterfaceNameToLuidA</c> returns <c>NETIO_ERROR_SUCCESS</c>. Any nonzero return value indicates failure.
            </para>
            <list type="table">
            <listheader>
            <term>Error code</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ERROR_BUFFER_OVERFLOW</term>
            <term>
            The length of the ANSI interface name was invalid. This error is returned if the InterfaceName parameter exceeded the maximum
            allowed string length for this parameter.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_NAME</term>
            <term>The interface name was invalid. This error is returned if the InterfaceName parameter contained an invalid name.</term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One of the parameters was invalid. This error is returned if the InterfaceLuid parameter was NULL.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>ConvertInterfaceNameToLuidA</c> function is available on Windows Vista and later.</para>
            <para>
            The <c>ConvertInterfaceNameToLuidA</c> function is protocol independent and works with network interfaces for both the IPv6 and
            IPv4 protocol. The <c>ConvertInterfaceNameToLuidA</c> converts an ANSI interface name to a LUID.
            </para>
            <para>The ConvertInterfaceNameToLuidW converts a Unicode interface name to a LUID.</para>
            <para>
            The maximum length of an interface name, <c>NDIS_IF_MAX_STRING_SIZE</c>, without the terminating <c>NULL</c> is declared in the
            Ntddndis.h header file. The <c>NDIS_IF_MAX_STRING_SIZE</c> is defined to be the <c>IF_MAX_STRING_SIZE</c> constant defined in the
            Ifdef.h header file. The Ntddndis.h and Ifdef.h header files are automatically included in the Netioapi.h header file which is
            automatically included by the IpHlpApi.h header file. The Ntddndis.h, Ifdef.h, and Netioapi.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.ConvertIpv4MaskToLength(System.UInt32,System.Byte@)">
            <summary>
            <para>The <c>ConvertIpv4MaskToLength</c> function converts an IPv4 subnet mask to an IPv4 prefix length.</para>
            </summary>
            <param name="Mask">
            <para>The IPv4 subnet mask.</para>
            </param>
            <param name="MaskLength">
            <para>A pointer to a <c>UINT8</c> value to hold the IPv4 prefix length, in bits, when the function returns successfully.</para>
            </param>
            <returns>
            <para>On success, <c>ConvertIpv4MaskToLength</c> returns <c>NO_ERROR</c>. Any nonzero return value indicates failure.</para>
            <list type="table">
            <listheader>
            <term>Error code</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One of the parameters was invalid. This error is returned if the Mask parameter was invalid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>ConvertIpv4MaskToLength</c> function is available on Windows Vista and later.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.ConvertLengthToIpv4Mask(System.UInt32,System.UInt32@)">
            <summary>
            <para>The <c>ConvertLengthToIpv4Mask</c> function converts an IPv4 prefix length to an IPv4 subnet mask.</para>
            </summary>
            <param name="MaskLength">
            <para>The IPv4 prefix length, in bits.</para>
            </param>
            <param name="Mask">
            <para>A pointer to a <c>LONG</c> value to hold the IPv4 subnet mask when the function returns successfully.</para>
            </param>
            <returns>
            <para>
            On success, <c>ConvertLengthToIpv4Mask</c> returns <c>NO_ERROR</c>. Any nonzero return value indicates failure and the Mask
            parameter is set to <c>INADDR_NONE</c> defined in the Ws2def.h header file.
            </para>
            <list type="table">
            <listheader>
            <term>Error code</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>One of the parameters was invalid. This error is returned if the MaskLength parameter was invalid.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>ConvertLengthToIpv4Mask</c> function is available on Windows Vista and later.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.CreateAnycastIpAddressEntry(Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW@)">
            <summary>
            <para>The <c>CreateAnycastIpAddressEntry</c> function adds a new anycast IP address entry on the local computer.</para>
            </summary>
            <param name="Row">
            <para>A pointer to a MIB_ANYCASTIPADDRESS_ROW structure entry for an anycast IP address entry.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Row parameter, the
            Address member of the MIB_ANYCASTIPADDRESS_ROW pointed to by the Row parameter was not set to a valid unicast IPv4 or IPv6
            address, or both the InterfaceLuid or InterfaceIndex members of the MIB_ANYCASTIPADDRESS_ROW pointed to by the Row parameter were unspecified.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface specified by the InterfaceLuid or
            InterfaceIndex member of the MIB_ANYCASTIPADDRESS_ROW pointed to by the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address was specified
            in the Address member of the MIB_ANYCASTIPADDRESS_ROW pointed to by the Row parameter. This error is also returned if no IPv6
            stack is on the local computer and an IPv6 address was specified in the Address member.
            </term>
            </item>
            <item>
            <term>ERROR_OBJECT_ALREADY_EXISTS</term>
            <term>
            The object already exists. This error is returned if the Address member of the MIB_ANYCASTIPADDRESS_ROW pointed to by the Row
            parameter is a duplicate of an existing anycast IP address on the interface specified by the InterfaceLuid or InterfaceIndex
            member of the MIB_ANYCASTIPADDRESS_ROW.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>CreateAnycastIpAddressEntry</c> function is defined on Windows Vista and later.</para>
            <para>The <c>CreateAnycastIpAddressEntry</c> function is used to add a new anycast IP address entry on a local computer.</para>
            <para>
            The <c>Address</c> member in the MIB_ANYCASTIPADDRESS_ROW structure pointed to by the Row parameter must be initialized to a
            valid unicast IPv4 or IPv6 address and family. In addition, at least one of the following members in the
            <c>MIB_ANYCASTIPADDRESS_ROW</c> structure pointed to the Row parameter must be initialized to the interface: the
            <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>
            The <c>ScopeId</c> member of the MIB_ANYCASTIPADDRESS_ROW structure pointed to by the Row is ignored when the
            <c>CreateAnycastIpAddressEntry</c> function is called. The <c>ScopeId</c> member is automatically determined by the interface on
            which the address is added.
            </para>
            <para>
            The <c>CreateAnycastIpAddressEntry</c> function will fail if the anycast IP address passed in the <c>Address</c> member of the
            MIB_ANYCASTIPADDRESS_ROW pointed to by the Row parameter is a duplicate of an existing anycast IP address on the interface.
            </para>
            <para>
            The <c>CreateAnycastIpAddressEntry</c> function can only be called by a user logged on as a member of the Administrators group.
            If <c>CreateAnycastIpAddressEntry</c> is called by a user that is not a member of the Administrators group, the function call
            will fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on
            Windows Vista and later. If an application that contains this function is executed by a user logged on as a member of the
            Administrators group other than the built-in Administrator, this call will fail unless the application has been marked in the
            manifest file with a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a
            user logged on as a member of the Administrators group other than the built-in Administrator must then be executing the
            application in an enhanced shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.CreateIpForwardEntry2(Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2@)">
            <summary>
            <para>The <c>CreateIpForwardEntry2</c> function creates a new IP route entry on the local computer.</para>
            </summary>
            <param name="Row">
            <para>A pointer to a MIB_IPFORWARD_ROW2 structure entry for an IP route entry.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Row parameter, the
            DestinationPrefix member of the MIB_IPFORWARD_ROW2 pointed to by the Row parameter was not specified, the NextHop member of the
            MIB_IPFORWARD_ROW2 pointed to by the Row parameter was not specified, or both the InterfaceLuid or InterfaceIndex members of the
            MIB_IPFORWARD_ROW2 pointed to by the Row parameter were unspecified. This error is also returned if the PreferredLifetime member
            specified in the MIB_IPFORWARD_ROW2 is greater than the ValidLifetime member or if the SitePrefixLength in the MIB_IPFORWARD_ROW2
            is greater than the prefix length specified in the DestinationPrefix.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface specified by the InterfaceLuid or
            InterfaceIndex member of the MIB_IPNET_ROW2 pointed to by the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if the interface specified does not support routes. This error is also
            returned if no IPv4 stack is on the local computer and AF_INET was specified in the address family in the DestinationPrefix
            member of the MIB_IPFORWARD_ROW2 pointed to by the Row parameter. This error is also returned if no IPv6 stack is on the local
            computer and AF_INET6 was specified for the address family in the DestinationPrefix member.
            </term>
            </item>
            <item>
            <term>ERROR_OBJECT_ALREADY_EXISTS</term>
            <term>
            The object already exists. This error is returned if the DestinationPrefix member of the MIB_IPFORWARD_ROW2 pointed to by the Row
            parameter is a duplicate of an existing IP route entry on the interface specified by the InterfaceLuid or InterfaceIndex member
            of the MIB_IPFORWARD_ROW2.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>CreateIpForwardEntry2</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>CreateIpForwardEntry2</c> function is used to add a new neighbor IP address entry on a local computer. The
            InitializeIpForwardEntry function should be used to initialize the members of a MIB_IPFORWARD_ROW2 structure entry with default
            values. An application can then change the members in the <c>MIB_IPFORWARD_ROW2</c> entry it wishes to modify, and then call the
            <c>CreateIpForwardEntry2</c> function.
            </para>
            <para>
            The <c>DestinationPrefix</c> member in the MIB_IPFORWARD_ROW2 structure pointed to by the Row parameter must be initialized to a
            valid IPv4 or IPv6 address prefix. The <c>NextHop</c> member in the <c>MIB_IPFORWARD_ROW2</c> structure pointed to by the Row
            parameter must be initialized to a valid IPv4 or IPv6 address and family. In addition, at least one of the following members in
            the <c>MIB_IPFORWARD_ROW2</c> structure pointed to the Row parameter must be initialized to the interface: the
            <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>
            The route metric offset specified in the <c>Metric</c> member of the MIB_IPFORWARD_ROW2 structure pointed to by Row parameter
            represents only part of the complete route metric. The complete metric is a combination of this route metric offset added to the
            interface metric specified in the <c>Metric</c> member of the MIB_IPINTERFACE_ROW structure of the associated interface. An
            application can retrieve the interface metric by calling the GetIpInterfaceEntry function.
            </para>
            <para>
            The <c>Age</c> and <c>Origin</c> members of the MIB_IPFORWARD_ROW2 structure pointed to by the Row are ignored when the
            <c>CreateIpForwardEntry2</c> function is called. These members are set by the network stack and cannot be set using the
            <c>CreateIpForwardEntry2</c> function.
            </para>
            <para>
            The <c>CreateIpForwardEntry2</c> function will fail if the <c>DestinationPrefix</c> and <c>NextHop</c> members of the
            MIB_IPFORWARD_ROW2 pointed to by the Row parameter are a duplicate of an existing IP route entry on the interface specified in
            the <c>InterfaceLuid</c> or <c>InterfaceIndex</c> members.
            </para>
            <para>
            The <c>CreateIpForwardEntry2</c> function can only be called by a user logged on as a member of the Administrators group. If
            <c>CreateIpForwardEntry2</c> is called by a user that is not a member of the Administrators group, the function call will fail
            and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on Windows Vista
            and later. If an application that contains this function is executed by a user logged on as a member of the Administrators group
            other than the built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.CreateIpNetEntry2(Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2@)">
            <summary>
            <para>The <c>CreateIpNetEntry2</c> function creates a new neighbor IP address entry on the local computer.</para>
            </summary>
            <param name="Row">
            <para>A pointer to a MIB_IPNET_ROW2 structure entry for a neighbor IP address entry.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Row parameter, the
            Address member of the MIB_IPNET_ROW2 pointed to by the Row parameter was not set to a valid unicast, anycast, or multicast IPv4
            or IPv6 address, the PhysicalAddress and PhysicalAddressLength members of the MIB_IPNET_ROW2 pointed to by the Row parameter were
            not set to a valid physical address, or both the InterfaceLuid or InterfaceIndex members of the MIB_IPNET_ROW2 pointed to by the
            Row parameter were unspecified. This error is also returned if a loopback address was passed in the Address member.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface specified by the InterfaceLuid or
            InterfaceIndex member of the MIB_IPNET_ROW2 pointed to by the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address was specified
            in the Address member of the MIB_IPNET_ROW2 pointed to by the Row parameter. This error is also returned if no IPv6 stack is on
            the local computer and an IPv6 address was specified in the Address member.
            </term>
            </item>
            <item>
            <term>ERROR_OBJECT_ALREADY_EXISTS</term>
            <term>
            The object already exists. This error is returned if the Address member of the MIB_IPNET_ROW2 pointed to by the Row parameter is
            a duplicate of an existing neighbor IP address on the interface specified by the InterfaceLuid or InterfaceIndex member of the MIB_IPNET_ROW2.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>CreateIpNetEntry2</c> function is defined on Windows Vista and later.</para>
            <para>The <c>CreateIpNetEntry2</c> function is used to add a new neighbor IP address entry on a local computer.</para>
            <para>
            The <c>Address</c> member in the MIB_IPNET_ROW2 structure pointed to by the Row parameter must be initialized to a valid unicast,
            anycast, or multicast IPv4 or IPv6 address and family. The <c>PhysicalAddress</c> and <c>PhysicalAddressLength</c> members in the
            <c>MIB_IPNET_ROW2</c> structure pointed to by the Row parameter must be initialized to a valid physical address. In addition, at
            least one of the following members in the <c>MIB_IPNET_ROW2</c> structure pointed to the Row parameter must be initialized to the
            interface: the <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>
            The <c>CreateIpNetEntry2</c> function will fail if the IP address passed in the <c>Address</c> member of the MIB_IPNET_ROW2
            pointed to by the Row parameter is a duplicate of an existing neighbor IP address on the interface.
            </para>
            <para>
            The <c>CreateIpNetEntry2</c> function can only be called by a user logged on as a member of the Administrators group. If
            <c>CreateIpNetEntry2</c> is called by a user that is not a member of the Administrators group, the function call will fail and
            <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on Windows Vista and
            later. If an application that contains this function is executed by a user logged on as a member of the Administrators group
            other than the built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.CreateSortedAddressPairs(System.IntPtr,System.UInt32,Vanara.PInvoke.Ws2_32.SOCKADDR_IN6[],System.UInt32,System.UInt32,Vanara.PInvoke.IpHlpApi.SafeMibTableHandle@,System.UInt32@)">
            <summary>
            <para>
            The <c>CreateSortedAddressPairs</c> function takes a supplied list of potential IP destination addresses, pairs the destination
            addresses with the host machine's local IP addresses, and sorts the pairs according to which address pair is best suited for
            communication between the two peers.
            </para>
            </summary>
            <param name="SourceAddressList">
            <para>Must be <c>NULL</c>. Reserved for future use.</para>
            </param>
            <param name="SourceAddressCount">
            <para>Must be 0. Reserved for future use.</para>
            </param>
            <param name="DestinationAddressList">
            <para>
            A pointer to an array of SOCKADDR_IN6 structures that contain a list of potential IPv6 destination addresses. Any IPv4 addresses
            must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.
            </para>
            </param>
            <param name="DestinationAddressCount">
            <para>The number of destination addresses pointed to by the DestinationAddressList parameter.</para>
            </param>
            <param name="AddressSortOptions">
            <para>Reserved for future use.</para>
            </param>
            <param name="SortedAddressPairList">
            <para>
            A pointer to store an array of SOCKADDR_IN6_PAIR structures that contain a list of pairs of IPv6 addresses sorted in the
            preferred order of communication, if the function call is successful.
            </para>
            </param>
            <param name="SortedAddressPairCount">
            <para>
            A pointer to store the number of address pairs pointed to by the SortedAddressPairList parameter, if the function call is successful.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the DestinationAddressList, SortedAddressPairList, or
            SortedAddressPairCount parameters NULL, or the DestinationAddressCount was greater than 500. This error is also returned if the
            SourceAddressList is not NULL or the SourceAddressPairCount parameter is not zero.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Not enough storage is available to process this command.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported. This error is returned if no IPv6 stack is on the local computer.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>CreateSortedAddressPairs</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>CreateSortedAddressPairs</c> function takes a list of source and destination IPv6 addresses, and returns a list of pairs
            of addresses in sorted order. The list is sorted by which address pair is best suited for communication between the source and
            destination address.
            </para>
            <para>
            The list of source addresses pointed to by the SourceAddressList is currently reserved for future and must be a <c>NULL</c>
            pointer. The SourceAddressCount is currently reserved for future and must be zero. The <c>CreateSortedAddressPairs</c> function
            currently uses all of the host machine's local addresses for the source address list.
            </para>
            <para>
            The list of destination addresses is pointed to by the DestinationAddressList parameter. The list of destination addresses is an
            array of SOCKADDR_IN6 structures. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an
            IPv6 only application to communicate with an IPv4 node. For more information on the IPv4-mapped IPv6 address format, see
            Dual-Stack Sockets. The DestinationAddressCount parameter contains the number of destination addresses pointed to by the
            DestinationAddressList parameter. The <c>CreateSortedAddressPairs</c> function supports a maximum of 500 destination addresses.
            </para>
            <para>
            If the <c>CreateSortedAddressPairs</c> function is successful, the SortedAddressPairList parameter points to an array of
            SOCKADDR_IN6_PAIR structures that contain the sorted address pairs. When this returned list is no longer required, free the
            memory used by the list by calling the FreeMibTable function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.CreateSortedAddressPairs(Vanara.PInvoke.Ws2_32.SOCKADDR_IN6[])">
            <summary>
            The <c>CreateSortedAddressPairs</c> function takes a supplied list of potential IP destination addresses, pairs the destination
            addresses with the host machine's local IP addresses, and sorts the pairs according to which address pair is best suited for
            communication between the two peers.
            </summary>
            <param name="DestinationAddressList">
            An array of SOCKADDR_IN6 structures that contain a list of potential IPv6 destination addresses. Any IPv4 addresses must be
            represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.
            </param>
            <returns>An array of SOCKADDR_IN6_PAIR structures that contain the sorted address pairs.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.CreateUnicastIpAddressEntry(Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW@)">
            <summary>
            <para>The <c>CreateUnicastIpAddressEntry</c> function adds a new unicast IP address entry on the local computer.</para>
            </summary>
            <param name="Row">
            <para>A pointer to a MIB_UNICASTIPADDRESS_ROW structure entry for a unicast IP address entry.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Row parameter, the
            Address member of the MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter was not set to a valid unicast IPv4 or IPv6
            address, or both the InterfaceLuid and InterfaceIndex members of the MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter
            were unspecified. This error is also returned for other errors in the values set for members in the MIB_UNICASTIPADDRESS_ROW
            structure. These errors include the following: if the ValidLifetime member is less than the PreferredLifetime member, if the
            PrefixOrigin member is set to IpPrefixOriginUnchanged and the SuffixOrigin is the not set to IpSuffixOriginUnchanged, if the
            PrefixOrigin member is not set to IpPrefixOriginUnchanged and the SuffixOrigin is set to IpSuffixOriginUnchanged, if the
            PrefixOrigin member is not set to a value from the NL_PREFIX_ORIGIN enumeration, if the SuffixOrigin member is not set to a value
            from the NL_SUFFIX_ORIGIN enumeration, or if the OnLinkPrefixLength member is set to a value greater than the IP address length,
            in bits (32 for a unicast IPv4 address or 128 for a unicast IPv6 address).
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface specified by the InterfaceLuid or
            InterfaceIndex member of the MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address was specified
            in the Address member of the MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter. This error is also returned if no IPv6
            stack is on the local computer and an IPv6 address was specified in the Address member.
            </term>
            </item>
            <item>
            <term>ERROR_OBJECT_ALREADY_EXISTS</term>
            <term>
            The object already exists. This error is returned if the Address member of the MIB_UNICASTIPADDRESS_ROW pointed to by the Row
            parameter is a duplicate of an existing unicast IP address on the interface specified by the InterfaceLuid or InterfaceIndex
            member of the MIB_UNICASTIPADDRESS_ROW.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>CreateUnicastIpAddressEntry</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>CreateUnicastIpAddressEntry</c> function is used to add a new unicast IP address entry on a local computer. The unicast IP
            address added by the <c>CreateUnicastIpAddressEntry</c> function is not persistent. The IP address exists only as long as the
            adapter object exists. Restarting the computer destroys the IP address, as does manually resetting the network interface card
            (NIC). Also, certain PnP events may destroy the address.
            </para>
            <para>
            To create an IPv4 address that persists, the EnableStatic method of the Win32_NetworkAdapterConfiguration Class in the Windows
            Management Instrumentation (WMI) controls may be used. The netsh command can also be used to create a persistent IPv4 or IPv6 address.
            </para>
            <para>For more information, please see the documentation on Netsh.exe in the Windows Sockets documentation.</para>
            <para>
            The InitializeUnicastIpAddressEntry function should be used to initialize the members of a MIB_UNICASTIPADDRESS_ROW structure
            entry with default values. An application can then change the members in the <c>MIB_UNICASTIPADDRESS_ROW</c> entry it wishes to
            modify, and then call the <c>CreateUnicastIpAddressEntry</c> function.
            </para>
            <para>
            The <c>Address</c> member in the MIB_UNICASTIPADDRESS_ROW structure pointed to by the Row parameter must be initialized to a
            valid unicast IPv4 or IPv6 address. The <c>si_family</c> member of the <c>SOCKADDR_INET</c> structure in the <c>Address</c>
            member must be initialized to either <c>AF_INET</c> or <c>AF_INET6</c> and the related <c>Ipv4</c> or <c>Ipv6</c> member of the
            <c>SOCKADDR_INET</c> structure must be set to a valid unicast IP address. In addition, at least one of the following members in
            the <c>MIB_UNICASTIPADDRESS_ROW</c> structure pointed to the Row parameter must be initialized to the interface: the
            <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>
            If the <c>OnLinkPrefixLength</c> member of the MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter is set to 255, then
            <c>CreateUnicastIpAddressEntry</c> will add the new unicast IP address with the <c>OnLinkPrefixLength</c> member set equal to the
            length of the IP address. So for a unicast IPv4 address, the <c>OnLinkPrefixLength</c> is set to 32 and the
            <c>OnLinkPrefixLength</c> is set to 128 for a unicast IPv6 address. If this would result in the incorrect subnet mask for an IPv4
            address or the incorrect link prefix for an IPv6 address, then the application should set this member to the correct value before
            calling <c>CreateUnicastIpAddressEntry</c>.
            </para>
            <para>
            If a unicast IP address is created with the <c>OnLinkPrefixLength</c> member set incorrectly, then the IP address may be changed
            by calling SetUnicastIpAddressEntry with the <c>OnLinkPrefixLength</c> member set to the correct value.
            </para>
            <para>
            The <c>DadState</c>, <c>ScopeId</c>, and <c>CreationTimeStamp</c> members of the MIB_UNICASTIPADDRESS_ROW structure pointed to by
            the Row are ignored when the <c>CreateUnicastIpAddressEntry</c> function is called. These members are set by the network stack.
            The <c>ScopeId</c> member is automatically determined by the interface on which the address is added. Beginning in Windows 10, if
            <c>DadState</c> is set to <c>IpDadStatePreferred</c> in the <c>MIB_UNICASTIPADDRESS_ROW</c> structure when calling
            <c>CreateUnicastIpAddressEntry</c>, the stack will set the initial DAD state of the address to “preferred” instead of “tentative”
            and will do optimistic DAD for the address.
            </para>
            <para>
            The <c>CreateUnicastIpAddressEntry</c> function will fail if the unicast IP address passed in the <c>Address</c> member of the
            MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter is a duplicate of an existing unicast IP address on the interface. Note
            that a loopback IP address can only be added to a loopback interface using the <c>CreateUnicastIpAddressEntry</c> function.
            </para>
            <para>
            The unicast IP address passed in the <c>Address</c> member of the MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter is not
            usable immediately. The IP address is usable after the duplicate address detection process has completed successfully. It can
            take several seconds for the duplicate address detection process to complete since IP packets need to be sent and potential
            responses must be awaited. For IPv6, the duplicate address detection process typically takes about a second. For IPv4, the
            duplicate address detection process typically takes about three seconds.
            </para>
            <para>
            If an application that needs to know when an IP address is usable after a call to the <c>CreateUnicastIpAddressEntry</c>
            function, there are two methods that can be used. One method uses polling and the GetUnicastIpAddressEntry function. The second
            method calls one of the notification functions, NotifyAddrChange, NotifyIpInterfaceChange, or NotifyUnicastIpAddressChange to set
            up an asynchronous notification for when an address changes.
            </para>
            <para>
            The following method describes how to use the GetUnicastIpAddressEntry and polling. After the call to the
            <c>CreateUnicastIpAddressEntry</c> function returns successfully, pause for one to three seconds (depending on whether an IPv6 or
            IPv4 address is being created) to allow time for the successful completion of the duplication address detection process. Then
            call the <c>GetUnicastIpAddressEntry</c> function to retrieve the updated MIB_UNICASTIPADDRESS_ROW structure and examine the
            value of the <c>DadState</c> member. If the value of the <c>DadState</c> member is set to <c>IpDadStatePreferred</c>, the IP
            address is now usable. If the value of the <c>DadState</c> member is set to <c>IpDadStateTentative</c>, then duplicate address
            detection has not yet completed. In this case, call the <c>GetUnicastIpAddressEntry</c> function again every half a second while
            the <c>DadState</c> member is still set to <c>IpDadStateTentative</c>. If the value of the <c>DadState</c> member returns with
            some value other than <c>IpDadStatePreferred</c> or <c>IpDadStateTentative</c>, duplicate address detection has failed and the IP
            address is not usable.
            </para>
            <para>
            The following method describes how to use an appropriate notification function. After the call to the
            <c>CreateUnicastIpAddressEntry</c> function returns successfully, call the NotifyUnicastIpAddressChange function to register to
            be notified of changes to either IPv6 or IPv4 unicast IP addresses, depending on the type of IP address being created. When a
            notification is received for the IP address being created, call the GetUnicastIpAddressEntry function to retrieve the
            <c>DadState</c> member. If the value of the <c>DadState</c> member is set to <c>IpDadStatePreferred</c>, the IP address is now
            usable. If the value of the <c>DadState</c> member is set to <c>IpDadStateTentative</c>, then duplicate address detection has not
            yet completed and the application needs to wait for future notifications. If the value of the <c>DadState</c> member returns with
            some value other than <c>IpDadStatePreferred</c> or <c>IpDadStateTentative</c>, duplicate address detection has failed and the IP
            address is not usable.
            </para>
            <para>
            If during the duplicate address detection process the media is disconnected and then reconnected, the duplicate address detection
            process is restarted. So it is possible for the time to complete the process to increase beyond the typical 1 second value for
            IPv6 or 3 second value for IPv4.
            </para>
            <para>
            The <c>CreateUnicastIpAddressEntry</c> function can only be called by a user logged on as a member of the Administrators group.
            If <c>CreateUnicastIpAddressEntry</c> is called by a user that is not a member of the Administrators group, the function call
            will fail and ERROR_ACCESS_DENIED is returned. This function can also fail because of user account control (UAC) on Windows Vista
            and later. If an application that contains this function is executed by a user logged on as a member of the Administrators group
            other than the built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application on lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            <para>Examples</para>
            <para>
            The following example demonstrates how to use the <c>CreateUnicastIpAddressEntry</c> function to add a new unicast IP address
            entry on the local computer.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.DeleteAnycastIpAddressEntry(Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW@)">
            <summary>
            <para>The <c>DeleteAnycastIpAddressEntry</c> function deletes an existing anycast IP address entry on the local computer.</para>
            </summary>
            <param name="Row">
            <para>
            A pointer to a MIB_ANYCASTIPADDRESS_ROW structure entry for an existing anycast IP address entry to delete from the local computer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Row parameter, the
            Address member of the MIB_ANYCASTIPADDRESS_ROW pointed to by the Row parameter was not set to a valid unicast IPv4 or IPv6
            address, or both the InterfaceLuid or InterfaceIndex members of the MIB_ANYCASTIPADDRESS_ROW pointed to by the Row parameter were unspecified.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface specified by the InterfaceLuid or
            InterfaceIndex member of the MIB_ANYCASTIPADDRESS_ROW pointed to by the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address was specified
            in the Address member MIB_ANYCASTIPADDRESS_ROW pointed to by the Row parameter. This error is also returned if no IPv6 stack is
            on the local computer and an IPv6 address was specified in the Address member .
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>DeleteAnycastIpAddressEntry</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>DeleteAnycastIpAddressEntry</c> function is used to delete an existing MIB_ANYCASTIPADDRESS_ROW structure entry on the
            local computer.
            </para>
            <para>
            On input, the <c>Address</c> member in the MIB_ANYCASTIPADDRESS_ROW structure pointed to by the Row parameter must be set to a
            valid unicast IPv4 or IPv6 address and family. In addition, at least one of the following members in the
            <c>MIB_ANYCASTIPADDRESS_ROW</c> structure pointed to the Row parameter must be initialized: the <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>If the function is successful, the existing IP address represented by the Row parameter was deleted.</para>
            <para>
            The GetAnycastIpAddressTable function can be called to enumerate the anycast IP address entries on a local computer. The
            GetAnycastIpAddressEntry function can be called to retrieve a specific existing anycast IP address entry.
            </para>
            <para>
            The <c>DeleteAnycastIpAddressEntry</c> function can only be called by a user logged on as a member of the Administrators group.
            If <c>DeleteAnycastIpAddressEntry</c> is called by a user that is not a member of the Administrators group, the function call
            will fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on
            Windows Vista and later. If an application that contains this function is executed by a user logged on as a member of the
            Administrators group other than the built-in Administrator, this call will fail unless the application has been marked in the
            manifest file with a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a
            user logged on as a member of the Administrators group other than the built-in Administrator must then be executing the
            application in an enhanced shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.DeleteIpForwardEntry2(Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2@)">
            <summary>
            <para>The <c>DeleteIpForwardEntry2</c> function deletes an IP route entry on the local computer.</para>
            </summary>
            <param name="Row">
            <para>A pointer to a MIB_IPFORWARD_ROW2 structure entry for an IP route entry. On successful return, this entry will be deleted.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Row parameter, the
            DestinationPrefix member of the MIB_IPFORWARD_ROW2 pointed to by the Row parameter was not specified, the NextHop member of the
            MIB_IPFORWARD_ROW2 pointed to by the Row parameter was not specified, or both the InterfaceLuid or InterfaceIndex members of the
            MIB_IPFORWARD_ROW2 pointed to by the Row parameter were unspecified.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface specified by the InterfaceLuid or
            InterfaceIndex member of the MIB_IPFORWARD_ROW2 pointed to by the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address was specified
            in the Address member of the MIB_IPFORWARD_ROW2 pointed to by the Row parameter. This error is also returned if no IPv6 stack is
            on the local computer and an IPv6 address was specified in the Address member.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>DeleteIpForwardEntry2</c> function is defined on Windows Vista and later.</para>
            <para>The <c>DeleteIpForwardEntry2</c> function is used to delete a MIB_IPFORWARD_ROW2 structure entry.</para>
            <para>
            On input, the <c>DestinationPrefix</c> member in the MIB_IPFORWARD_ROW2 structure pointed to by the Row parameter must be
            initialized to a valid IPv4 or IPv6 address prefix and family. On input, the <c>NextHop</c> member in the
            <c>MIB_IPFORWARD_ROW2</c> structure pointed to by the Row parameter must be initialized to a valid IPv4 or IPv6 address and
            family. In addition, at least one of the following members in the <c>MIB_IPFORWARD_ROW2</c> structure pointed to the Row
            parameter must be initialized: the <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>On output when the call is successful, <c>DeleteIpForwardEntry2</c> deletes the IP route entry.</para>
            <para>
            The <c>DeleteIpForwardEntry2</c> function will fail if the <c>DestinationPrefix</c> and <c>NextHop</c> members of the
            MIB_IPFORWARD_ROW2 pointed to by the Row parameter do not match an existing IP route entry on the interface specified in the
            <c>InterfaceLuid</c> or <c>InterfaceIndex</c> members.
            </para>
            <para>The GetIpForwardTable2 function can be called to enumerate the IP route entries on a local computer.</para>
            <para>
            The <c>DeleteIpForwardEntry2</c> function can only be called by a user logged on as a member of the Administrators group. If
            <c>DeleteIpForwardEntry2</c> is called by a user that is not a member of the Administrators group, the function call will fail
            and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on Windows Vista
            and later. If an application that contains this function is executed by a user logged on as a member of the Administrators group
            other than the built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.DeleteIpNetEntry2(Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2@)">
            <summary>
            <para>The <c>DeleteIpNetEntry2</c> function deletes a neighbor IP address entry on the local computer.</para>
            </summary>
            <param name="Row">
            <para>
            A pointer to a MIB_IPNET_ROW2 structure entry for a neighbor IP address entry. On successful return, this entry will be deleted.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Row parameter, the
            Address member of the MIB_IPNET_ROW2 pointed to by the Row parameter was not set to a valid neighbor IPv4 or IPv6 address, or
            both the InterfaceLuid or InterfaceIndex members of the MIB_IPNET_ROW2 pointed to by the Row parameter were unspecified.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface specified by the InterfaceLuid or
            InterfaceIndex member of the MIB_IPNET_ROW2 pointed to by the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address was specified
            in the Address member of the MIB_IPNET_ROW2 pointed to by the Row parameter. This error is also returned if no IPv6 stack is on
            the local computer and an IPv6 address was specified in the Address member.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>DeleteIpNetEntry2</c> function is defined on Windows Vista and later.</para>
            <para>The <c>DeleteIpNetEntry2</c> function is used to delete a MIB_IPNET_ROW2 structure entry.</para>
            <para>
            On input, the <c>Address</c> member in the MIB_IPNET_ROW2 structure pointed to by the Row parameter must be initialized to a
            valid neighbor IPv4 or IPv6 address and family. In addition, at least one of the following members in the <c>MIB_IPNET_ROW2</c>
            structure pointed to the Row parameter must be initialized: the <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>On output when the call is successful, <c>DeleteIpNetEntry2</c> deletes the neighbor IP address.</para>
            <para>The GetIpNetTable2 function can be called to enumerate the neighbor IP address entries on a local computer.</para>
            <para>
            The <c>DeleteIpNetEntry2</c> function can only be called by a user logged on as a member of the Administrators group. If
            <c>DeleteIpNetEntry2</c> is called by a user that is not a member of the Administrators group, the function call will fail and
            <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on Windows Vista and
            later. If an application that contains this function is executed by a user logged on as a member of the Administrators group
            other than the built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.DeleteUnicastIpAddressEntry(Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW@)">
            <summary>
            <para>The <c>DeleteUnicastIpAddressEntry</c> function deletes an existing unicast IP address entry on the local computer.</para>
            </summary>
            <param name="Row">
            <para>
            A pointer to a MIB_UNICASTIPADDRESS_ROW structure entry for an existing unicast IP address entry to delete from the local computer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Row parameter, the
            Address member of the MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter was not set to a valid unicast IPv4 or IPv6
            address, or both the InterfaceLuid or InterfaceIndex members of the MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter were unspecified.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface specified by the InterfaceLuid or
            InterfaceIndex member of the MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address was specified
            in the Address member MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter. This error is also returned if no IPv6 stack is
            on the local computer and an IPv6 address was specified in the Address member.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>DeleteUnicastIpAddressEntry</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>DeleteUnicastIpAddressEntry</c> function is used to delete an existing MIB_UNICASTIPADDRESS_ROW structure entry on the
            local computer.
            </para>
            <para>
            On input, the <c>Address</c> member in the MIB_UNICASTIPADDRESS_ROW structure pointed to by the Row parameter must be set to a
            valid unicast IPv4 or IPv6 address and family. In addition, at least one of the following members in the
            <c>MIB_UNICASTIPADDRESS_ROW</c> structure pointed to the Row parameter must be initialized: the <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>If the function is successful, the existing IP address represented by the Row parameter was deleted.</para>
            <para>
            The GetUnicastIpAddressTable function can be called to enumerate the unicast IP address entries on a local computer. The
            GetUnicastIpAddressEntry function can be called to retrieve a specific existing unicast IP address entry.
            </para>
            <para>
            The <c>DeleteUnicastIpAddressEntry</c> function can only be called by a user logged on as a member of the Administrators group.
            If <c>DeleteUnicastIpAddressEntry</c> is called by a user that is not a member of the Administrators group, the function call
            will fail and <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on
            Windows Vista and later. If an application that contains this function is executed by a user logged on as a member of the
            Administrators group other than the built-in Administrator, this call will fail unless the application has been marked in the
            manifest file with a <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a
            user logged on as a member of the Administrators group other than the built-in Administrator must then be executing the
            application in an enhanced shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.FlushIpNetTable2(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,System.UInt32)">
            <summary>
            <para>The <c>FlushIpNetTable2</c> function flushes the IP neighbor table on the local computer.</para>
            </summary>
            <param name="Family">
            <para>The address family to flush.</para>
            <para>
            Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family
            and PF_ protocol family constants are identical (for example, <c>AF_INET</c> and <c>PF_INET</c>), so either constant can be used.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for
            this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h,
            and should never be used directly.
            </para>
            <para>The values currently supported are <c>AF_INET</c>, <c>AF_INET6</c>, and <c>AF_UNSPEC</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_UNSPEC 0</term>
            <term>
            The address family is unspecified. When this parameter is specified, this function flushes the neighbor IP address table
            containing both IPv4 and IPv6 entries.
            </term>
            </item>
            <item>
            <term>AF_INET 2</term>
            <term>
            The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function flushes the neighbor IP
            address table containing only IPv4 entries.
            </term>
            </item>
            <item>
            <term>AF_INET6 23</term>
            <term>
            The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function flushes the neighbor IP
            address table containing only IPv6 entries.
            </term>
            </item>
            </list>
            </param>
            <param name="InterfaceIndex">
            <para>
            The interface index. If the index is specified, flush the neighbor IP address entries on a specific interface, otherwise flush
            the neighbor IP address entries on all the interfaces. To ignore the interface, set this parameter to zero.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the Family parameter was not specified as AF_INET,
            AF_INET6, or AF_UNSPEC.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and AF_INET was specified in the
            Family parameter. This error is also returned if no IPv6 stack is on the local computer and AF_INET6 was specified in the Family
            parameter. This error is also returned on versions of Windows where this function is not supported.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>FlushIpNetTable2</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>FlushIpNetTable2</c> function flushes or deletes the neighbor IP addresses on a local system. The Family parameter can be
            used to limit neighbor IP addresses to delete to a particular IP address family. If neighbor IP addresses for both IPv4 and IPv6
            should be deleted, set the Family parameter to <c>AF_UNSPEC</c>. The InterfaceIndex parameter can be used to limit neighbor IP
            addresses to delete to a particular interface. If neighbor IP addresses for all interfaces should be deleted, set the
            InterfaceIndex parameter to zero.
            </para>
            <para>The Family parameter must be initialized to either <c>AF_INET</c>, <c>AF_INET6</c>, or <c>AF_UNSPEC</c>.</para>
            <para>
            The <c>FlushIpNetTable2</c> function can only be called by a user logged on as a member of the Administrators group. If
            <c>FlushIpNetTable2</c> is called by a user that is not a member of the Administrators group, the function call will fail and
            <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on Windows Vista and
            later. If an application that contains this function is executed by a user logged on as a member of the Administrators group
            other than the built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.FlushIpPathTable(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY)">
            <summary>
            <para>The <c>FlushIpPathTable</c> function flushes the IP path table on the local computer.</para>
            </summary>
            <param name="Family">
            <para>The address family to flush.</para>
            <para>
            Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family
            and PF_ protocol family constants are identical (for example, <c>AF_INET</c> and <c>PF_INET</c>), so either constant can be used.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for
            this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h,
            and should never be used directly.
            </para>
            <para>The values currently supported are <c>AF_INET</c>, <c>AF_INET6</c>, and <c>AF_UNSPEC</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_UNSPEC 0</term>
            <term>
            The address family is unspecified. When this parameter is specified, this function flushes the IP path table containing both IPv4
            and IPv6 entries.
            </term>
            </item>
            <item>
            <term>AF_INET 2</term>
            <term>
            The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function flushes the IP path table
            containing only IPv4 entries.
            </term>
            </item>
            <item>
            <term>AF_INET6 23</term>
            <term>
            The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function flushes the IP path table
            containing only IPv6 entries.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the Family parameter was not specified as AF_INET,
            AF_INET6, or AF_UNSPEC.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and AF_INET was specified in the
            Family parameter. This error is also returned if no IPv6 stack is on the local computer and AF_INET6 was specified in the Family
            parameter. This error is also returned on versions of Windows where this function is not supported.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>FlushIpPathTable</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>FlushIpPathTable</c> function flushes or deletes the IP path entries on a local system. The Family parameter can be used
            to limit the IP path entries to delete to a particular IP address family. If IP path entries for both IPv4 and IPv6 should be
            deleted, set the Family parameter to <c>AF_UNSPEC</c>.
            </para>
            <para>The Family parameter must be initialized to either <c>AF_INET</c>, <c>AF_INET6</c>, or <c>AF_UNSPEC</c>.</para>
            <para>
            The <c>FlushIpPathTable</c> function can only be called by a user logged on as a member of the Administrators group. If
            <c>FlushIpPathTable</c> is called by a user that is not a member of the Administrators group, the function call will fail and
            <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on Windows Vista and
            later. If an application that contains this function is executed by a user logged on as a member of the Administrators group
            other than the built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.FreeMibTable(System.IntPtr)">
            <summary>
            <para>
            The <c>FreeMibTable</c> function frees the buffer allocated by the functions that return tables of network interfaces, addresses,
            and routes (GetIfTable2 and GetAnycastIpAddressTable, for example).
            </para>
            </summary>
            <param name="Memory">
            <para>A pointer to the buffer to free.</para>
            </param>
            <returns>
            <para>This function does not return a value.</para>
            </returns>
            <remarks>
            <para>The <c>FreeMibTable</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>FreeMibTable</c> function is used to free the internal buffers used by various functions to retrieve tables of interfaces,
            addresses, and routes. When these tables are no longer needed, then <c>FreeMibTable</c> should be called to release the memory
            used by these tables.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetAnycastIpAddressEntry(Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW@)">
            <summary>
            <para>
            The <c>GetAnycastIpAddressEntry</c> function retrieves information for an existing anycast IP address entry on the local computer.
            </para>
            </summary>
            <param name="Row">
            <para>
            A pointer to a MIB_ANYCASTIPADDRESS_ROW structure entry for an anycast IP address entry. On successful return, this structure
            will be updated with the properties for an existing anycast IP address.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            The system cannot find the file specified. This error is returned if the network interface LUID or interface index specified by
            the InterfaceLuid or InterfaceIndex member of the MIB_ANYCASTIPADDRESS_ROW pointed to by the Row parameter is not a value on the
            local machine.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            A parameter is incorrect. This error is returned if a NULL pointer is passed in the Row parameter, the Address member of the
            MIB_ANYCASTIPADDRESS_ROW pointed to by the Row parameter is not set to a valid anycast IPv4 or IPv6 address, or both the
            InterfaceLuid or InterfaceIndex members of the MIB_ANYCASTIPADDRESS_ROW pointed to by the Row parameter were unspecified.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            Element not found. This error is returned if the network interface specified by the InterfaceLuid or InterfaceIndex member of the
            MIB_ANYCASTIPADDRESS_ROW structure pointed to by the Row parameter does not match the IP address and address family specified in
            the Address member in the MIB_ANYCASTIPADDRESS_ROW structure.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address is specified
            in the Address member of the MIB_UNICASTIPADDRESS_ROW structure pointed to by the Row parameter. This error is returned if no
            IPv6 stack is on the local computer and an IPv6 address is specified in the Address member.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetAnycastIpAddressEntry</c> function is defined on Windows Vista and later.</para>
            <para>The <c>GetAnycastIpAddressEntry</c> function is used to retrieve an existing MIB_ANYCASTIPADDRESS_ROW structure entry.</para>
            <para>
            On input, the <c>Address</c> member in the MIB_ANYCASTIPADDRESS_ROW structure pointed to by the Row parameter must be initialized
            to a valid anycast IPv4 or IPv6 address and family. In addition, at least one of the following members in the
            <c>MIB_ANYCASTIPADDRESS_ROW</c> structure pointed to the Row parameter must be initialized: the <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>
            On output when the call is successful, <c>GetAnycastIpAddressEntry</c> retrieves the other properties for the anycast IP address
            and fills out the MIB_ANYCASTIPADDRESS_ROW structure pointed to by the Row parameter.
            </para>
            <para>The GetAnycastIpAddressTable function can be called to enumerate the anycast IP address entries on a local computer.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetAnycastIpAddressTable(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_TABLE@)">
            <summary>
            <para>The <c>GetAnycastIpAddressTable</c> function retrieves the anycast IP address table on the local computer.</para>
            </summary>
            <param name="Family">
            <para>The address family to retrieve.</para>
            <para>
            Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family
            and PF_ protocol family constants are identical (for example, <c>AF_INET</c> and <c>PF_INET</c>), so either constant can be used.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for
            this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h,
            and should never be used directly.
            </para>
            <para>The values currently supported are <c>AF_INET</c>, <c>AF_INET6</c>, and <c>AF_UNSPEC</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_UNSPEC 0</term>
            <term>
            The address family is unspecified. When this parameter is specified, this function returns the anycast IP address table
            containing both IPv4 and IPv6 entries.
            </term>
            </item>
            <item>
            <term>AF_INET 2</term>
            <term>
            The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function returns the anycast IP
            address table containing only IPv4 entries.
            </term>
            </item>
            <item>
            <term>AF_INET6 23</term>
            <term>
            The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function returns the anycast IP
            address table containing only IPv6 entries.
            </term>
            </item>
            </list>
            </param>
            <param name="Table">
            <para>A pointer to a MIB_ANYCASTIPADDRESS_TABLE structure that contains a table of anycast IP address entries on the local computer.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Table parameter or the
            Family parameter was not specified as AF_INET, AF_INET6, or AF_UNSPEC.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Insufficient memory resources are available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>No anycast IP address entries as specified in the Family parameter were found.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and AF_INET was specified in the
            Family parameter. This error is also returned if no IPv6 stack is on the local computer and AF_INET6 was specified in the Family
            parameter. This error is also returned on versions of Windows where this function is not supported.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetAnycastIpAddressTable</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetAnycastIpAddressTable</c> function enumerates the anycast IP addresses on a local system and returns this information
            in a MIB_ANYCASTIPADDRESS_TABLE structure.
            </para>
            <para>
            The anycast IP address entries are returned in a MIB_ANYCASTIPADDRESS_TABLE structure in the buffer pointed to by the Table
            parameter. The <c>MIB_ANYCASTIPADDRESS_TABLE</c> structure contains an anycast IP address entry count and an array of
            MIB_ANYCASTIPADDRESS_ROW structures for each anycast IP address entry. When these returned structures are no longer required,
            free the memory by calling the FreeMibTable.
            </para>
            <para>The Family parameter must be initialized to either <c>AF_INET</c>, <c>AF_INET6</c>, or <c>AF_UNSPEC</c>.</para>
            <para>
            Note that the returned MIB_ANYCASTIPADDRESS_TABLE structure pointed to by the Table parameter may contain padding for alignment
            between the <c>NumEntries</c> member and the first MIB_ANYCASTIPADDRESS_ROW array entry in the <c>Table</c> member of the
            <c>MIB_ANYCASTIPADDRESS_TABLE</c> structure. Padding for alignment may also be present between the
            <c>MIB_ANYCASTIPADDRESS_ROW</c> array entries. Any access to a <c>MIB_ANYCASTIPADDRESS_ROW</c> array entry should assume padding
            may exist.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetBestRoute2(Vanara.PInvoke.IpHlpApi.NET_LUID@,System.UInt32,Vanara.PInvoke.Ws2_32.SOCKADDR_INET@,Vanara.PInvoke.Ws2_32.SOCKADDR_INET@,System.UInt32,Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2@,Vanara.PInvoke.Ws2_32.SOCKADDR_INET@)">
            <summary>
            <para>
            The <c>GetBestRoute2</c> function retrieves the IP route entry on the local computer for the best route to the specified
            destination IP address.
            </para>
            </summary>
            <param name="InterfaceLuid">
            <para>The locally unique identifier (LUID) to specify the network interface associated with an IP route entry.</para>
            </param>
            <param name="InterfaceIndex">
            <para>
            The local index value to specify the network interface associated with an IP route entry. This index value may change when a
            network adapter is disabled and then enabled, or under other circumstances, and should not be considered persistent.
            </para>
            </param>
            <param name="SourceAddress">
            <para>The source IP address. This parameter may be omitted and passed as a <c>NULL</c> pointer.</para>
            </param>
            <param name="DestinationAddress">
            <para>The destination IP address.</para>
            </param>
            <param name="AddressSortOptions">
            <para>A set of options that affect how IP addresses are sorted. This parameter is not currently used.</para>
            </param>
            <param name="BestRoute">
            <para>A pointer to the MIB_IPFORWARD_ROW2 for the best route from the source IP address to the destination IP address.</para>
            </param>
            <param name="BestSourceAddress">
            <para>A pointer to the best source IP address.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the DestinationAddress,
            BestSourceAddress, or the BestRoute parameter. This error is also returned if the DestinationAddress parameter does not specify
            an IPv4 or IPv6 address and family.
            </term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface specified by the InterfaceLuid or
            InterfaceIndex parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address and family was
            specified in the DestinationAddress parameter. This error is also returned if no IPv6 stack is on the local computer and an IPv6
            address and family was specified in the DestinationAddress parameter.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetBestRoute2</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetBestRoute2</c> function is used to retrieve a MIB_IPFORWARD_ROW2 structure entry for the best route from a source IP
            address to a destination IP address.
            </para>
            <para>
            On input, the DestinationAddress parameter must be initialized to a valid IPv4 or IPv6 address and family. On input, the
            SourceAddress parameter may be initialized to the preferred IPv4 or IPv6 address and family. In addition, at least one of the
            following parameters must be initialized: the InterfaceLuid or InterfaceIndex.
            </para>
            <para>
            On output when the call is successful, <c>GetBestRoute2</c> retrieves and MIB_IPFORWARD_ROW2 structure for the best route from
            the source IP address the destination IP address.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetBestRoute2(System.IntPtr,System.UInt32,Vanara.PInvoke.Ws2_32.SOCKADDR_INET@,Vanara.PInvoke.Ws2_32.SOCKADDR_INET@,System.UInt32,Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2@,Vanara.PInvoke.Ws2_32.SOCKADDR_INET@)">
            <summary>
            <para>
            The <c>GetBestRoute2</c> function retrieves the IP route entry on the local computer for the best route to the specified
            destination IP address.
            </para>
            </summary>
            <param name="InterfaceLuid">
            <para>The locally unique identifier (LUID) to specify the network interface associated with an IP route entry.</para>
            </param>
            <param name="InterfaceIndex">
            <para>
            The local index value to specify the network interface associated with an IP route entry. This index value may change when a
            network adapter is disabled and then enabled, or under other circumstances, and should not be considered persistent.
            </para>
            </param>
            <param name="SourceAddress">
            <para>The source IP address. This parameter may be omitted and passed as a <c>NULL</c> pointer.</para>
            </param>
            <param name="DestinationAddress">
            <para>The destination IP address.</para>
            </param>
            <param name="AddressSortOptions">
            <para>A set of options that affect how IP addresses are sorted. This parameter is not currently used.</para>
            </param>
            <param name="BestRoute">
            <para>A pointer to the MIB_IPFORWARD_ROW2 for the best route from the source IP address to the destination IP address.</para>
            </param>
            <param name="BestSourceAddress">
            <para>A pointer to the best source IP address.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the DestinationAddress,
            BestSourceAddress, or the BestRoute parameter. This error is also returned if the DestinationAddress parameter does not specify
            an IPv4 or IPv6 address and family.
            </term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface specified by the InterfaceLuid or
            InterfaceIndex parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address and family was
            specified in the DestinationAddress parameter. This error is also returned if no IPv6 stack is on the local computer and an IPv6
            address and family was specified in the DestinationAddress parameter.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetBestRoute2</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetBestRoute2</c> function is used to retrieve a MIB_IPFORWARD_ROW2 structure entry for the best route from a source IP
            address to a destination IP address.
            </para>
            <para>
            On input, the DestinationAddress parameter must be initialized to a valid IPv4 or IPv6 address and family. On input, the
            SourceAddress parameter may be initialized to the preferred IPv4 or IPv6 address and family. In addition, at least one of the
            following parameters must be initialized: the InterfaceLuid or InterfaceIndex.
            </para>
            <para>
            On output when the call is successful, <c>GetBestRoute2</c> retrieves and MIB_IPFORWARD_ROW2 structure for the best route from
            the source IP address the destination IP address.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetBestRoute2(System.IntPtr,System.UInt32,System.IntPtr,Vanara.PInvoke.Ws2_32.SOCKADDR_INET@,System.UInt32,Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2@,Vanara.PInvoke.Ws2_32.SOCKADDR_INET@)">
            <summary>
            <para>
            The <c>GetBestRoute2</c> function retrieves the IP route entry on the local computer for the best route to the specified
            destination IP address.
            </para>
            </summary>
            <param name="InterfaceLuid">
            <para>The locally unique identifier (LUID) to specify the network interface associated with an IP route entry.</para>
            </param>
            <param name="InterfaceIndex">
            <para>
            The local index value to specify the network interface associated with an IP route entry. This index value may change when a
            network adapter is disabled and then enabled, or under other circumstances, and should not be considered persistent.
            </para>
            </param>
            <param name="SourceAddress">
            <para>The source IP address. This parameter may be omitted and passed as a <c>NULL</c> pointer.</para>
            </param>
            <param name="DestinationAddress">
            <para>The destination IP address.</para>
            </param>
            <param name="AddressSortOptions">
            <para>A set of options that affect how IP addresses are sorted. This parameter is not currently used.</para>
            </param>
            <param name="BestRoute">
            <para>A pointer to the MIB_IPFORWARD_ROW2 for the best route from the source IP address to the destination IP address.</para>
            </param>
            <param name="BestSourceAddress">
            <para>A pointer to the best source IP address.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the DestinationAddress,
            BestSourceAddress, or the BestRoute parameter. This error is also returned if the DestinationAddress parameter does not specify
            an IPv4 or IPv6 address and family.
            </term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface specified by the InterfaceLuid or
            InterfaceIndex parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address and family was
            specified in the DestinationAddress parameter. This error is also returned if no IPv6 stack is on the local computer and an IPv6
            address and family was specified in the DestinationAddress parameter.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetBestRoute2</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetBestRoute2</c> function is used to retrieve a MIB_IPFORWARD_ROW2 structure entry for the best route from a source IP
            address to a destination IP address.
            </para>
            <para>
            On input, the DestinationAddress parameter must be initialized to a valid IPv4 or IPv6 address and family. On input, the
            SourceAddress parameter may be initialized to the preferred IPv4 or IPv6 address and family. In addition, at least one of the
            following parameters must be initialized: the InterfaceLuid or InterfaceIndex.
            </para>
            <para>
            On output when the call is successful, <c>GetBestRoute2</c> retrieves and MIB_IPFORWARD_ROW2 structure for the best route from
            the source IP address the destination IP address.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIfEntry2(Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2@)">
            <summary>
            <para>The <c>GetIfEntry2</c> function retrieves information for the specified interface on the local computer.</para>
            </summary>
            <param name="Row">
            <para>
            A pointer to a MIB_IF_ROW2 structure that, on successful return, receives information for an interface on the local computer. On
            input, the <c>InterfaceLuid</c> or the <c>InterfaceIndex</c> member of the <c>MIB_IF_ROW2</c> must be set to the interface for
            which to retrieve information.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            The system cannot find the file specified. This error is returned if the network interface LUID or interface index specified by
            the InterfaceLuid or InterfaceIndex member of the MIB_IF_ROW2 pointed to by the Row parameter was not a value on the local machine.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL parameter is passed in the Row parameter. This
            error is also returned if the both the InterfaceLuid and InterfaceIndex member of the MIB_IF_ROW2 pointed to by the Row parameter
            are unspecified.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use the FormatMessage function to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetIfEntry2</c> function is defined on Windows Vista and later.</para>
            <para>
            On input, at least one of the following members in the MIB_IF_ROW2 structure passed in the Row parameter must be initialized:
            <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>On output, the remaining fields of the MIB_IF_ROW2 structure pointed to by the Row parameter are filled in.</para>
            <para>Note that the Netioapi.h header file is automatically included in IpHlpApi.h header file, and should never be used directly.</para>
            <para>Examples</para>
            <para>
            The following example retrieves a interface entry specified on the command line and prints some values from the retrieved
            MIB_IF_ROW2 structure.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIfEntry2Ex(Vanara.PInvoke.IpHlpApi.MIB_IF_ENTRY_LEVEL,Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2@)">
            <summary>
            <para>
            The <c>GetIfEntry2Ex</c> function retrieves the specified level of information for the specified interface on the local computer.
            </para>
            </summary>
            <param name="Level">
            <para>
            The level of interface information to retrieve. This parameter can be one of the values from the <c>MIB_IF_ENTRY_LEVEL</c>
            enumeration type defined in the Netioapi.h header file.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MibIfEntryNormal 0</term>
            <term>
            The values of statistics and state returned in members of the MIB_IF_ROW2 structure pointed to by the Row parameter are returned
            from the top of the filter stack.
            </term>
            </item>
            <item>
            <term>MibIfEntryNormalWithoutStatistics 2</term>
            <term>
            The values of state (without statistics) returned in members of the MIB_IF_ROW2 structure pointed to by the Row parameter are
            returned from the top of the filter stack.
            </term>
            </item>
            </list>
            </param>
            <param name="Row">
            <para>
            A pointer to a MIB_IF_ROW2 structure that, on successful return, receives information for an interface on the local computer. On
            input, the <c>InterfaceLuid</c> or the <c>InterfaceIndex</c> member of the <c>MIB_IF_ROW2</c> must be set to the interface for
            which to retrieve information.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            The system cannot find the file specified. This error is returned if the network interface LUID or interface index specified by
            the InterfaceLuid or InterfaceIndex member of the MIB_IF_ROW2 pointed to by the Row parameter was not a value on the local machine.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL parameter is passed in the Row parameter. This
            error is also returned if the both the InterfaceLuid and InterfaceIndex member of the MIB_IF_ROW2 pointed to by the Row parameter
            are unspecified.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use the FormatMessage function to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>GetIfEntry2Ex</c> function retrieves information for a specified interface on a local system and returns this information
            in a pointer to a MIB_IF_ROW2 structure. <c>GetIfEntry2Ex</c> is an enhanced version of the GetIfEntry2 function that allows
            selecting the level of interface information to retrieve.
            </para>
            <para>
            On input, at least one of the following members in the MIB_IF_ROW2 structure passed in the Row parameter must be initialized:
            <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>On output, the remaining fields of the MIB_IF_ROW2 structure pointed to by the Row parameter are filled in.</para>
            <para>Note that the Netioapi.h header file is automatically included in IpHlpApi.h header file, and should never be used directly.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIfStackTable(Vanara.PInvoke.IpHlpApi.MIB_IFSTACK_TABLE@)">
            <summary>
            <para>
            The <c>GetIfStackTable</c> function retrieves a table of network interface stack row entries that specify the relationship of the
            network interfaces on an interface stack.
            </para>
            </summary>
            <param name="Table">
            <para>A pointer to a buffer that receives the table of interface stack row entries in a MIB_IFSTACK_TABLE structure.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Table parameter.</term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Insufficient memory resources are available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>No interface stack entries were found.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use the FormatMessage function to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetIfStackTable</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetIfStackTable</c> function enumerates the physical and logical network interfaces on an interface stack on a local
            system and returns this information in a MIB_IFSTACK_TABLE structure.
            </para>
            <para>
            Interface stack entries are returned in a MIB_IFSTACK_TABLE structure in the buffer pointed to by the Table parameter. The
            <c>MIB_IFSTACK_TABLE</c> structure contains an interface stack entry count and an array of MIB_IFSTACK_ROW structures for each
            interface stack entry.
            </para>
            <para>
            The relationship between the interfaces in the interface stack is that the interface with index in the
            <c>HigherLayerInterfaceIndex</c> member of the MIB_IFSTACK_ROW structure is immediately above the interface with index in the
            <c>LowerLayerInterfaceIndex</c> member of the <c>MIB_IFSTACK_ROW</c> structure.
            </para>
            <para>
            Memory is allocated by the <c>GetIfStackTable</c> function for the MIB_IFSTACK_TABLE structure and the MIB_IFSTACK_ROW entries in
            this structure. When these returned structures are no longer required, free the memory by calling the FreeMibTable.
            </para>
            <para>
            Note that the returned MIB_IFSTACK_TABLE structure pointed to by the Table parameter may contain padding for alignment between
            the <c>NumEntries</c> member and the first MIB_IFSTACK_ROW array entry in the <c>Table</c> member of the <c>MIB_IFSTACK_TABLE</c>
            structure. Padding for alignment may also be present between the <c>MIB_IFSTACK_ROW</c> array entries. Any access to a
            <c>MIB_IFSTACK_ROW</c> array entry should assume padding may exist.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIfTable2(Vanara.PInvoke.IpHlpApi.MIB_IF_TABLE2@)">
            <summary>
            <para>The <c>GetIfTable2</c> function retrieves the MIB-II interface table.</para>
            </summary>
            <param name="Table">
            <para>A pointer to a buffer that receives the table of interfaces in a MIB_IF_TABLE2 structure.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Insufficient memory resources are available to complete the operation.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>GetIfTable2</c> function enumerates the logical and physical interfaces on a local system and returns this information in
            a MIB_IF_TABLE2 structure. <c>GetIfTable2</c> is an enhanced version of the <c>GetIfTable</c> function.
            </para>
            <para>
            A similar GetIfTable2Ex function can be used to specify the level of interfaces to return. Calling the <c>GetIfTable2Ex</c>
            function with the Level parameter set to <c>MibIfTableNormal</c> retrieves the same results as calling the <c>GetIfTable2</c> function.
            </para>
            <para>
            Interfaces are returned in a MIB_IF_TABLE2 structure in the buffer pointed to by the Table parameter. The <c>MIB_IF_TABLE2</c>
            structure contains an interface count and an array of MIB_IF_ROW2 structures for each interface. Memory is allocated by the
            <c>GetIfTable2</c> function for the <c>MIB_IF_TABLE2</c> structure and the <c>MIB_IF_ROW2</c> entries in this structure. When
            these returned structures are no longer required, free the memory by calling the FreeMibTable.
            </para>
            <para>
            Note that the returned MIB_IF_TABLE2 structure pointed to by the Table parameter may contain padding for alignment between the
            <c>NumEntries</c> member and the first MIB_IF_ROW2 array entry in the <c>Table</c> member of the <c>MIB_IF_TABLE2</c> structure.
            Padding for alignment may also be present between the <c>MIB_IF_ROW2</c> array entries. Any access to a <c>MIB_IF_ROW2</c> array
            entry should assume padding may exist.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIfTable2Ex(Vanara.PInvoke.IpHlpApi.MIB_IF_TABLE_LEVEL,Vanara.PInvoke.IpHlpApi.MIB_IF_TABLE2@)">
            <summary>
            <para>The <c>GetIfTable2Ex</c> function retrieves the MIB-II interface table.</para>
            </summary>
            <param name="Level">
            <para>
            The level of interface information to retrieve. This parameter can be one of the values from the <c>MIB_IF_TABLE_LEVEL</c>
            enumeration type defined in the Netioapi.h header file.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MibIfTableNormal</term>
            <term>
            The values of statistics and state returned in members of the MIB_IF_ROW2 structure in the MIB_IF_TABLE2 structure pointed to by
            the Table parameter are returned from the top of the filter stack when this parameter is specified.
            </term>
            </item>
            <item>
            <term>MibIfTableRaw</term>
            <term>
            The values of statistics and state returned in members of the MIB_IF_ROW2 structure in the MIB_IF_TABLE2 structure pointed to by
            the Table parameter are returned directly for the interface being queried.
            </term>
            </item>
            </list>
            </param>
            <param name="Table">
            <para>A pointer to a buffer that receives the table of interfaces in a MIB_IF_TABLE2 structure.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>An invalid parameter was passed to the function. This error is returned if an illegal value was passed in the Level parameter.</term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Insufficient memory resources are available to complete the operation.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>GetIfTable2Ex</c> function enumerates the logical and physical interfaces on a local system and returns this information
            in a MIB_IF_TABLE2 structure. <c>GetIfTable2Ex</c> is an enhanced version of the <c>GetIfTable</c> function that allows selecting
            the level of interface information to retrieve.
            </para>
            <para>
            A similar GetIfTable2 function can also be used to retrieve interfaces. but does not allow specifying the level of interfaces to
            return. Calling the <c>GetIfTable2Ex</c> function with the Level parameter set to <c>MibIfTableNormal</c> retrieves the same
            results as calling the <c>GetIfTable2</c> function.
            </para>
            <para>
            Interfaces are returned in a MIB_IF_TABLE2 structure in the buffer pointed to by the Table parameter. The <c>MIB_IF_TABLE2</c>
            structure contains an interface count and an array of MIB_IF_ROW2 structures for each interface. Memory is allocated by the
            GetIfTable2 function for the <c>MIB_IF_TABLE2</c> structure and the <c>MIB_IF_ROW2</c> entries in this structure. When these
            returned structures are no longer required, free the memory by calling the FreeMibTable.
            </para>
            <para>
            All interfaces including NDIS intermediate driver interfaces and NDIS filter driver interfaces are returned for either of the
            possible values for the Level parameter. The setting for the Level parameter affects how statistics and state members of the
            MIB_IF_ROW2 structure in the MIB_IF_TABLE2 structure pointed to by the Table parameter for the interface are returned. For
            example, a network interface card (NIC) will have a NDIS miniport driver. An NDIS intermediate driver can be installed to
            interface between upper-level protocol drivers and NDIS miniport drivers. An NDIS filter driver (LWF) can be attached on top of
            the NDIS intermediate driver. Assume that the NIC reports the MediaConnectState member of the <c>MIB_IF_ROW2</c> structure as
            <c>MediaConnectStateConnected</c> but NDIS filter driver modifies the state and reports the state as
            <c>MediaConnectStateDisconnected</c>. When the interface information is queried with Level parameter set to
            <c>MibIfTableNormal</c>, the state at the top of the filter stack, that is <c>MediaConnectStateDisconnected</c> is reported. When
            the interface is queried with the Level parameter set to <c>MibIfTableRaw</c>, the state at the interface level directly, that is
            <c>MediaConnectStateConnected</c> is returned.
            </para>
            <para>
            Note that the returned MIB_IF_TABLE2 structure pointed to by the Table parameter may contain padding for alignment between the
            <c>NumEntries</c> member and the first MIB_IF_ROW2 array entry in the <c>Table</c> member of the <c>MIB_IF_TABLE2</c> structure.
            Padding for alignment may also be present between the <c>MIB_IF_ROW2</c> array entries. Any access to a <c>MIB_IF_ROW2</c> array
            entry should assume padding may exist.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetInvertedIfStackTable(Vanara.PInvoke.IpHlpApi.MIB_INVERTEDIFSTACK_TABLE@)">
            <summary>
            <para>
            The <c>GetInvertedIfStackTable</c> function retrieves a table of inverted network interface stack row entries that specify the
            relationship of the network interfaces on an interface stack.
            </para>
            </summary>
            <param name="Table">
            <para>A pointer to a buffer that receives the table of inverted interface stack row entries in a MIB_INVERTEDIFSTACK_TABLE structure.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Table parameter.</term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Insufficient memory resources are available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>No interface stack entries were found.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use the FormatMessage function to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetInvertedIfStackTable</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetInvertedIfStackTable</c> function enumerates the physical and logical network interfaces on an interface stack on a
            local system and returns this information in an inverted form in the MIB_INVERTEDIFSTACK_TABLE structure.
            </para>
            <para>
            Interface stack entries are returned in a MIB_INVERTEDIFSTACK_TABLE structure in the buffer pointed to by the Table parameter.
            The <c>MIB_INVERTEDIFSTACK_TABLE</c> structure contains an interface stack entry count and an array of MIB_INVERTEDIFSTACK_ROW
            structures for each interface stack entry.
            </para>
            <para>
            The relationship between the interfaces in the interface stack is that the interface with index in the
            <c>HigherLayerInterfaceIndex</c> member of the MIB_INVERTEDIFSTACK_ROW structure is immediately above the interface with index in
            the <c>LowerLayerInterfaceIndex</c> member of the <c>MIB_INVERTEDIFSTACK_ROW</c> structure.
            </para>
            <para>
            Memory is allocated by the <c>GetInvertedIfStackTable</c> function for the MIB_INVERTEDIFSTACK_TABLE structure and the
            MIB_INVERTEDIFSTACK_ROW entries in this structure. When these returned structures are no longer required, free the memory by
            calling the FreeMibTable.
            </para>
            <para>
            Note that the returned MIB_INVERTEDIFSTACK_TABLE structure pointed to by the Table parameter may contain padding for alignment
            between the <c>NumEntries</c> member and the first MIB_INVERTEDIFSTACK_ROW array entry in the <c>Table</c> member of the
            <c>MIB_INVERTEDIFSTACK_TABLE</c> structure. Padding for alignment may also be present between the <c>MIB_INVERTEDIFSTACK_ROW</c>
            array entries. Any access to a <c>MIB_INVERTEDIFSTACK_ROW</c> array entry should assume padding may exist.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpForwardEntry2(Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2@)">
            <summary>
            <para>The <c>GetIpForwardEntry2</c> function retrieves information for an IP route entry on the local computer.</para>
            </summary>
            <param name="Row">
            <para>
            A pointer to a MIB_IPFORWARD_ROW2 structure entry for an IP route entry. On successful return, this structure will be updated
            with the properties for the IP route entry.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Row parameter, the
            DestinationPrefix member of the MIB_IPFORWARD_ROW2 pointed to by the Row parameter was not specified, the NextHop member of the
            MIB_IPFORWARD_ROW2 pointed to by the Row parameter was not specified, or both the InterfaceLuid or InterfaceIndex members of the
            MIB_IPFORWARD_ROW2 pointed to by the Row parameter were unspecified.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            Element not found. This error is returned if the network interface specified by the InterfaceLuid or InterfaceIndex member of the
            MIB_IPFORWARD_ROW2 structure pointed to by the Row parameter does not match the IP address prefix and address family specified in
            the DestinationPrefix member in the MIB_IPFORWARD_ROW2 structure.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and AF_INET was specified in the
            address family in the DestinationPrefix member of the MIB_IPFORWARD_ROW2 pointed to by the Row parameter. This error is also
            returned if no IPv6 stack is on the local computer and AF_INET6 was specified for the address family in the DestinationPrefix member.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetIpForwardEntry2</c> function is defined on Windows Vista and later.</para>
            <para>The <c>GetIpForwardEntry2</c> function is used to retrieve a MIB_IPFORWARD_ROW2 structure entry.</para>
            <para>
            On input, the <c>DestinationPrefix</c> member in the MIB_IPFORWARD_ROW2 structure pointed to by the Row parameter must be
            initialized to a valid IPv4 or IPv6 address prefix and family. On input, the <c>NextHop</c> member in the
            <c>MIB_IPFORWARD_ROW2</c> structure pointed to by the Row parameter must be initialized to a valid IPv4 or IPv6 address and
            family. In addition, at least one of the following members in the <c>MIB_IPFORWARD_ROW2</c> structure pointed to the Row
            parameter must be initialized: the <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>
            On output when the call is successful, <c>GetIpForwardEntry2</c> retrieves the other properties for the IP route entry and fills
            out the MIB_IPFORWARD_ROW2 structure pointed to by the Row parameter.
            </para>
            <para>
            The route metric offset specified in the <c>Metric</c> member of the MIB_IPFORWARD_ROW2 structure pointed to by Row parameter
            represents only part of the complete route metric. The complete metric is a combination of this route metric added to the
            interface metric specified in the <c>Metric</c> member of the MIB_IPINTERFACE_ROW structure of the associated interface. An
            application can retrieve the interface metric by calling the GetIpInterfaceEntry function.
            </para>
            <para>The GetIpForwardTable2 function can be called to enumerate the IP route entries on a local computer.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpForwardTable2(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_TABLE2@)">
            <summary>
            <para>The <c>GetIpForwardTable2</c> function retrieves the IP route entries on the local computer.</para>
            </summary>
            <param name="Family">
            <para>The address family to retrieve.</para>
            <para>
            Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family
            and PF_ protocol family constants are identical (for example, <c>AF_INET</c> and <c>PF_INET</c>), so either constant can be used.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for
            this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h,
            and should never be used directly.
            </para>
            <para>The values currently supported are <c>AF_INET</c>, <c>AF_INET6</c>, and <c>AF_UNSPEC</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_UNSPEC 0</term>
            <term>
            The address family is unspecified. When this parameter is specified, this function returns the IP routing table containing both
            IPv4 and IPv6 entries.
            </term>
            </item>
            <item>
            <term>AF_INET 2</term>
            <term>
            The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function returns the IP routing
            table containing only IPv4 entries.
            </term>
            </item>
            <item>
            <term>AF_INET6 23</term>
            <term>
            The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function returns the IP routing
            table containing only IPv6 entries.
            </term>
            </item>
            </list>
            </param>
            <param name="Table">
            <para>A pointer to a MIB_IPFORWARD_TABLE2 structure that contains a table of IP route entries on the local computer.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Table parameter or the
            Family parameter was not specified as AF_INET, AF_INET6, or AF_UNSPEC.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Insufficient memory resources are available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>No IP route entries as specified in the Family parameter were found.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and AF_INET was specified in the
            Family parameter. This error is also returned if no IPv6 stack is on the local computer and AF_INET6 was specified in the Family
            parameter. This error is also returned on versions of Windows where this function is not supported.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetIpForwardTable2</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetIpForwardTable2</c> function enumerates the IP route entries on a local system and returns this information in a
            MIB_IPFORWARD_TABLE2 structure.
            </para>
            <para>
            The IP route entries are returned in a MIB_IPFORWARD_TABLE2 structure in the buffer pointed to by the Table parameter. The
            <c>MIB_IPFORWARD_TABLE2</c> structure contains an IP route entry count and an array of MIB_IPFORWARD_ROW2 structures for each IP
            route entry. When these returned structures are no longer required, free the memory by calling the FreeMibTable.
            </para>
            <para>The Family parameter must be initialized to either <c>AF_INET</c>, <c>AF_INET6</c>, or <c>AF_UNSPEC</c>.</para>
            <para>
            Note that the returned MIB_IPFORWARD_TABLE2 structure pointed to by the Table parameter may contain padding for alignment between
            the <c>NumEntries</c> member and the first MIB_IPFORWARD_ROW2 array entry in the <c>Table</c> member of the
            <c>MIB_IPFORWARD_TABLE2</c> structure. Padding for alignment may also be present between the <c>MIB_IPFORWARD_ROW2</c> array
            entries. Any access to a <c>MIB_IPFORWARD_ROW2</c> array entry should assume padding may exist.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpInterfaceEntry(Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW@)">
            <summary>
            <para>The <c>GetIpInterfaceEntry</c> function retrieves IP information for the specified interface on the local computer.</para>
            </summary>
            <param name="Row">
            <para>
            A pointer to a MIB_IPINTERFACE_ROW structure that, on successful return, receives information for an interface on the local
            computer. On input, the <c>InterfaceLuid</c> or <c>InterfaceIndex</c> member of the <c>MIB_IPINTERFACE_ROW</c> must be set to the
            interface for which to retrieve information.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            The system cannot find the file specified. This error is returned if the network interface LUID or interface index specified by
            the InterfaceLuid or InterfaceIndex member of the MIB_IPINTERFACE_ROW pointed to by the Row parameter was not a value on the
            local machine.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Row parameter, the
            Family member of the MIB_IPINTERFACE_ROW pointed to by the Row parameter was not specified as AF_INET or AF_INET6, or both the
            InterfaceLuid or InterfaceIndex members of the MIB_IPINTERFACE_ROW pointed to by the Row parameter were unspecified.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            Element not found. This error is returned if the network interface specified by the InterfaceLuid or InterfaceIndex member of the
            MIB_IPINTERFACE_ROW structure pointed to by the Row parameter does not match the IP address family specified in the Family member
            in the MIB_IPINTERFACE_ROW structure.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use the FormatMessage function to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetIpInterfaceEntry</c> function is defined on Windows Vista and later.</para>
            <para>
            On input, the <c>Family</c> member in the MIB_IPINTERFACE_ROW structure pointed to by the Row parameter must be initialized to
            either <c>AF_INET</c> or <c>AF_INET6</c>. In addition on input, at least one of the following members in the
            <c>MIB_IPINTERFACE_ROW</c> structure pointed to the Row parameter must be initialized: the <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>
            On output, the <c>InterfaceLuid</c> member of the MIB_IPINTERFACE_ROW structure pointed to by the Row parameter is filled in if
            the <c>InterfaceIndex</c> was specified. The other members of <c>MIB_IPINTERFACE_ROW</c> structure pointed to by the Row
            parameter are also filled in.
            </para>
            <para>
            The InitializeIpInterfaceEntry function must be used to initialize the fields of a MIB_IPINTERFACE_ROW structure entry with
            default values. An application can then change the fields in the <c>MIB_IPINTERFACE_ROW</c> entry it wishes to modify, and then
            call the SetIpInterfaceEntry function.
            </para>
            <para>
            Unprivileged simultaneous access to multiple networks of different security requirements creates a security hole and allows an
            unprivileged application to accidentally relay data between the two networks. A typical example is simultaneous access to a
            virtual private network (VPN) and the Internet. Windows Server 2003 and Windows XP use a weak host model, where RAS prevents such
            simultaneous access by increasing the route metric of all default routes over other interfaces. Thus all traffic is routed
            through the VPN interface, disrupting other network connectivity.
            </para>
            <para>
            On Windows Vista and later, a strong host model is used by default. If a source IP address is specified in the route lookup using
            GetBestRoute2 or GetBestRoute, the route lookup is restricted to the interface of the source IP address. The route metric
            modification by RAS has no effect as the list of potential routes does not even have the route for the VPN interface thereby
            allowing traffic to the Internet. The <c>DisableDefaultRoutes</c> member of the MIB_IPINTERFACE_ROW can be used to disable using
            the default route on an interface. This member can be used as a security measure by VPN clients to restrict split tunneling when
            split tunneling is not required by the VPN client. A VPN client can call the SetIpInterfaceEntry function to set the
            <c>DisableDefaultRoutes</c> member to <c>TRUE</c> when required. A VPN client can query the current state of the
            <c>DisableDefaultRoutes</c> member by calling the <c>GetIpInterfaceEntry</c> function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpInterfaceTable(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_TABLE@)">
            <summary>
            <para>The <c>GetIpInterfaceTable</c> function retrieves the IP interface entries on the local computer.</para>
            </summary>
            <param name="Family">
            <para>The address family of IP interfaces to retrieve.</para>
            <para>
            Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family
            and PF_ protocol family constants are identical (for example, <c>AF_INET</c> and <c>PF_INET</c>), so either constant can be used.
            </para>
            <para>
            On Windows Vista and later as well as on the Windows SDK, the organization of header files has changed and possible values for
            this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h,
            and should never be used directly.
            </para>
            <para>The values currently supported are <c>AF_INET</c>, <c>AF_INET6</c>, and <c>AF_UNSPEC</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_UNSPEC 0</term>
            <term>
            The address family is unspecified. When this parameter is specified, the GetIpInterfaceTable function returns the IP interface
            table containing both IPv4 and IPv6 entries.
            </term>
            </item>
            <item>
            <term>AF_INET 2</term>
            <term>The Internet Protocol version 4 (IPv4) address family.</term>
            </item>
            <item>
            <term>AF_INET6 23</term>
            <term>The Internet Protocol version 6 (IPv6) address family.</term>
            </item>
            </list>
            </param>
            <param name="Table">
            <para>A pointer to a buffer that receives the table of IP interface entries in a MIB_IPINTERFACE_TABLE structure.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Table parameter or the
            Family parameter was not specified as AF_INET, AF_INET6, or AF_UNSPEC.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Insufficient memory resources are available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>No IP interface entries as specified in the Family parameter were found.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The function is not supported. This error is returned when the IP transport specified in the Address parameter is not configured
            on the local computer. This error is also returned on versions of Windows where this function is not supported.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use the FormatMessage function to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetIpInterfaceTable</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetIpInterfaceTable</c> function enumerates the IP interfaces on a local system and returns this information in an
            MIB_IPINTERFACE_TABLE structure.
            </para>
            <para>
            IP interface entries are returned in a MIB_IPINTERFACE_TABLE structure in the buffer pointed to by the Table parameter. The
            <c>MIB_IPINTERFACE_TABLE</c> structure contains an IP interface entry count and an array of MIB_IPINTERFACE_ROW structures for
            each IP interface entry. When these returned structures are no longer required, free the memory by calling the FreeMibTable.
            </para>
            <para>The Family parameter must be initialized to either <c>AF_INET</c> or <c>AF_INET6</c>.</para>
            <para>
            Note that the returned MIB_IPINTERFACE_TABLE structure pointed to by the Table parameter may contain padding for alignment
            between the <c>NumEntries</c> member and the first MIB_IPINTERFACE_ROW array entry in the <c>Table</c> member of the
            <c>MIB_IPINTERFACE_TABLE</c> structure. Padding for alignment may also be present between the <c>MIB_IPINTERFACE_ROW</c> array
            entries. Any access to a <c>MIB_IPINTERFACE_ROW</c> array entry should assume padding may exist.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves the IP interface table, then prints the values of a few members of the IP interface entries in
            the table.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpNetEntry2(Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2@)">
            <summary>
            <para>The <c>GetIpNetEntry2</c> function retrieves information for a neighbor IP address entry on the local computer.</para>
            </summary>
            <param name="Row">
            <para>
            A pointer to a MIB_IPNET_ROW2 structure entry for a neighbor IP address entry. On successful return, this structure will be
            updated with the properties for neighbor IP address.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            The system cannot find the file specified. This error is returned if the network interface LUID or interface index specified by
            the InterfaceLuid or InterfaceIndex member of the MIB_IPNET_ROW2 pointed to by the Row parameter was not a value on the local machine.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Row parameter, the
            Address member of the MIB_IPNET_ROW2 pointed to by the Row parameter was not set to a valid neighbor IPv4 or IPv6 address, or
            both the InterfaceLuid or InterfaceIndex members of the MIB_IPNET_ROW2 pointed to by the Row parameter were unspecified.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            Element not found. This error is returned if the network interface specified by the InterfaceLuid or InterfaceIndex member of the
            MIB_IPNET_ROW2 structure pointed to by the Row parameter does not match the neighbor IP address and address family specified in
            the Address member in the MIB_IPNET_ROW2 structure.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address was specified
            in the Address member of the MIB_IPNET_ROW2 structure pointed to by the Row parameter. This error is also returned if no IPv6
            stack is on the local computer and an IPv6 address was specified in the Address member of the MIB_IPNET_ROW2 structure.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetIpNetEntry2</c> function is defined on Windows Vista and later.</para>
            <para>The <c>GetIpNetEntry2</c> function is used to retrieve a MIB_IPNET_ROW2 structure entry.</para>
            <para>
            On input, the <c>Address</c> member in the MIB_IPNET_ROW2 structure pointed to by the Row parameter must be initialized to a
            valid neighbor IPv4 or IPv6 address and family. In addition, at least one of the following members in the <c>MIB_IPNET_ROW2</c>
            structure pointed to the Row parameter must be initialized: the <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>
            On output when the call is successful, <c>GetIpNetEntry2</c> retrieves the other properties for the neighbor IP address and fills
            out the MIB_IPNET_ROW2 structure pointed to by the Row parameter.
            </para>
            <para>The GetIpNetTable2 function can be called to enumerate the neighbor IP address entries on a local computer.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpNetTable2(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,Vanara.PInvoke.IpHlpApi.MIB_IPNET_TABLE2@)">
            <summary>
            <para>The <c>GetIpNetTable2</c> function retrieves the IP neighbor table on the local computer.</para>
            </summary>
            <param name="Family">
            <para>The address family to retrieve.</para>
            <para>
            Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family
            and PF_ protocol family constants are identical (for example, <c>AF_INET</c> and <c>PF_INET</c>), so either constant can be used.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for
            this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h,
            and should never be used directly.
            </para>
            <para>The values currently supported are <c>AF_INET</c>, <c>AF_INET6</c>, and <c>AF_UNSPEC</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_UNSPEC 0</term>
            <term>
            The address family is unspecified. When this parameter is specified, this function returns the neighbor IP address table
            containing both IPv4 and IPv6 entries.
            </term>
            </item>
            <item>
            <term>AF_INET 2</term>
            <term>
            The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function returns the neighbor IP
            address table containing only IPv4 entries.
            </term>
            </item>
            <item>
            <term>AF_INET6 23</term>
            <term>
            The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function returns the neighbor IP
            address table containing only IPv6 entries.
            </term>
            </item>
            </list>
            </param>
            <param name="Table">
            <para>A pointer to a MIB_IPNET_TABLE2 structure that contains a table of neighbor IP address entries on the local computer.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR or ERROR_NOT_FOUND.</para>
            <para>If the function fails or returns no data, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Table parameter or the
            Family parameter was not specified as AF_INET, AF_INET6, or AF_UNSPEC.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Insufficient memory resources are available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            No neighbor IP address entries as specified in the Family parameter were found. This return value indicates that the call to the
            GetIpNetTable2 function succeeded, but there was no data to return. This can occur when AF_INET is specified in the Family
            parameter and there are no ARP entries to return.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and AF_INET was specified in the
            Family parameter. This error is also returned if no IPv6 stack is on the local computer and AF_INET6 was specified in the Family
            parameter. This error is also returned on versions of Windows where this function is not supported.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetIpNetTable2</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetIpNetTable2</c> function enumerates the neighbor IP addresses on a local system and returns this information in a
            MIB_IPNET_TABLE2 structure.
            </para>
            <para>
            The neighbor IP address entries are returned in a MIB_IPNET_TABLE2 structure in the buffer pointed to by the Table parameter. The
            <c>MIB_IPNET_TABLE2</c> structure contains a neighbor IP address entry count and an array of MIB_IPNET_ROW2 structures for each
            neighbor IP address entry. When these returned structures are no longer required, free the memory by calling the FreeMibTable.
            </para>
            <para>The Family parameter must be initialized to either <c>AF_INET</c>, <c>AF_INET6</c>, or <c>AF_UNSPEC</c>.</para>
            <para>
            Note that the returned MIB_IPNET_TABLE2 structure pointed to by the Table parameter may contain padding for alignment between the
            <c>NumEntries</c> member and the first MIB_IPNET_ROW2 array entry in the <c>Table</c> member of the <c>MIB_IPNET_TABLE2</c>
            structure. Padding for alignment may also be present between the <c>MIB_IPNET_ROW2</c> array entries. Any access to a
            <c>MIB_IPNET_ROW2</c> array entry should assume padding may exist.
            </para>
            <para>Examples</para>
            <para>The following example retrieves the IP neighbor table, then prints the values for IP neighbor row entries in the table.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpNetTable2_Unmanaged(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,Vanara.PInvoke.IpHlpApi.MIB_IPNET_TABLE2_Unmanaged@)">
            <inheritdoc cref="M:Vanara.PInvoke.IpHlpApi.GetIpNetTable2(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,Vanara.PInvoke.IpHlpApi.MIB_IPNET_TABLE2@)"/>
            <remarks>Unlike <see cref="M:Vanara.PInvoke.IpHlpApi.GetIpNetTable2(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,Vanara.PInvoke.IpHlpApi.MIB_IPNET_TABLE2@)"/> this returns structure with zero copy.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpNetworkConnectionBandwidthEstimates(System.UInt32,Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,Vanara.PInvoke.IpHlpApi.MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES@)">
            <summary>
            <para>
            The <c>GetIpNetworkConnectionBandwidthEstimates</c> function retrieves historical bandwidth estimates for a network connection on
            the specified interface.
            </para>
            </summary>
            <param name="InterfaceIndex">
            <para>The local index value for the network interface.</para>
            <para>
            This index value may change when a network adapter is disabled and then enabled, or under other circumstances, and should not be
            considered persistent.
            </para>
            </param>
            <param name="AddressFamily">
            <para>
            The address family. Possible values for the address family are listed in the Ws2def.h header file. Note that the values for the
            AF_ address family and PF_ protocol family constants are identical (for example, <c>AF_INET</c> and <c>PF_INET</c>), so either
            constant can be used.
            </para>
            <para>Note that the Ws2def.h header file is automatically included in Winsock2.h, and should never be used directly.</para>
            <para>
            The values currently supported are <c>AF_INET</c> or <c>AF_INET6</c>, which are the Internet address family formats for IPv4 and IPv6.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_INET 2</term>
            <term>The Internet Protocol version 4 (IPv4) address family.</term>
            </item>
            <item>
            <term>AF_INET6 23</term>
            <term>The Internet Protocol version 6 (IPv6) address family.</term>
            </item>
            </list>
            </param>
            <param name="BandwidthEstimates">
            <para>
            A pointer to a buffer that returns the historical bandwidth estimates maintained for the point of attachment to which the
            interface is currently connected.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            The system cannot find the file specified. This error is returned if the interface index specified by the InterfaceIndex
            parameter was not a value on the local machine.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the BandwidthEstimates
            parameter or the AddressFamily parameter was not specified as AF_INET or AF_INET6.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            Element not found. This error is returned if the network interface specified by the InterfaceIndex parameter does not match the
            IP address family specified in the AddressFamily parameter.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use the FormatMessage function to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetIpNetworkConnectionBandwidthEstimates</c> function is defined on Windows 8 and later.</para>
            <para>
            On input, the AddressFamily parameter must be initialized to either <c>AF_INET</c> or <c>AF_INET6</c>. In addition on input, the
            InterfaceIndex parameter must be initialized with the specified interface index.
            </para>
            <para>
            On output, the MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES structure pointed to by the BandwidthEstimates parameter is filled
            in if the AddressFamily and InterfaceIndex parameters were specified.
            </para>
            <para>
            The <c>GetIpNetworkConnectionBandwidthEstimates</c> function returns historical estimates of available bandwidth at the point of
            attachment (the first hop) for use by an application. The estimates are intended as a guide to tune performance parameters and
            the application should maintain thresholds and differentiate behavior for low and high bandwidth situations.
            </para>
            <para>
            It is possible that the true available bandwidth changes over time as more bandwidth is consumed by devices competing on the same
            network. So applications should be prepared to handle cases where the available bandwidth drops below historical limits reported
            by the <c>GetIpNetworkConnectionBandwidthEstimates</c> function.
            </para>
            <para>
            It is possible that the TCP/IP stack has not built up any estimates for the given interface, in a particular or both directions.
            In this case the estimate returned will be zero. The application should be prepared to handle such cases by picking reasonable
            defaults and fine tuning if required.
            </para>
            <para>
            The Netioapi.h header file is automatically included by the Iphlpapi.h header file. The Netioapi.h header file should never be
            used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpPathEntry(Vanara.PInvoke.IpHlpApi.MIB_IPPATH_ROW@)">
            <summary>
            <para>The <c>GetIpPathEntry</c> function retrieves information for a IP path entry on the local computer.</para>
            </summary>
            <param name="Row">
            <para>
            A pointer to a MIB_IPPATH_ROW structure entry for a IP path entry. On successful return, this structure will be updated with the
            properties for IP path entry.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            The system cannot find the file specified. This error is returned if the network interface LUID or interface index specified by
            the InterfaceLuid or InterfaceIndex member of the MIB_IPPATH_ROW pointed to by the Row parameter is not a value on the local machine.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            A parameter is incorrect. This error is returned if a NULL pointer is passed in the Row parameter, the si_family member in the
            Destination member of the MIB_IPPATH_ROW pointed to by the Row parameter is not set to AF_INET or AF_INET6, or both the
            InterfaceLuid or InterfaceIndex members of the MIB_IPPATH_ROW pointed to by the Row parameter are unspecified. This error is also
            returned if the si_family member in the Source member of the MIB_IPPATH_ROW pointed to by the Row parameter did not match the
            destination IP address family and the si_family for the source IP address is not specified as AF_UNSPEC.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            Element not found. This error is returned if the network interface specified by the InterfaceLuid or InterfaceIndex member of the
            MIB_IPPATH_ROW structure pointed to by the Row parameter does not match the IP address and address family specified in the
            Destination member in the MIB_IPPATH_ROW structure.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address is specified
            in the Source and Destination members of the MIB_IPPATH_ROW pointed to by the Row parameter. This error is also returned if no
            IPv6 stack is on the local computer and an IPv6 address is specified in the Source and Destination members.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetIpPathEntry</c> function is defined on Windows Vista and later.</para>
            <para>The <c>GetIpPathEntry</c> function is used to retrieve a MIB_IPPATH_ROW structure entry.</para>
            <para>
            On input, the <c>Destination</c> member in the MIB_IPPATH_ROW structure pointed to by the Row parameter must be initialized to a
            valid IPv4 or IPv6 address and family. The address family specified in <c>Source</c> member in the <c>MIB_IPPATH_ROW</c>
            structure must also either match the destination IP address family specified in the <c>Destination</c> member or the address
            family in the <c>Source</c> member must be specified as <c>AF_UNSPEC</c>. In addition , at least one of the following members in
            the <c>MIB_IPPATH_ROW</c> structure pointed to the Row parameter must be initialized: the <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>
            On output when the call is successful, <c>GetIpPathEntry</c> retrieves the other properties for the IP path entry and fills out
            the MIB_IPPATH_ROW structure pointed to by the Row parameter.
            </para>
            <para>The GetIpPathTable function can be called to enumerate the IP path entries on a local computer.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetIpPathTable(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,Vanara.PInvoke.IpHlpApi.MIB_IPPATH_TABLE@)">
            <summary>
            <para>The <c>GetIpPathTable</c> function retrieves the IP path table on the local computer.</para>
            </summary>
            <param name="Family">
            <para>The address family to retrieve.</para>
            <para>
            Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family
            and PF_ protocol family constants are identical (for example, <c>AF_INET</c> and <c>PF_INET</c>), so either constant can be used.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for
            this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h,
            and should never be used directly.
            </para>
            <para>The values currently supported are <c>AF_INET</c>, <c>AF_INET6</c>, and <c>AF_UNSPEC</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_UNSPEC 0</term>
            <term>
            The address family is unspecified. When this parameter is specified, this function returns the IP path table containing both IPv4
            and IPv6 entries.
            </term>
            </item>
            <item>
            <term>AF_INET 2</term>
            <term>
            The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function returns the IP path table
            containing only IPv4 entries.
            </term>
            </item>
            <item>
            <term>AF_INET6 23</term>
            <term>
            The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function returns the IP path table
            containing only IPv6 entries.
            </term>
            </item>
            </list>
            </param>
            <param name="Table">
            <para>A pointer to a MIB_IPPATH_TABLE structure that contains a table of IP path entries on the local computer.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Table parameter or the
            Family parameter was not specified as AF_INET, AF_INET6, or AF_UNSPEC.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Insufficient memory resources are available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>No IP path entries as specified in the Family parameter were found.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and AF_INET was specified in the
            Family parameter. This error is also returned if no IPv6 stack is on the local computer and AF_INET6 was specified in the Family
            parameter. This error is also returned on versions of Windows where this function is not supported.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetIpPathTable</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetIpPathTable</c> function enumerates the IP path entries on a local system and returns this information in a
            MIB_IPPATH_TABLE structure.
            </para>
            <para>
            The IP path entries are returned in a MIB_IPPATH_TABLE structure in the buffer pointed to by the Table parameter. The
            <c>MIB_IPPATH_TABLE</c> structure contains an IP path entry count and an array of MIB_IPPATH_ROW structures for each IP path
            entry. When these returned structures are no longer required, free the memory by calling the FreeMibTable.
            </para>
            <para>The Family parameter must be initialized to either <c>AF_INET</c>, <c>AF_INET6</c>, or <c>AF_UNSPEC</c>.</para>
            <para>
            Note that the returned MIB_IPPATH_TABLE structure pointed to by the Table parameter may contain padding for alignment between the
            <c>NumEntries</c> member and the first MIB_IPPATH_ROW array entry in the <c>Table</c> member of the <c>MIB_IPPATH_TABLE</c>
            structure. Padding for alignment may also be present between the <c>MIB_IPPATH_ROW</c> array entries. Any access to a
            <c>MIB_IPPATH_ROW</c> array entry should assume padding may exist.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetMulticastIpAddressEntry(Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_ROW@)">
            <summary>
            <para>
            The <c>GetMulticastIpAddressEntry</c> function retrieves information for an existing multicast IP address entry on the local computer.
            </para>
            </summary>
            <param name="Row">
            <para>
            A pointer to a MIB_MULTICASTIPADDRESS_ROW structure entry for a multicast IP address entry. On successful return, this structure
            will be updated with the properties for an existing multicast IP address.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            The system cannot find the file specified. This error is returned if the network interface LUID or interface index specified by
            the InterfaceLuid or InterfaceIndex member of the MIB_MULTICASTIPADDRESS_ROW pointed to by the Row parameter is not a value on
            the local machine.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            A parameter is incorrect. This error is returned if a NULL pointer is passed in the Row parameter, the Address member of the
            MIB_MULTICASTIPADDRESS_ROW pointed to by the Row parameter is not set to a valid multicast IPv4 or IPv6 address, or both the
            InterfaceLuid or InterfaceIndex members of the MIB_MULTICASTIPADDRESS_ROW pointed to by the Row parameter are unspecified.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            Element not found. This error is returned if the network interface specified by the InterfaceLuid or InterfaceIndex member of the
            MIB_MULTICASTIPADDRESS_ROW structure pointed to by the Row parameter does not match the IP address and address family specified
            in the Address member in the MIB_MULTICASTIPADDRESS_ROW structure.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address is specified
            in the Address member MIB_MULTICASTIPADDRESS_ROW pointed to by the Row parameter. This error is also returned if no IPv6 stack is
            on the local computer and an IPv6 address is specified in the Address member.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetMulticastIpAddressEntry</c> function is defined on Windows Vista and later.</para>
            <para>The <c>GetMulticastIpAddressEntry</c> function is used to retrieve an existing MIB_MULTICASTIPADDRESS_ROW structure entry.</para>
            <para>
            On input, the <c>Address</c> member in the MIB_MULTICASTIPADDRESS_ROW structure pointed to by the Row parameter must be
            initialized to a valid multicast IPv4 or IPv6 address and family. In addition, at least one of the following members in the
            <c>MIB_MULTICASTIPADDRESS_ROW</c> structure pointed to the Row parameter must be initialized: the <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>
            On output when the call is successful, <c>GetMulticastIpAddressEntry</c> retrieves the other properties for the multicast IP
            address and fills out the MIB_MULTICASTIPADDRESS_ROW structure pointed to by the Row parameter.
            </para>
            <para>The GetMulticastIpAddressTable function can be called to enumerate the multicast IP address entries on a local computer.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetMulticastIpAddressTable(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_TABLE@)">
            <summary>
            <para>The <c>GetMulticastIpAddressTable</c> function retrieves the multicast IP address table on the local computer.</para>
            </summary>
            <param name="Family">
            <para>The address family to retrieve.</para>
            <para>
            Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family
            and PF_ protocol family constants are identical (for example, <c>AF_INET</c> and <c>PF_INET</c>), so either constant can be used.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for
            this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h,
            and should never be used directly.
            </para>
            <para>The values currently supported are <c>AF_INET</c>, <c>AF_INET6</c>, and <c>AF_UNSPEC</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_UNSPEC 0</term>
            <term>
            The address family is unspecified. When this parameter is specified, this function returns the multicast IP address table
            containing both IPv4 and IPv6 entries.
            </term>
            </item>
            <item>
            <term>AF_INET 2</term>
            <term>
            The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function returns the multicast IP
            address table containing only IPv4 entries.
            </term>
            </item>
            <item>
            <term>AF_INET6 23</term>
            <term>
            The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function returns the multicast IP
            address table containing only IPv6 entries.
            </term>
            </item>
            </list>
            </param>
            <param name="Table">
            <para>
            A pointer to a MIB_MULTICASTIPADDRESS_TABLE structure that contains a table of anycast IP address entries on the local computer.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Table parameter or the
            Family parameter was not specified as AF_INET, AF_INET6, or AF_UNSPEC.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Insufficient memory resources are available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>No anycast IP address entries as specified in the Family parameter were found.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and AF_INET was specified in the
            Family parameter. This error is also returned if no IPv6 stack is on the local computer and AF_INET6 was specified in the Family
            parameter. This error is also returned on versions of Windows where this function is not supported.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetMulticastIpAddressTable</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetMulticastIpAddressTable</c> function enumerates the multicast IP addresses on a local system and returns this
            information in a MIB_MULTICASTIPADDRESS_TABLE structure.
            </para>
            <para>
            The multicast IP address entries are returned in a MIB_MULTICASTIPADDRESS_TABLE structure in the buffer pointed to by the Table
            parameter. The <c>MIB_MULTICASTIPADDRESS_TABLE</c> structure contains a multicast IP address entry count and an array of
            MIB_MULTICASTIPADDRESS_ROW structures for each multicast IP address entry. When these returned structures are no longer required,
            free the memory by calling the FreeMibTable.
            </para>
            <para>The Family parameter must be initialized to either <c>AF_INET</c>, <c>AF_INET6</c>, or <c>AF_UNSPEC</c>.</para>
            <para>
            Note that the returned MIB_MULTICASTIPADDRESS_TABLE structure pointed to by the Table parameter may contain padding for alignment
            between the <c>NumEntries</c> member and the first MIB_MULTICASTIPADDRESS_ROW array entry in the <c>Table</c> member of the
            <c>MIB_MULTICASTIPADDRESS_TABLE</c> structure. Padding for alignment may also be present between the
            <c>MIB_MULTICASTIPADDRESS_ROW</c> array entries. Any access to a <c>MIB_MULTICASTIPADDRESS_ROW</c> array entry should assume
            padding may exist.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetNetworkConnectivityHint(Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_HINT@)">
            <summary>Retrieves the aggregate level and cost of network connectivity that an application or service is likely to experience.</summary>
            <param name="ConnectivityHint">
            A pointer to a value of type NL_NETWORK_CONNECTIVITY_HINT. The function sets this value to the aggregate connectivity level and
            cost hints.
            </param>
            <returns>
            In user mode, returns <c>NO_ERROR</c> on success, and an error code on failure. In kernel mode, returns <c>STATUS_SUCCESS</c> on
            success, and an error code on failure.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetNetworkConnectivityHintForInterface(System.UInt32,Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_HINT@)">
            <summary>Retrieves the level and cost of network connectivity for the specified interface.</summary>
            <param name="InterfaceIndex">
            A value of type <c>NET_IFINDEX</c> representing the index of the interface for which to retrieve connectivity information.
            </param>
            <param name="ConnectivityHint">
            A pointer to a value of type NL_NETWORK_CONNECTIVITY_HINT. The function sets this value to the connectivity level and cost hints
            for the specified interface.
            </param>
            <returns>
            In user mode, returns <c>NO_ERROR</c> on success, and an error code on failure. In kernel mode, returns <c>STATUS_SUCCESS</c> on
            success, and an error code on failure.
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetTeredoPort(System.UInt16@)">
            <summary>
            <para>The <c>GetTeredoPort</c> function retrieves the dynamic UDP port number used by the Teredo client on the local computer.</para>
            </summary>
            <param name="Port">
            <para>
            A pointer to the UDP port number. On successful return, this parameter will be filled with the port number used by the Teredo client.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Port parameter.</term>
            </item>
            <item>
            <term>ERROR_NOT_READY</term>
            <term>The device is not ready. This error is returned if the Teredo client is not started on the local computer.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>The request is not supported. This error is returned if no IPv6 stack is on the local computer.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetTeredoPort</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetTeredoPort</c> function retrieves the current UDP port number used by the Teredo client for the Teredo service port.
            The Teredo port is dynamic and can change any time the Teredo client is restarted on the local computer. An application can
            register to be notified when the Teredo service port changes by calling the NotifyTeredoPortChange function.
            </para>
            <para>
            The Teredo client also uses static UDP port 3544 for listening to multicast traffic sent on multicast IPv4 address 224.0.0.253 as
            defined in RFC 4380. For more information, see http://www.ietf.org/rfc/rfc4380.txt.
            </para>
            <para>
            The <c>GetTeredoPort</c> function is used primarily by firewall applications in order to configure the appropriate exceptions to
            allow incoming and outgoing Teredo traffic.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetUnicastIpAddressEntry(Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW@)">
            <summary>
            <para>
            The <c>GetUnicastIpAddressEntry</c> function retrieves information for an existing unicast IP address entry on the local computer.
            </para>
            </summary>
            <param name="Row">
            <para>
            A pointer to a MIB_UNICASTIPADDRESS_ROW structure entry for a unicast IP address entry. On successful return, this structure will
            be updated with the properties for an existing unicast IP address.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            The system cannot find the file specified. This error is returned if the network interface LUID or interface index specified by
            the InterfaceLuid or InterfaceIndex member of the MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter is not a value on the
            local machine.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            A parameter is incorrect. This error is returned if a NULL pointer is passed in the Row parameter, the Address member of the
            MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter is not set to a valid unicast IPv4 or IPv6 address, or both the
            InterfaceLuid and InterfaceIndex members of the MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter are unspecified.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            Element not found. This error is returned if the network interface specified by the InterfaceLuid or InterfaceIndex member of the
            MIB_UNICASTIPADDRESS_ROW structure pointed to by the Row parameter does not match the IP address specified in the Address member
            in the MIB_UNICASTIPADDRESS_ROW structure.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address is specified
            in the Address member of the MIB_UNICASTIPADDRESS_ROW structure pointed to by the Row parameter. This error is also returned if
            no IPv6 stack is on the local computer and an IPv6 address is specified in the Address member.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetUnicastIpAddressEntry</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetUnicastIpAddressEntry</c> function is normally used to retrieve an existing MIB_UNICASTIPADDRESS_ROW structure entry to
            be modified. An application can then change the members in the <c>MIB_UNICASTIPADDRESS_ROW</c> entry it wishes to modify, and
            then call the SetUnicastIpAddressEntry function.
            </para>
            <para>
            On input, the <c>Address</c> member in the MIB_UNICASTIPADDRESS_ROW structure pointed to by the Row parameter must be initialized
            to a valid unicast IPv4 or IPv6 address. The <c>si_family</c> member of the <c>SOCKADDR_INET</c> structure in the <c>Address</c>
            member must be initialized to either <c>AF_INET</c> or <c>AF_INET6</c> and the related <c>Ipv4</c> or <c>Ipv6</c> member of the
            <c>SOCKADDR_INET</c> structure must be set to a valid unicast IP address. In addition, at least one of the following members in
            the <c>MIB_UNICASTIPADDRESS_ROW</c> structure pointed to the Row parameter must be initialized: the <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>
            On output when the call is successful, <c>GetUnicastIpAddressEntry</c> retrieves the other properties for the unicast IP address
            and fills out the MIB_UNICASTIPADDRESS_ROW structure pointed to by the Row parameter.
            </para>
            <para>The GetUnicastIpAddressTable function can be called to enumerate the unicast IP address entries on a local computer.</para>
            <para>Examples</para>
            <para>
            The following example retrieves a unicast IP address entry specified on the command line and prints some values from the
            retrieved MIB_UNICASTIPADDRESS_ROW structure.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.GetUnicastIpAddressTable(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_TABLE@)">
            <summary>
            <para>The <c>GetUnicastIpAddressTable</c> function retrieves the unicast IP address table on the local computer.</para>
            </summary>
            <param name="Family">
            <para>The address family to retrieve.</para>
            <para>
            Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family
            and PF_ protocol family constants are identical (for example, <c>AF_INET</c> and <c>PF_INET</c>), so either constant can be used.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for
            this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h,
            and should never be used directly.
            </para>
            <para>The values currently supported are <c>AF_INET</c>, <c>AF_INET6</c>, and <c>AF_UNSPEC</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_UNSPEC 0</term>
            <term>
            The address family is unspecified. When this parameter is specified, this function returns the unicast IP address table
            containing both IPv4 and IPv6 entries.
            </term>
            </item>
            <item>
            <term>AF_INET 2</term>
            <term>
            The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function returns the unicast IP
            address table containing only IPv4 entries.
            </term>
            </item>
            <item>
            <term>AF_INET6 23</term>
            <term>
            The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function returns the unicast IP
            address table containing only IPv6 entries.
            </term>
            </item>
            </list>
            </param>
            <param name="Table">
            <para>A pointer to a MIB_UNICASTIPADDRESS_TABLE structure that contains a table of unicast IP address entries on the local computer.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Table parameter or the
            Family parameter was not specified as AF_INET, AF_INET6, or AF_UNSPEC.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>Insufficient memory resources are available to complete the operation.</term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>Element not found. This error is returned if no unicast IP address entries as specified in the Family parameter were found.</term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and AF_INET was specified in the
            Family parameter. This error is also returned if no IPv6 stack is on the local computer and AF_INET6 was specified in the Family
            parameter. This error is also returned on versions of Windows where this function is not supported.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>GetUnicastIpAddressTable</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>GetUnicastIpAddressTable</c> function enumerates the unicast IP addresses on a local system and returns this information
            in an MIB_UNICASTIPADDRESS_TABLE structure.
            </para>
            <para>
            The unicast IP address entries are returned in a MIB_UNICASTIPADDRESS_TABLE structure in the buffer pointed to by the Table
            parameter. The <c>MIB_UNICASTIPADDRESS_TABLE</c> structure contains a unicast IP address entry count and an array of
            MIB_UNICASTIPADDRESS_ROW structures for each unicast IP address entry. When these returned structures are no longer required,
            free the memory by calling the <c>FreeMibTable</c>.
            </para>
            <para>The Family parameter must be initialized to either <c>AF_INET</c>, <c>AF_INET6</c>, or <c>AF_UNSPEC</c>.</para>
            <para>
            Note that the returned MIB_UNICASTIPADDRESS_TABLE structure pointed to by the Table parameter may contain padding for alignment
            between the <c>NumEntries</c> member and the first MIB_UNICASTIPADDRESS_ROW array entry in the <c>Table</c> member of the
            <c>MIB_UNICASTIPADDRESS_TABLE</c> structure. Padding for alignment may also be present between the
            <c>MIB_UNICASTIPADDRESS_ROW</c> array entries. Any access to a <c>MIB_UNICASTIPADDRESS_ROW</c> array entry should assume padding
            may exist.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves a unicast IP address table and prints some values from each of the retrieved
            MIB_UNICASTIPADDRESS_ROW structures.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.if_indextoname(System.UInt32,System.Text.StringBuilder)">
            <summary>
            <para>The <c>if_indextoname</c> function converts the local index for a network interface to the ANSI interface name.</para>
            </summary>
            <param name="InterfaceIndex">
            <para>The local index for a network interface.</para>
            </param>
            <param name="InterfaceName">
            <para>
            A pointer to a buffer to hold the <c>NULL</c>-terminated ANSI string containing the interface name when the function returns
            successfully. The length, in bytes, of the buffer pointed to by this parameter must be equal to or greater than <c>IF_NAMESIZE</c>.
            </para>
            </param>
            <returns>
            <para>
            On success, <c>if_indextoname</c> returns a pointer to <c>NULL</c>-terminated ANSI string containing the interface name. On
            failure, a <c>NULL</c> pointer is returned.
            </para>
            </returns>
            <remarks>
            <para>The <c>if_indextoname</c> function is available on Windows Vista and later.</para>
            <para>
            The <c>if_indextoname</c> function maps an interface index into its corresponding name. This function is designed as part of
            basic socket extensions for IPv6 as described by the IETF in RFC 2553. For more information, see http://www.ietf.org/rfc/rfc2553.txt.
            </para>
            <para>
            The <c>if_indextoname</c> function is implemented for portability of applications with Unix environments, but the
            ConvertInterface functions are preferred. The <c>if_indextoname</c> function can be replaced by a call to the
            ConvertInterfaceIndexToLuid function to convert an interface index to a NET_LUID followed by a call to the
            ConvertInterfaceLuidToNameA to convert the NET_LUID to the ANSI interface name.
            </para>
            <para>If the <c>if_indextoname</c> fails and returns a <c>NULL</c> pointer, it is not possible to determine an error code.</para>
            <para>
            The length, in bytes, of the buffer pointed to by the InterfaceName parameter must be equal or greater than <c>IF_NAMESIZE</c>, a
            value declared in the Netioapi.h header file equal to <c>NDIS_IF_MAX_STRING_SIZE</c>. The maximum length of an interface name,
            <c>NDIS_IF_MAX_STRING_SIZE</c>, without the terminating <c>NULL</c> is declared in the Ntddndis.h header file. The
            <c>NDIS_IF_MAX_STRING_SIZE</c> is defined to be the <c>IF_MAX_STRING_SIZE</c> constant defined in the Ifdef.h header file. The
            Ntddndis.h and Ifdef.h header files are automatically included in the Netioapi.h header file which is automatically included by
            the Iphlpapi.h header file. The Ntddndis.h, Ifdef.h, and Netioapi.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.if_nametoindex(System.String)">
            <summary>
            The <c>if_nametoindex</c> function converts the ANSI interface name for a network interface to the local index for the interface.
            </summary>
            <param name="InterfaceName">A pointer to a <c>NULL</c>-terminated ANSI string containing the interface name.</param>
            <returns>On success, <c>if_nametoindex</c> returns the local interface index. On failure, zero is returned.</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.InitializeIpForwardEntry(Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2@)">
            <summary>
            <para>
            The <c>InitializeIpForwardEntry</c> function initializes a <c>MIB_IPFORWARD_ROW2</c> structure with default values for an IP
            route entry on the local computer.
            </para>
            </summary>
            <param name="Row">
            <para>
            On entry, a pointer to a MIB_IPFORWARD_ROW2 structure entry for an IP route entry. On return, the <c>MIB_IPFORWARD_ROW2</c>
            structure pointed to by this parameter is initialized with default values for an IP route entry.
            </para>
            </param>
            <returns>
            <para>This function does not return a value.</para>
            </returns>
            <remarks>
            <para>The <c>InitializeIpForwardEntry</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>InitializeIpForwardEntry</c> function must be used to initialize the members of a MIB_IPFORWARD_ROW2 structure entry with
            default values for an IP route entry for later use with the CreateIpForwardEntry2 function.
            </para>
            <para>On input, <c>InitializeIpForwardEntry</c> must be passed a new MIB_IPFORWARD_ROW2 structure to initialize.</para>
            <para>
            On output, the <c>ValidLifetime</c> and <c>PreferredLifetime</c> members of the MIB_IPFORWARD_ROW2 structure pointed to by Row
            parameter will be initialized to infinite and the <c>Loopback</c>, <c>AutoconfigureAddress</c>, <c>Publish</c>, and
            <c>Immortal</c> members will be initialized to <c>TRUE</c>. In addition, the <c>SitePrefixLength</c>, <c>Metric</c>, and
            <c>Protocol</c> members are set to an illegal value and other fields are initialized to zero.
            </para>
            <para>
            After calling <c>InitializeIpForwardEntry</c>, an application can then change the members in the MIB_IPFORWARD_ROW2 entry it
            wishes to modify, and then call the CreateIpForwardEntry2 to add the new IP route entry to the local computer.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.InitializeIpInterfaceEntry(Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW@)">
            <summary>
            The <c>InitializeIpInterfaceEntry</c> function initializes the members of an <c>MIB_IPINTERFACE_ROW</c> structure entry with
            default values.
            </summary>
            <param name="Row">
            A pointer to a <c>MIB_IPINTERFACE_ROW</c> structure to initialize. On successful return, the fields in this parameter are
            initialized with default information for an interface on the local computer.
            </param>
            <returns>
            <para><c>InitializeIpInterfaceEntry</c> returns STATUS_SUCCESS if the function succeeds.</para>
            <para>If the function fails, <c>InitializeIpInterfaceEntry</c> returns one of the following error codes:</para>
            <para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>STATUS_INVALID_PARAMETER</term>
            <term>An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Row parameter</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use the FormatMessage function to obtain the message string for the returned error.</term>
            </item>
            </list>
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.InitializeUnicastIpAddressEntry(Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW@)">
            <summary>
            <para>
            The <c>InitializeUnicastIpAddressEntry</c> function initializes a <c>MIB_UNICASTIPADDRESS_ROW</c> structure with default values
            for a unicast IP address entry on the local computer.
            </para>
            </summary>
            <param name="Row">
            <para>
            On entry, a pointer to a MIB_UNICASTIPADDRESS_ROW structure entry for a unicast IP address entry. On return, the
            <c>MIB_UNICASTIPADDRESS_ROW</c> structure pointed to by this parameter is initialized with default values for a unicast IP address.
            </para>
            </param>
            <returns>
            <para>This function does not return a value.</para>
            </returns>
            <remarks>
            <para>The <c>InitializeUnicastIpAddressEntry</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>InitializeUnicastIpAddressEntry</c> function must be used to initialize the members of a MIB_UNICASTIPADDRESS_ROW
            structure entry with default values for a unicast IP address for later use with the CreateUnicastIpAddressEntry function.
            </para>
            <para>On input, <c>InitializeUnicastIpAddressEntry</c> must be passed a new MIB_UNICASTIPADDRESS_ROW structure to initialize.</para>
            <para>
            On output, the <c>PrefixOrigin</c> member of the MIB_UNICASTIPADDRESS_ROW structure pointed to by Row parameter the will be
            initialized to <c>IpPrefixOriginUnchanged</c>, the <c>SuffixOrigin</c> member will be initialized to
            <c>IpSuffixOriginUnchanged</c>, and the <c>OnLinkPrefixLength</c> member will be initialized to an illegal value. In addition,
            the <c>PreferredLifetime</c> and <c>ValidLifetime</c> members are set to infinite, the <c>SkipAsSource</c> member is set to
            <c>FALSE</c>, and other fields are initialized to zero.
            </para>
            <para>
            After calling <c>InitializeUnicastIpAddressEntry</c>, an application can then change the members in the MIB_UNICASTIPADDRESS_ROW
            entry it wishes to modify, and then call the CreateUnicastIpAddressEntry to add the new unicast IP address to the local computer.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.NotifyIpInterfaceChange(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,Vanara.PInvoke.IpHlpApi.PIPINTERFACE_CHANGE_CALLBACK,System.IntPtr,System.Boolean,System.IntPtr@)">
            <summary>
            <para>
            The <c>NotifyIpInterfaceChange</c> function registers to be notified for changes to all IP interfaces, IPv4 interfaces, or IPv6
            interfaces on a local computer.
            </para>
            </summary>
            <param name="Family">
            <para>The address family on which to register for change notifications.</para>
            <para>
            Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family
            and PF_ protocol family constants are identical (for example, <c>AF_INET</c> and <c>PF_INET</c>), so either constant can be used.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for
            this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h,
            and should never be used directly.
            </para>
            <para>The values currently supported are <c>AF_INET</c>, <c>AF_INET6</c>, and <c>AF_UNSPEC</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_UNSPEC 0</term>
            <term>
            The address family is unspecified. When this parameter is specified, this function registers for both IPv4 and IPv6 change notifications.
            </term>
            </item>
            <item>
            <term>AF_INET 2</term>
            <term>
            The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function register for only IPv4
            change notifications.
            </term>
            </item>
            <item>
            <term>AF_INET6 23</term>
            <term>
            The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function registers for only IPv6
            change notifications.
            </term>
            </item>
            </list>
            </param>
            <param name="Callback">
            <para>
            A pointer to the function to call when a change occurs. This function will be invoked when an interface notification is received.
            </para>
            </param>
            <param name="CallerContext">
            <para>A user context passed to the callback function specified in the Callback parameter when an interface notification is received.</para>
            </param>
            <param name="InitialNotification">
            <para>
            A value that indicates whether the callback should be invoked immediately after registration for change notification completes.
            This initial notification does not indicate a change occurred to an IP interface. The purpose of this parameter to provide
            confirmation that the callback is registered.
            </para>
            </param>
            <param name="NotificationHandle">
            <para>
            A pointer used to return a handle that can be later used to deregister the change notification. On success, a notification handle
            is returned in this parameter. If an error occurs, <c>NULL</c> is returned.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_HANDLE</term>
            <term>An internal error occurred where an invalid handle was encountered.</term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the Family parameter was not either AF_INET, AF_INET6,
            or AF_UNSPEC.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>There was insufficient memory.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>NotifyIpInterfaceChange</c> function is defined on Windows Vista and later.</para>
            <para>The Family parameter must be set to either <c>AF_INET</c>, <c>AF_INET6</c>, or <c>AF_UNSPEC</c>.</para>
            <para>
            The invocation of the callback function specified in the Callback parameter is serialized. The callback function should be
            defined as a function of type <c>VOID</c>. The parameters passed to the callback function include the following:
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>IN PVOID CallerContext</term>
            <term>The CallerContext parameter passed to the NotifyIpInterfaceChange function when registering for notifications.</term>
            </item>
            <item>
            <term>IN PMIB_IPINTERFACE_ROW Row OPTIONAL</term>
            <term>
            A pointer to the MIB_IPINTERFACE_ROW entry for the interface that was changed. This parameter is a NULL pointer when the
            MIB_NOTIFICATION_TYPE value passed in the NotificationType parameter to the callback function is set to MibInitialNotification.
            This can only occur if the InitialNotification parameter passed to NotifyIpInterfaceChange was set to TRUE when registering for notifications.
            </term>
            </item>
            <item>
            <term>IN MIB_NOTIFICATION_TYPE NotificationType</term>
            <term>
            The notification type. This member can be one of the values from the MIB_NOTIFICATION_TYPE enumeration type defined in the
            Netioapi.h header file.
            </term>
            </item>
            </list>
            <para>
            The callback function specified in the Callback parameter must be implemented in the same process as the application calling the
            <c>NotifyIpInterfaceChange</c> function. If the callback function is in a separate DLL, then the DLL should be loaded before
            calling the <c>NotifyIpInterfaceChange</c> function to register for change notifications.
            </para>
            <para>
            When the callback function is received when a change occurs and the Row parameter is not <c>NULL</c>, the pointer to the
            MIB_IPINTERFACE_ROW structure passed in the Row parameter contains incomplete data. The information returned in the
            <c>MIB_IPINTERFACE_ROW</c> structure is only enough information that an application can call the GetIpInterfaceEntry function to
            query complete information on the IP interface that changed. When the callback function is received, an application should
            allocate a <c>MIB_IPINTERFACE_ROW</c> structure and initialize it with the <c>Family</c>, <c>InterfaceLuid</c> and
            <c>InterfaceIndex</c> members in the <c>MIB_IPINTERFACE_ROW</c> structure pointed to by the Row parameter received. A pointer to
            this newly initialized <c>MIB_IPINTERFACE_ROW</c> structure should be passed to the <c>GetIpInterfaceEntry</c> function to
            retrieve complete information on the IP interface that was changed.
            </para>
            <para>
            The memory pointed to by the Row parameter used in the callback indications is managed by the operating system. An application
            that receives a notification should never attempt to free the memory pointed to by the Row parameter.
            </para>
            <para>
            To deregister for change notifications, call the CancelMibChangeNotify2 function passing the NotificationHandle parameter
            returned by <c>NotifyIpInterfaceChange</c>.
            </para>
            <para>
            An application cannot make a call to the CancelMibChangeNotify2 function from the context of the thread which is currently
            executing the notification callback function for the same NotificationHandle parameter. Otherwise, the thread executing that
            callback will result in deadlock. So the <c>CancelMibChangeNotify2</c> function must not be called directly as part of the
            notification callback routine. In a more general situation, a thread that executes the <c>CancelMibChangeNotify2</c> function
            cannot own a resource on which the thread that executes a notification callback operation would wait because it would result in a
            similar deadlock. The <c>CancelMibChangeNotify2</c> function should be called from a different thread, on which the thread that
            receives the notification callback doesn’t have dependencies on.
            </para>
            <para>
            Once the <c>NotifyIpInterfaceChange</c> function is called to register for change notifications, these notifications will
            continue to be sent until the application deregisters for change notifications or the application terminates. If the application
            terminates, the system will automatically deregister any registration for change notifications. It is still recommended that an
            application explicitly deregister for change notifications before it terminates.
            </para>
            <para>Any registration for change notifications does not persist across a system shut down or reboot.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.NotifyNetworkConnectivityHintChange(Vanara.PInvoke.IpHlpApi.PNETWORK_CONNECTIVITY_HINT_CHANGE_CALLBACK,System.IntPtr,System.Boolean,System.IntPtr@)">
            <summary>
            Registers an application-defined callback function, to be called when the aggregate network connectivity level and cost hints change.
            </summary>
            <param name="Callback">
            A function pointer of type PNETWORK_CONNECTIVITY_HINT_CHANGE_CALLBACK, which points to your application-defined callback
            function. The callback function will be invoked when a network connectivity level or cost change occurs.
            </param>
            <param name="CallerContext">The user-specific caller context. This context will be supplied to the callback function.</param>
            <param name="InitialNotification">
            <see langword="true"/> if an initialization notification should be provided, otherwise <see langword="false"/>.
            </param>
            <param name="NotificationHandle">
            A pointer to a <c>HANDLE</c>. The function sets the value to a handle to the notification registration.
            </param>
            <returns>None</returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.NotifyRouteChange2(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,Vanara.PInvoke.IpHlpApi.PIPFORWARD_CHANGE_CALLBACK,System.IntPtr,System.Boolean,System.IntPtr@)">
            <summary>
            <para>The <c>NotifyRouteChange2</c> function registers to be notified for changes to IP route entries on a local computer.</para>
            </summary>
            <param name="AddressFamily">
            <para>The address family on which to register for change notifications.</para>
            <para>
            Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family
            and PF_ protocol family constants are identical (for example, <c>AF_INET</c> and <c>PF_INET</c>), so either constant can be used.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for
            this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h,
            and should never be used directly.
            </para>
            <para>The values currently supported are <c>AF_INET</c>, <c>AF_INET6</c>, and <c>AF_UNSPEC</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_INET</term>
            <term>Register for only IPv4 route change notifications.</term>
            </item>
            <item>
            <term>AF_INET6</term>
            <term>Register for only IPv6 route change notifications.</term>
            </item>
            <item>
            <term>AF_UNSPEC</term>
            <term>Register for both IPv4 and IPv6 route change notifications.</term>
            </item>
            </list>
            </param>
            <param name="Callback">
            <para>
            A pointer to the function to call when a change occurs. This function will be invoked when an IP route notification is received.
            </para>
            </param>
            <param name="CallerContext">
            <para>A user context passed to the callback function specified in the Callback parameter when an interface notification is received.</para>
            </param>
            <param name="InitialNotification">
            <para>
            A value that indicates whether the callback should be invoked immediately after registration for change notification completes.
            This initial notification does not indicate a change occurred to an IP route entry. The purpose of this parameter to provide
            confirmation that the callback is registered.
            </para>
            </param>
            <param name="NotificationHandle">
            <para>
            A pointer used to return a handle that can be later used to deregister the change notification. On success, a notification handle
            is returned in this parameter. If an error occurs, <c>NULL</c> is returned.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_HANDLE</term>
            <term>An internal error occurred where an invalid handle was encountered.</term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the Family parameter was not either AF_INET, AF_INET6,
            or AF_UNSPEC.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>There was insufficient memory.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>NotifyRouteChange2</c> function is defined on Windows Vista and later.</para>
            <para>The Family parameter must be set to either <c>AF_INET</c>, <c>AF_INET6</c>, or <c>AF_UNSPEC</c>.</para>
            <para>
            The invocation of the callback function specified in the Callback parameter is serialized. The callback function should be
            defined as a function of type <c>VOID</c>. The parameters passed to the callback function include the following:
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>IN PVOID CallerContext</term>
            <term>The CallerContext parameter passed to the NotifyRouteChange2 function when registering for notifications.</term>
            </item>
            <item>
            <term>IN PMIB_IPFORWARD_ROW2 Row OPTIONAL</term>
            <term>
            A pointer to the MIB_IPFORWARD_ROW2 entry for the IP route entry that was changed. This parameter is a NULL pointer when the
            MIB_NOTIFICATION_TYPE value passed in the NotificationType parameter to the callback function is set to MibInitialNotification.
            This can only occur if the InitialNotification parameter passed to NotifyRouteChange2 was set to TRUE when registering for notifications.
            </term>
            </item>
            <item>
            <term>IN MIB_NOTIFICATION_TYPE NotificationType</term>
            <term>
            The notification type. This member can be one of the values from the MIB_NOTIFICATION_TYPE enumeration type defined in the
            Netioapi.h header file.
            </term>
            </item>
            </list>
            <para>
            The callback function specified in the Callback parameter must be implemented in the same process as the application calling the
            <c>NotifyRouteChange2</c> function. If the callback function is in a separate DLL, then the DLL should be loaded before calling
            the <c>NotifyRouteChange2</c> function to register for change notifications.
            </para>
            <para>
            When the callback function is received when a change occurs and the Row parameter is not <c>NULL</c>, the pointer to the
            MIB_IPFORWARD_ROW2 structure passed in the Row parameter contains incomplete data. The information returned in the
            <c>MIB_IPFORWARD_ROW2</c> structure is only enough information that an application can call the GetIpForwardEntry2 function to
            query complete information on the IP route that changed. When the callback function is received, an application should allocate a
            <c>MIB_IPFORWARD_ROW2</c> structure and initialize it with the <c>DestinationPrefix</c>, <c>NextHop</c>, <c>InterfaceLuid</c> and
            <c>InterfaceIndex</c> members in the <c>MIB_IPFORWARD_ROW2</c> structure pointed to by the Row parameter received. A pointer to
            this newly initialized <c>MIB_IPFORWARD_ROW2</c> structure should be passed to the <c>GetIpForwardEntry2</c> function to retrieve
            complete information on the IP route that was changed.
            </para>
            <para>
            The memory pointed to by the Row parameter used in the callback indications is managed by the operating system. An application
            that receives a notification should never attempt to free the memory pointed to by the Row parameter.
            </para>
            <para>
            Once the <c>NotifyRouteChange2</c> function is called to register for change notifications, these notifications will continue to
            be sent until the application deregisters for change notifications or the application terminates. If the application terminates,
            the system will automatically deregister any registration for change notifications. It is still recommended that an application
            explicitly deregister for change notifications before it terminates.
            </para>
            <para>Any registration for change notifications does not persist if the system is shutdown or rebooted.</para>
            <para>
            To deregister for change notifications, call the CancelMibChangeNotify2 function passing the NotificationHandle parameter
            returned by <c>NotifyRouteChange2</c>.
            </para>
            <para>
            An application cannot make a call to the CancelMibChangeNotify2 function from the context of the thread which is currently
            executing the notification callback function for the same NotificationHandle parameter. Otherwise, the thread executing that
            callback will result in deadlock. So the <c>CancelMibChangeNotify2</c> function must not be called directly as part of the
            notification callback routine. In a more general situation, a thread that executes the <c>CancelMibChangeNotify2</c> function
            cannot own a resource on which the thread that executes a notification callback operation would wait because it would result in a
            similar deadlock. The <c>CancelMibChangeNotify2</c> function should be called from a different thread, on which the thread that
            receives the notification callback doesn’t have dependencies on.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.NotifyStableUnicastIpAddressTable(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,System.IntPtr@,Vanara.PInvoke.IpHlpApi.PSTABLE_UNICAST_IPADDRESS_TABLE_CALLBACK,System.IntPtr,System.IntPtr@)">
            <summary>
            <para>The <c>NotifyStableUnicastIpAddressTable</c> function retrieves the stable unicast IP address table on a local computer.</para>
            </summary>
            <param name="Family">
            <para>The address family to retrieve.</para>
            <para>
            Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family
            and PF_ protocol family constants are identical (for example, <c>AF_INET</c> and <c>PF_INET</c>), so either constant can be used.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for
            this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h,
            and should never be used directly.
            </para>
            <para>The values currently supported are <c>AF_INET</c>, <c>AF_INET6</c>, and <c>AF_UNSPEC</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_UNSPEC 0</term>
            <term>
            The address family is unspecified. When this parameter is specified, the function retrieves the stable unicast IP address table
            containing both IPv4 and IPv6 entries.
            </term>
            </item>
            <item>
            <term>AF_INET 2</term>
            <term>
            The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, the function retrieves the stable
            unicast IP address table containing only IPv4 entries.
            </term>
            </item>
            <item>
            <term>AF_INET6 23</term>
            <term>
            The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, the function retrieves the stable
            unicast IP address table containing only IPv6 entries.
            </term>
            </item>
            </list>
            </param>
            <param name="Table">
            <para>
            A pointer to a MIB_UNICASTIPADDRESS_TABLE structure. When <c>NotifyStableUnicastIpAddressTable</c> is successful, this parameter
            returns the stable unicast IP address table on the local computer.
            </para>
            <para>
            When <c>NotifyStableUnicastIpAddressTable</c> returns <c>ERROR_IO_PENDING</c> indicating that the I/O request is pending, then
            the stable unicast IP address table is returned to the function in the CallerCallback parameter.
            </para>
            </param>
            <param name="CallerCallback">
            <para>
            A pointer to the function to call with the stable unicast IP address table. This function will be invoked if
            <c>NotifyStableUnicastIpAddressTable</c> returns <c>ERROR_IO_PENDING</c>, indicating that the I/O request is pending.
            </para>
            </param>
            <param name="CallerContext">
            <para>
            A user context passed to the callback function specified in the CallerCallback parameter when the stable unicast IP address table
            is available.
            </para>
            </param>
            <param name="NotificationHandle">
            <para>
            A pointer used to return a handle that can be used to cancel the request to retrieve the stable unicast IP address table. This
            parameter is returned if the return value from <c>NotifyStableUnicastIpAddressTable</c> is <c>ERROR_IO_PENDING</c> indicating
            that the I/O request is pending.
            </para>
            </param>
            <returns>
            <para>
            If the function succeeds immediately, the return value is NO_ERROR and the stable unicast IP table is returned in the Table parameter.
            </para>
            <para>
            If the I/O request is pending, the function returns <c>ERROR_IO_PENDING</c> and the function pointed to by the CallerCallback
            parameter is called when the I/O request has completed with the stable unicast IP address table.
            </para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_HANDLE</term>
            <term>An internal error occurred where an invalid handle was encountered.</term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the Table parameter was a NULL pointer, the
            NotificationHandle parameter was a NULL pointer, or the Family parameter was not either AF_INET, AF_INET6, or AF_UNSPEC.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>There was insufficient memory.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>NotifyStableUnicastIpAddressTable</c> function is defined on Windows Vista and later.</para>
            <para>
            If the <c>NotifyStableUnicastIpAddressTable</c> function succeeds immediately, the return value is NO_ERROR and the stable
            unicast IP table is returned in the Table parameter. The calling application should free the memory pointed to by the Table
            parameter using the FreeMibTable function when the MIB_UNICASTIPADDRESS_TABLE information is no longer needed.
            </para>
            <para>
            All unicast IP addresses except dial-on-demand addresses are considered stable only if they are in the preferred state. For a
            normal unicast IP address entry, this would correspond to a DadState member of the MIB_UNICASTIPADDRESS_ROW for the IP address
            set to <c>IpDadStatePreferred</c>. Every dial-on-demand address defines its own stability metric. Currently the only
            dial-on-demand address considered by this function is the unicast IP address used by the Teredo client on the local computer.
            </para>
            <para>The Family parameter must be set to either <c>AF_INET</c>, <c>AF_INET6</c>, or <c>AF_UNSPEC</c>.</para>
            <para>
            When <c>NotifyStableUnicastIpAddressTable</c> is successful and returns NO_ERROR, the Table parameter returns the stable unicast
            IP address table on the local computer.
            </para>
            <para>
            When <c>NotifyStableUnicastIpAddressTable</c> returns <c>ERROR_IO_PENDING</c> indicating that the I/O request is pending, then
            the stable unicast IP address table is returned to the function in the CallerCallback parameter.
            </para>
            <para>The <c>NotifyStableUnicastIpAddressTable</c> function is used primarily by applications that use the Teredo client.</para>
            <para>
            If the unicast IP address used by Teredo is available on the local computer but not in the stable (qualified) state,
            <c>NotifyStableUnicastIpAddressTable</c> returns ERROR_IO_PENDING and the stable unicast IP address table is eventually returned
            by calling the function in the CallerCallback parameter. If the Teredo address is not available or is in the stable state and the
            other unicast IP addresses are in a stable state, then the function in the CallerCallback parameter will never be invoked.
            </para>
            <para>
            The callback function specified in the CallerCallback parameter should be defined as a function of type <c>VOID</c>. The
            parameters passed to the callback function include the following:
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>IN PVOID CallerContext</term>
            <term>The CallerContext parameter passed to the NotifyStableUnicastIpAddressTable function when registering for notifications.</term>
            </item>
            <item>
            <term>IN PMIB_UNICASTIPADDRESS_TABLE AddressTable</term>
            <term>A pointer to a MIB_UNICASTIPADDRESS_TABLE containing the stable unicast IP address table on the local computer.</term>
            </item>
            </list>
            <para>
            The callback function specified in the CallerCallback parameter must be implemented in the same process as the application
            calling the <c>NotifyStableUnicastIpAddressTable</c> function. If the callback function is in a separate DLL, then the DLL should
            be loaded before calling the <c>NotifyStableUnicastIpAddressTable</c> function to register for change notifications.
            </para>
            <para>
            The memory pointed to by the AddressTable parameter used in a callback indication is allocated by the operating system. An
            application that receives a notification should free the memory pointed to by the AddressTable parameter using the FreeMibTable
            function when the MIB_UNICASTIPADDRESS_TABLE information is no longer needed.
            </para>
            <para>
            Once the <c>NotifyStableUnicastIpAddressTable</c> function is called to register for change notifications, these notifications
            will continue to be sent until the application deregisters for change notifications or the application terminates. If the
            application terminates, the system will automatically deregister any registration for change notifications. It is still
            recommended that an application explicitly deregister any change notifications before it terminates.
            </para>
            <para>Any registration for change notifications does not persist if the system is shutdown or rebooted.</para>
            <para>
            To deregister for change notifications, call the CancelMibChangeNotify2 function passing the NotificationHandle parameter
            returned by <c>NotifyStableUnicastIpAddressTable</c>.
            </para>
            <para>
            An application cannot make a call to the CancelMibChangeNotify2 function from the context of the thread which is currently
            executing the notification callback function for the same NotificationHandle parameter. Otherwise, the thread executing that
            callback will result in deadlock. So the <c>CancelMibChangeNotify2</c> function must not be called directly as part of the
            notification callback routine. In a more general situation, a thread that executes the <c>CancelMibChangeNotify2</c> function
            cannot own a resource on which the thread that executes a notification callback operation would wait because it would result in a
            similar deadlock. The <c>CancelMibChangeNotify2</c> function should be called from a different thread, on which the thread that
            receives the notification callback doesn’t have dependencies on.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.NotifyTeredoPortChange(Vanara.PInvoke.IpHlpApi.PTEREDO_PORT_CHANGE_CALLBACK,System.IntPtr,System.Boolean,System.IntPtr@)">
            <summary>
            <para>
            The <c>NotifyTeredoPortChange</c> function registers to be notified for changes to the UDP port number used by the Teredo client
            for the Teredo service port on a local computer.
            </para>
            </summary>
            <param name="Callback">
            <para>
            A pointer to the function to call when a Teredo client port change occurs. This function will be invoked when a Teredo port
            change notification is received.
            </para>
            </param>
            <param name="CallerContext">
            <para>
            A user context passed to the callback function specified in the Callback parameter when a Teredo port change notification is received.
            </para>
            </param>
            <param name="InitialNotification">
            <para>
            A value that indicates whether the callback should be invoked immediately after registration for change notification completes.
            This initial notification does not indicate a change occurred to the Teredo client port. The purpose of this parameter to provide
            confirmation that the callback is registered.
            </para>
            </param>
            <param name="NotificationHandle">
            <para>
            A pointer used to return a handle that can be later used to deregister the change notification. On success, a notification handle
            is returned in this parameter. If an error occurs, <c>NULL</c> is returned.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_HANDLE</term>
            <term>An internal error occurred where an invalid handle was encountered.</term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>An invalid parameter was passed to the function. This error is returned if the Callback parameter is a NULL pointer.</term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>There was insufficient memory.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>NotifyTeredoPortChange</c> function is defined on Windows Vista and later.</para>
            <para>
            The GetTeredoPort function can be used to retrieve the initial UDP port number used by the Teredo client for the Teredo service port.
            </para>
            <para>
            The Teredo port is dynamic and can change any time the Teredo client is restarted on the local computer. An application can
            register to be notified when the Teredo service port changes by calling the <c>NotifyTeredoPortChange</c> function.
            </para>
            <para>
            The invocation of the callback function specified in the Callback parameter is serialized. The callback function should be
            defined as a function of type <c>VOID</c>. The parameters passed to the callback function include the following:
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>IN PVOID CallerContext</term>
            <term>The CallerContext parameter passed to the NotifyTeredoPortChange function when registering for notifications.</term>
            </item>
            <item>
            <term>IN USHORT Port</term>
            <term>
            The UDP port number currently used by the Teredo client. This parameter is zero when the MIB_NOTIFICATION_TYPE value passed in
            the NotificationType parameter to the callback function is set to MibInitialNotification. This can only occur if the
            InitialNotification parameter passed to NotifyTeredoPortChange was set to TRUE when registering for notifications.
            </term>
            </item>
            <item>
            <term>IN MIB_NOTIFICATION_TYPE NotificationType</term>
            <term>
            The notification type. This member can be one of the values from the MIB_NOTIFICATION_TYPE enumeration type defined in the
            Netioapi.h header file.
            </term>
            </item>
            </list>
            <para>
            The callback function specified in the Callback parameter must be implemented in the same process as the application calling the
            <c>NotifyTeredoPortChange</c> function. If the callback function is in a separate DLL, then the DLL should be loaded before
            calling the <c>NotifyTeredoPortChange</c> function to register for change notifications.
            </para>
            <para>
            Once the <c>NotifyTeredoPortChange</c> function is called to register for change notifications, these notifications will continue
            to be sent until the application deregisters for change notifications or the application terminates. If the application
            terminates, the system will automatically deregister any registration for change notifications. It is still recommended that an
            application explicitly deregister for change notifications before it terminates.
            </para>
            <para>Any registration for change notifications does not persist across a system shut down or reboot.</para>
            <para>
            To deregister for change notifications, call the CancelMibChangeNotify2 function passing the NotificationHandle parameter
            returned by <c>NotifyTeredoPortChange</c>.
            </para>
            <para>
            An application cannot make a call to the CancelMibChangeNotify2 function from the context of the thread which is currently
            executing the notification callback function for the same NotificationHandle parameter. Otherwise, the thread executing that
            callback will result in deadlock. So the <c>CancelMibChangeNotify2</c> function must not be called directly as part of the
            notification callback routine. In a more general situation, a thread that executes the <c>CancelMibChangeNotify2</c> function
            cannot own a resource on which the thread that executes a notification callback operation would wait because it would result in a
            similar deadlock. The <c>CancelMibChangeNotify2</c> function should be called from a different thread, on which the thread that
            receives the notification callback doesn’t have dependencies on.
            </para>
            <para>
            The Teredo client also uses static UDP port 3544 for listening to multicast traffic sent on multicast IPv4 address 224.0.0.253 as
            defined in RFC 4380. For more information, see http://www.ietf.org/rfc/rfc4380.txt.
            </para>
            <para>
            The <c>NotifyTeredoPortChange</c> function is used primarily by firewall applications in order to configure the appropriate
            exceptions to allow incoming and outgoing Teredo traffic.
            </para>
            <para>The NotifyStableUnicastIpAddressTable function is used primarily by applications that use the Teredo client.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.NotifyUnicastIpAddressChange(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,Vanara.PInvoke.IpHlpApi.PUNICAST_IPADDRESS_CHANGE_CALLBACK,System.IntPtr,System.Boolean,System.IntPtr@)">
            <summary>
            <para>
            The <c>NotifyUnicastIpAddressChange</c> function registers to be notified for changes to all unicast IP interfaces, unicast IPv4
            addresses, or unicast IPv6 addresses on a local computer.
            </para>
            </summary>
            <param name="Family">
            <para>The address family on which to register for change notifications.</para>
            <para>
            Possible values for the address family are listed in the Winsock2.h header file. Note that the values for the AF_ address family
            and PF_ protocol family constants are identical (for example, <c>AF_INET</c> and <c>PF_INET</c>), so either constant can be used.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for
            this member are defined in the Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Winsock2.h,
            and should never be used directly.
            </para>
            <para>The values currently supported are <c>AF_INET</c>, <c>AF_INET6</c>, and <c>AF_UNSPEC</c>.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AF_INET</term>
            <term>Register for only unicast IPv4 address change notifications.</term>
            </item>
            <item>
            <term>AF_INET6</term>
            <term>Register for only unicast IPv6 address change notifications.</term>
            </item>
            <item>
            <term>AF_UNSPEC</term>
            <term>Register for both unicast IPv4 and IPv6 address change notifications.</term>
            </item>
            </list>
            </param>
            <param name="Callback">
            <para>
            A pointer to the function to call when a change occurs. This function will be invoked when a unicast IP address notification is received.
            </para>
            </param>
            <param name="CallerContext">
            <para>A user context passed to the callback function specified in the Callback parameter when an interface notification is received.</para>
            </param>
            <param name="InitialNotification">
            <para>
            A value that indicates whether the callback should be invoked immediately after registration for change notification completes.
            This initial notification does not indicate a change occurred to a unicast IP address. The purpose of this parameter to provide
            confirmation that the callback is registered.
            </para>
            </param>
            <param name="NotificationHandle">
            <para>
            A pointer used to return a handle that can be later used to deregister the change notification. On success, a notification handle
            is returned in this parameter. If an error occurs, <c>NULL</c> is returned.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_INVALID_HANDLE</term>
            <term>An internal error occurred where an invalid handle was encountered.</term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if the Family parameter was not either AF_INET, AF_INET6,
            or AF_UNSPEC.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_ENOUGH_MEMORY</term>
            <term>There was insufficient memory.</term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>NotifyUnicastIpAddressChange</c> function is defined on Windows Vista and later.</para>
            <para>The Family parameter must be set to either <c>AF_INET</c>, <c>AF_INET6</c>, or <c>AF_UNSPEC</c>.</para>
            <para>
            The invocation of the callback function specified in the Callback parameter is serialized. The callback function should be
            defined as a function of type <c>VOID</c>. The parameters passed to the callback function include the following:
            </para>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>IN PVOID CallerContext</term>
            <term>The CallerContext parameter passed to the NotifyUnicastIpAddressChange function when registering for notifications.</term>
            </item>
            <item>
            <term>IN PMIB_UNICASTIPADDRESS_ROW Row OPTIONAL</term>
            <term>
            A pointer to the MIB_UNICASTIPADDRESS_ROW entry for the unicast IP address that was changed. This parameter is a NULL pointer
            when the MIB_NOTIFICATION_TYPE value passed in the NotificationType parameter to the callback function is set to
            MibInitialNotification. This can only occur if the InitialNotification parameter passed to NotifyUnicastIpAddressChange was set
            to TRUE when registering for notifications.
            </term>
            </item>
            <item>
            <term>IN MIB_NOTIFICATION_TYPE NotificationType</term>
            <term>
            The notification type. This member can be one of the values from the MIB_NOTIFICATION_TYPE enumeration type defined in the
            Netioapi.h header file.
            </term>
            </item>
            </list>
            <para>
            The callback function specified in the Callback parameter must be implemented in the same process as the application calling the
            <c>NotifyUnicastIpAddressChange</c> function. If the callback function is in a separate DLL, then the DLL should be loaded before
            calling the <c>NotifyUnicastIpAddressChange</c> function to register for change notifications.
            </para>
            <para>
            When the callback function is received when a change occurs and the Row parameter is not <c>NULL</c>, the pointer to the
            MIB_UNICASTIPADDRESS_ROW structure passed in the Row parameter contains incomplete data. The information returned in the
            <c>MIB_UNICASTIPADDRESS_ROW</c> structure is only enough information that an application can call the GetUnicastIpAddressEntry
            function to query complete information on the IP address that changed. When the callback function is received, an application
            should allocate a <c>MIB_UNICASTIPADDRESS_ROW</c> structure and initialize it with the <c>Address</c>, <c>InterfaceLuid</c> and
            <c>InterfaceIndex</c> members in the <c>MIB_UNICASTIPADDRESS_ROW</c> structure pointed to by the Row parameter received. A
            pointer to this newly initialized <c>MIB_UNICASTIPADDRESS_ROW</c> structure should be passed to the
            <c>GetUnicastIpAddressEntry</c> function to retrieve complete information on the unicast IP address that was changed.
            </para>
            <para>
            The memory pointed to by the Row parameter used in the callback indications is managed by the operating system. An application
            that receives a notification should never attempt to free the memory pointed to by the Row parameter.
            </para>
            <para>
            Once the <c>NotifyUnicastIpAddressChange</c> function is called to register for change notifications, these notifications will
            continue to be sent until the application deregisters for change notifications or the application terminates. If the application
            terminates, the system will automatically deregister any registration for change notifications. It is still recommended that an
            application explicitly deregister for change notifications before it terminates.
            </para>
            <para>Any registration for change notifications does not persist if the system is shutdown or rebooted.</para>
            <para>
            To deregister for change notifications, call the CancelMibChangeNotify2 function passing the NotificationHandle parameter
            returned by <c>NotifyUnicastIpAddressChange</c>.
            </para>
            <para>
            An application cannot make a call to the CancelMibChangeNotify2 function from the context of the thread which is currently
            executing the notification callback function for the same NotificationHandle parameter. Otherwise, the thread executing that
            callback will result in deadlock. So the <c>CancelMibChangeNotify2</c> function must not be called directly as part of the
            notification callback routine. In a more general situation, a thread that executes the <c>CancelMibChangeNotify2</c> function
            cannot own a resource on which the thread that executes a notification callback operation would wait because it would result in a
            similar deadlock. The <c>CancelMibChangeNotify2</c> function should be called from a different thread, on which the thread that
            receives the notification callback doesn’t have dependencies on.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.ResolveIpNetEntry2(Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2@,System.IntPtr)">
            <summary>
            <para>The <c>ResolveIpNetEntry2</c> function resolves the physical address for a neighbor IP address entry on the local computer.</para>
            </summary>
            <param name="Row">
            <para>
            A pointer to a MIB_IPNET_ROW2 structure entry for a neighbor IP address entry. On successful return, this structure will be
            updated with the properties for neighbor IP address.
            </para>
            </param>
            <param name="SourceAddress">
            <para>
            A pointer to a an optional source IP address used to select the interface to send the requests on for the neighbor IP address entry.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_BAD_NET_NAME</term>
            <term>The network name cannot be found. This error is returned if the network with the neighbor IP address is unreachable.</term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Row parameter, the
            Address member of the MIB_IPNET_ROW2 pointed to by the Row parameter was not set to a valid IPv4 or IPv6 address, or both the
            InterfaceLuid or InterfaceIndex members of the MIB_IPNET_ROW2 pointed to by the Row parameter were unspecified. This error is
            also returned if a loopback address was passed in the Address member.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface specified by the InterfaceLuid or
            InterfaceIndex member of the MIB_IPNET_ROW2 pointed to by the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address was specified
            in the Address member of the MIB_IPNET_ROW2 pointed to by the Row parameter or no IPv6 stack is on the local computer and an IPv6
            address was specified in the Address member.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>ResolveIpNetEntry2</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>ResolveIpNetEntry2</c> function is used to resolve the physical address for a neighbor IP address entry on a local
            computer. This function flushes any existing neighbor entry that matches the IP address on the interface and then resolves the
            physical address (MAC) address by sending ARP requests for an IPv4 address or neighbor solicitation requests for an IPv6 address.
            If the SourceAddress parameter is specified, the <c>ResolveIpNetEntry2</c> function will select the interface with this source IP
            address to send the requests on. If the SourceAddress parameter is not specified (NULL was passed in this parameter), the
            <c>ResolveIpNetEntry2</c> function will automatically select the best interface to send the requests on.
            </para>
            <para>
            The <c>Address</c> member in the MIB_IPNET_ROW2 structure pointed to by the Row parameter must be initialized to a valid IPv4 or
            IPv6 address and family. In addition, at least one of the following members in the <c>MIB_IPNET_ROW2</c> structure pointed to the
            Row parameter must be initialized to the interface: the <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>
            If the IP address passed in the <c>Address</c> member of the MIB_IPNET_ROW2 pointed to by the Row parameter is a duplicate of an
            existing neighbor IP address on the interface, the <c>ResolveIpNetEntry2</c> function will flush the existing entry before
            resolving the IP address.
            </para>
            <para>
            On output when the call is successful, <c>ResolveIpNetEntry2</c> retrieves the other properties for the neighbor IP address and
            fills out the MIB_IPNET_ROW2 structure pointed to by the Row parameter. The <c>PhysicalAddress</c> and
            <c>PhysicalAddressLength</c> members in the <c>MIB_IPNET_ROW2</c> structure pointed to by the Row parameter will be initialized
            to a valid physical address.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.ResolveIpNetEntry2(Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2@,Vanara.PInvoke.Ws2_32.SOCKADDR_INET@)">
            <summary>
            <para>The <c>ResolveIpNetEntry2</c> function resolves the physical address for a neighbor IP address entry on the local computer.</para>
            </summary>
            <param name="Row">
            <para>
            A pointer to a MIB_IPNET_ROW2 structure entry for a neighbor IP address entry. On successful return, this structure will be
            updated with the properties for neighbor IP address.
            </para>
            </param>
            <param name="SourceAddress">
            <para>
            A pointer to a an optional source IP address used to select the interface to send the requests on for the neighbor IP address entry.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_BAD_NET_NAME</term>
            <term>The network name cannot be found. This error is returned if the network with the neighbor IP address is unreachable.</term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Row parameter, the
            Address member of the MIB_IPNET_ROW2 pointed to by the Row parameter was not set to a valid IPv4 or IPv6 address, or both the
            InterfaceLuid or InterfaceIndex members of the MIB_IPNET_ROW2 pointed to by the Row parameter were unspecified. This error is
            also returned if a loopback address was passed in the Address member.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface specified by the InterfaceLuid or
            InterfaceIndex member of the MIB_IPNET_ROW2 pointed to by the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address was specified
            in the Address member of the MIB_IPNET_ROW2 pointed to by the Row parameter or no IPv6 stack is on the local computer and an IPv6
            address was specified in the Address member.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>ResolveIpNetEntry2</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>ResolveIpNetEntry2</c> function is used to resolve the physical address for a neighbor IP address entry on a local
            computer. This function flushes any existing neighbor entry that matches the IP address on the interface and then resolves the
            physical address (MAC) address by sending ARP requests for an IPv4 address or neighbor solicitation requests for an IPv6 address.
            If the SourceAddress parameter is specified, the <c>ResolveIpNetEntry2</c> function will select the interface with this source IP
            address to send the requests on. If the SourceAddress parameter is not specified (NULL was passed in this parameter), the
            <c>ResolveIpNetEntry2</c> function will automatically select the best interface to send the requests on.
            </para>
            <para>
            The <c>Address</c> member in the MIB_IPNET_ROW2 structure pointed to by the Row parameter must be initialized to a valid IPv4 or
            IPv6 address and family. In addition, at least one of the following members in the <c>MIB_IPNET_ROW2</c> structure pointed to the
            Row parameter must be initialized to the interface: the <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>
            If the IP address passed in the <c>Address</c> member of the MIB_IPNET_ROW2 pointed to by the Row parameter is a duplicate of an
            existing neighbor IP address on the interface, the <c>ResolveIpNetEntry2</c> function will flush the existing entry before
            resolving the IP address.
            </para>
            <para>
            On output when the call is successful, <c>ResolveIpNetEntry2</c> retrieves the other properties for the neighbor IP address and
            fills out the MIB_IPNET_ROW2 structure pointed to by the Row parameter. The <c>PhysicalAddress</c> and
            <c>PhysicalAddressLength</c> members in the <c>MIB_IPNET_ROW2</c> structure pointed to by the Row parameter will be initialized
            to a valid physical address.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetCurrentThreadCompartmentId(System.UInt32)">
            <summary>
            <para>Reserved for future use. Do not use this function.</para>
            </summary>
            <param name="CompartmentId">
            <para>Reserved.</para>
            </param>
            <returns>
            <para>None</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetIpForwardEntry2(Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2@)">
            <summary>
            <para>The <c>SetIpForwardEntry2</c> function sets the properties of an IP route entry on the local computer.</para>
            </summary>
            <param name="Route">
            <para>
            A pointer to a MIB_IPFORWARD_ROW2 structure entry for an IP route entry. The <c>DestinationPrefix</c> member of the
            <c>MIB_IPFORWARD_ROW2</c> must be set to a valid IP destination prefix, the <c>NextHop</c> member of the
            <c>MIB_IPFORWARD_ROW2</c> must be set to a valid IP address family and IP address, and the <c>InterfaceLuid</c> or the
            <c>InterfaceIndex</c> member of the <c>MIB_IPFORWARD_ROW2</c> must be specified.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Route parameter, the
            DestinationPrefix member of the MIB_IPFORWARD_ROW2 pointed to by the Route parameter was not specified, the NextHop member of the
            MIB_IPFORWARD_ROW2 pointed to by the Route parameter was not specified, or both the InterfaceLuid or InterfaceIndex members of
            the MIB_IPFORWARD_ROW2 pointed to by the Route parameter were unspecified.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface specified by the InterfaceLuid or
            InterfaceIndex member of the MIB_IPFORWARD_ROW2 pointed to by the Route parameter could not be found.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>SetIpForwardEntry2</c> function is defined on Windows Vista and later.</para>
            <para>The <c>SetIpForwardEntry2</c> function is used to set the properties for an existing IP route entry on a local computer.</para>
            <para>
            The <c>DestinationPrefix</c> member in the MIB_IPFORWARD_ROW2 structure pointed to by the Route parameter must be initialized to
            a valid IP address prefix and family. The <c>NextHop</c> member in the <c>MIB_IPFORWARD_ROW2</c> structure pointed to by the
            Route parameter must be initialized to a valid IP address and family. In addition, at least one of the following members in the
            <c>MIB_IPFORWARD_ROW2</c> structure pointed to the Route parameter must be initialized to the interface: the <c>InterfaceLuid</c>
            or <c>InterfaceIndex</c>.
            </para>
            <para>
            The route metric offset specified in the <c>Metric</c> member of the MIB_IPFORWARD_ROW2 structure pointed to by Route parameter
            represents only part of the complete route metric. The complete metric is a combination of this route metric offset added to the
            interface metric specified in the <c>Metric</c> member of the MIB_IPINTERFACE_ROW structure of the associated interface. An
            application can retrieve the interface metric by calling the GetIpInterfaceEntry function.
            </para>
            <para>
            The <c>Age</c> and <c>Origin</c> members of the MIB_IPFORWARD_ROW2 structure pointed to by the Row are ignored when the
            <c>SetIpForwardEntry2</c> function is called. These members are set by the network stack and cannot be changed using the
            <c>SetIpForwardEntry2</c> function.
            </para>
            <para>
            The <c>SetIpForwardEntry2</c> function will fail if the <c>DestinationPrefix</c> and <c>NextHop</c> members of the
            MIB_IPFORWARD_ROW2 pointed to by the Route parameter do not match an IP route entry on the interface specified.
            </para>
            <para>
            The <c>SetIpForwardEntry2</c> function can only be called by a user logged on as a member of the Administrators group. If
            <c>SetIpForwardEntry2</c> is called by a user that is not a member of the Administrators group, the function call will fail and
            <c>ERROR_ACCESS_DENIED</c> is returned.
            </para>
            <para>
            The <c>SetIpForwardEntry2</c> function can also fail because of user account control (UAC) on Windows Vista and later. If an
            application that contains this function is executed by a user logged on as a member of the Administrators group other than the
            built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetIpInterfaceEntry(Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW@)">
            <summary>
            <para>The <c>SetIpInterfaceEntry</c> function sets the properties of an IP interface on the local computer.</para>
            </summary>
            <param name="Row">
            <para>
            A pointer to a MIB_IPINTERFACE_ROW structure entry for an interface. On input, the <c>Family</c> member of the
            <c>MIB_IPINTERFACE_ROW</c> must be set to <c>AF_INET6</c> or <c>AF_INET</c> and the <c>InterfaceLuid</c> or the
            <c>InterfaceIndex</c> member of the <c>MIB_IPINTERFACE_ROW</c> must be specified. On a successful return, the
            <c>InterfaceLuid</c> member of the <c>MIB_IPINTERFACE_ROW</c> is filled in if <c>InterfaceIndex</c> member of the
            <c>MIB_IPINTERFACE_ROW</c> entry was specified.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_FILE_NOT_FOUND</term>
            <term>
            The system cannot find the file specified. This error is returned if the network interface LUID or interface index specified by
            the InterfaceLuid or InterfaceIndex member of the MIB_IPINTERFACE_ROW pointed to by the Row parameter was not a value on the
            local machine.
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Row parameter, the
            Family member of the MIB_IPINTERFACE_ROW pointed to by the Row parameter was not specified as AF_INET or AF_INET6, or both the
            InterfaceLuid or InterfaceIndex members of the MIB_IPINTERFACE_ROW pointed to by the Row parameter were unspecified.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface specified by the InterfaceLuid or
            InterfaceIndex member of the MIB_IPINTERFACE_ROW pointed to by the Row parameter does not match the IP address family specified
            in the Family member in the MIB_IPINTERFACE_ROW structure.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>SetIpInterfaceEntry</c> function is defined on Windows Vista and later.</para>
            <para>The <c>SetIpInterfaceEntry</c> function can is used to modify an existing IP interface entry.</para>
            <para>
            On input, the <c>Family</c> member in the MIB_IPINTERFACE_ROW structure pointed to by the Row parameter must be initialized to
            either <c>AF_INET</c> or <c>AF_INET6</c>. In addition on input, at least one of the following members in the
            <c>MIB_IPINTERFACE_ROW</c> structure pointed to the Row parameter must be initialized: the <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>
            On output, the <c>InterfaceLuid</c> member of the MIB_IPINTERFACE_ROW structure pointed to by the Row parameter is filled in if
            the <c>InterfaceIndex</c> was specified.
            </para>
            <para>
            The <c>MaxReassemblySize</c>, <c>MinRouterAdvertisementInterval</c>, <c>MaxRouterAdvertisementInterval</c>, <c>Connected</c>,
            <c>SupportsWakeUpPatterns</c>, <c>SupportsNeighborDiscovery</c>, <c>SupportsRouterDiscovery</c>, <c>ReachableTime</c>,
            <c>TransmitOffload</c>, and <c>ReceiveOffload</c> members of the MIB_IPINTERFACE_ROW structure pointed to by the Row are ignored
            when the <c>SetIpInterfaceEntry</c> function is called. These members are set by the network stack and cannot be changed using
            the <c>SetIpInterfaceEntry</c> function.
            </para>
            <para>
            An application would typically call the GetIpInterfaceTable function to retrieve the IP interface entries on the local computer
            or call the GetIpInterfaceEntry function to retrieve just the IP interface entry to modify. The MIB_IPINTERFACE_ROW structure for
            the specific IP interface entry could then be modified and a pointer to this structure passed to the <c>SetIpInterfaceEntry</c>
            function in the Row parameter. However for IPv4, an application must not try to modify the <c>SitePrefixLength</c> member of the
            <c>MIB_IPINTERFACE_ROW</c> structure. For IPv4, the <c>SitePrefixLength</c> member must be set to 0.
            </para>
            <para>
            Another possible method to modify an existing IP interface entry is to use InitializeIpInterfaceEntry function to initialize the
            fields of a MIB_IPINTERFACE_ROW structure entry with default values. Then set the <c>Family</c> member and either the
            <c>InterfaceIndex</c> or <c>InterfaceLuid</c> members in the <c>MIB_IPINTERFACE_ROW</c> structure pointed to by the Row parameter
            to match the IP interface to change. An application can then change the fields in the <c>MIB_IPINTERFACE_ROW</c> entry it wishes
            to modify, and then call the <c>SetIpInterfaceEntry</c> function. However for IPv4, an application must not try to modify the
            <c>SitePrefixLength</c> member of the <c>MIB_IPINTERFACE_ROW</c> structure. For IPv4, the <c>SitePrefixLength</c> member must be
            set to 0. Caution must be used with this approach because the only way to determine all of the fields being changed would be to
            compare the fields in the <c>MIB_IPINTERFACE_ROW</c> of the specific IP interface entry with fields set by the
            <c>InitializeIpInterfaceEntry</c> function when a <c>MIB_IPINTERFACE_ROW</c> is initialized to default values.
            </para>
            <para>
            Unprivileged simultaneous access to multiple networks of different security requirements creates a security hole and allows an
            unprivileged application to accidentally relay data between the two networks. A typical example is simultaneous access to a
            virtual private network (VPN) and the Internet. Windows Server 2003 and Windows XP use a weak host model, where RAS prevents such
            simultaneous access by increasing the route metric of all default routes over other interfaces. Thus all traffic is routed
            through the VPN interface, disrupting other network connectivity.
            </para>
            <para>
            On Windows Vista and later, a strong host model is used by default. If a source IP address is specified in the route lookup using
            GetBestRoute2 or GetBestRoute, the route lookup is restricted to the interface of the source IP address. The route metric
            modification by RAS has no effect as the list of potential routes does not even have the route for the VPN interface thereby
            allowing traffic to the Internet. The <c>DisableDefaultRoutes</c> member of the MIB_IPINTERFACE_ROW can be used to disable using
            the default route on an interface. This member can be used as a security measure by VPN clients to restrict split tunneling when
            split tunneling is not required by the VPN client. A VPN client can call the <c>SetIpInterfaceEntry</c> function to set the
            <c>DisableDefaultRoutes</c> member to <c>TRUE</c> when required. A VPN client can query the current state of the
            <c>DisableDefaultRoutes</c> member by calling the GetIpInterfaceEntry function.
            </para>
            <para>The</para>
            <para>
            The <c>SetIpInterfaceEntry</c> function can only be called by a user logged on as a member of the Administrators group. If
            <c>SetIpInterfaceEntry</c> is called by a user that is not a member of the Administrators group, the function call will fail and
            <c>ERROR_ACCESS_DENIED</c> is returned. This function can also fail because of user account control (UAC) on Windows Vista and
            later. If an application that contains this function is executed by a user logged on as a member of the Administrators group
            other than the built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetIpNetEntry2(Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2@)">
            <summary>
            <para>The <c>SetIpNetEntry2</c> function sets the physical address of an existing neighbor IP address entry on the local computer.</para>
            </summary>
            <param name="Row">
            <para>A pointer to a MIB_IPNET_ROW2 structure entry for a neighbor IP address entry.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Row parameter, the
            Address member of the MIB_IPNET_ROW2 pointed to by the Row parameter was not set to a valid unicast, anycast, or multicast IPv4
            or IPv6 address, the PhysicalAddress and PhysicalAddressLength members of the MIB_IPNET_ROW2 pointed to by the Row parameter were
            not set to a valid physical address, or both the InterfaceLuid or InterfaceIndex members of the MIB_IPNET_ROW2 pointed to by the
            Row parameter were unspecified. This error is also returned if a loopback address was passed in the Address member.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface specified by the InterfaceLuid or
            InterfaceIndex member of the MIB_IPNET_ROW2 pointed to by the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address was specified
            in the Address member of the MIB_IPNET_ROW2 pointed to by the Row parameter or no IPv6 stack is on the local computer and an IPv6
            address was specified in the Address member.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The <c>SetIpNetEntry2</c> function is defined on Windows Vista and later.</para>
            <para>
            The <c>SetIpNetEntry2</c> function is used to set the physical address for an existing neighbor IP address entry on a local computer.
            </para>
            <para>
            The <c>Address</c> member in the MIB_IPNET_ROW2 structure pointed to by the Row parameter must be initialized to a valid unicast,
            anycast, or multicast IPv4 or IPv6 address and family. The <c>PhysicalAddress</c> and <c>PhysicalAddressLength</c> members in the
            <c>MIB_IPNET_ROW2</c> structure pointed to by the Row parameter must be initialized to a valid physical address. In addition, at
            least one of the following members in the <c>MIB_IPNET_ROW2</c> structure pointed to the Row parameter must be initialized to the
            interface: the <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>
            The <c>SetIpNetEntry2</c> function will fail if the IP address passed in the <c>Address</c> member of the MIB_IPNET_ROW2 pointed
            to by the Row parameter is not an existing neighbor IP address on the interface specified.
            </para>
            <para>
            The <c>SetIpNetEntry2</c> function can only be called by a user logged on as a member of the Administrators group. If
            <c>SetIpNetEntry2</c> is called by a user that is not a member of the Administrators group, the function call will fail and
            <c>ERROR_ACCESS_DENIED</c> is returned.
            </para>
            <para>
            The <c>SetIpNetEntry2</c> function can also fail because of user account control (UAC) on Windows Vista and later. If an
            application that contains this function is executed by a user logged on as a member of the Administrators group other than the
            built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetNetworkInformation(System.Guid@,System.UInt32,System.String)">
            <summary>
            <para>Reserved for future use. Do not use this function.</para>
            </summary>
            <param name="NetworkGuid">
            <para>Reserved.</para>
            </param>
            <param name="CompartmentId">
            <para>Reserved.</para>
            </param>
            <param name="NetworkName">
            <para>Reserved.</para>
            </param>
            <returns>
            <para>None</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetSessionCompartmentId(System.UInt32,System.UInt32)">
            <summary>
            <para>Reserved for future use. Do not use this function.</para>
            </summary>
            <param name="SessionId">
            <para>Reserved.</para>
            </param>
            <param name="CompartmentId">
            <para>Reserved.</para>
            </param>
            <returns>
            <para>None</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SetUnicastIpAddressEntry(Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW@)">
            <summary>
            <para>The SetUnicastIpAddressEntry function sets the properties of an existing unicast IP address entry on the local computer.</para>
            </summary>
            <param name="Row">
            <para>A pointer to a MIB_UNICASTIPADDRESS_ROW structure entry for an existing unicast IP address entry.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is NO_ERROR.</para>
            <para>If the function fails, the return value is one of the following error codes.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ERROR_ACCESS_DENIED</term>
            <term>
            Access is denied. This error is returned under several conditions that include the following: the user lacks the required
            administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in
            Administrator (RunAs administrator).
            </term>
            </item>
            <item>
            <term>ERROR_INVALID_PARAMETER</term>
            <term>
            An invalid parameter was passed to the function. This error is returned if a NULL pointer is passed in the Row parameter, the
            Address member of the MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter was not set to a valid unicast IPv4 or IPv6
            address, or both the InterfaceLuid or InterfaceIndex members of the MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter were
            unspecified. This error is also returned for other errors in the values set for members in the MIB_UNICASTIPADDRESS_ROW
            structure. These errors include the following: if the ValidLifetime member is less than the PreferredLifetime member, if the
            PrefixOrigin member is set to IpPrefixOriginUnchanged and the SuffixOrigin is the not set to IpSuffixOriginUnchanged, if the
            PrefixOrigin member is not set to IpPrefixOriginUnchanged and the SuffixOrigin is set to IpSuffixOriginUnchanged, if the
            PrefixOrigin member is not set to a value from the NL_PREFIX_ORIGIN enumeration, if the SuffixOrigin member is not set to a value
            from the NL_SUFFIX_ORIGIN enumeration, or if the OnLinkPrefixLength member is set to a value greater than the IP address length,
            in bits (32 for an unicast IPv4 address or 128 for an unicast IPv6 address).
            </term>
            </item>
            <item>
            <term>ERROR_NOT_FOUND</term>
            <term>
            The specified interface could not be found. This error is returned if the network interface specified by the InterfaceLuid or
            InterfaceIndex member of the MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter could not be found.
            </term>
            </item>
            <item>
            <term>ERROR_NOT_SUPPORTED</term>
            <term>
            The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address was specified
            in the Address member MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter or no IPv6 stack is on the local computer and an
            IPv6 address was specified in the Address member.
            </term>
            </item>
            <item>
            <term>Other</term>
            <term>Use FormatMessage to obtain the message string for the returned error.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>The SetUnicastIpAddressEntry function is defined on Windows Vista and later.</para>
            <para>
            The GetUnicastIpAddressEntry function is normally used to retrieve an existing MIB_UNICASTIPADDRESS_ROW structure entry to be
            modified. An application can then change the members in the <c>MIB_UNICASTIPADDRESS_ROW</c> entry it wishes to modify, and then
            call the SetUnicastIpAddressEntry function.
            </para>
            <para>
            An application may call the InitializeUnicastIpAddressEntry function to initialize the members of a MIB_UNICASTIPADDRESS_ROW
            structure entry with default values before making changes. However, the application would normally save either the
            <c>InterfaceLuid</c> or <c>InterfaceIndex</c> member before calling <c>InitializeUnicastIpAddressEntry</c> and restore one of
            these members after the call.
            </para>
            <para>
            The <c>Address</c> member in the MIB_UNICASTIPADDRESS_ROW structure pointed to by the Row parameter must be initialized to a
            valid unicast IPv4 or IPv6 address and family. In addition, at least one of the following members in the
            <c>MIB_UNICASTIPADDRESS_ROW</c> structure pointed to the Row parameter must be initialized: the <c>InterfaceLuid</c> or <c>InterfaceIndex</c>.
            </para>
            <para>
            If the <c>OnLinkPrefixLength</c> member of the MIB_UNICASTIPADDRESS_ROW pointed to by the Row parameter is set to 255, then
            SetUnicastIpAddressEntry will set the unicast IP address properties so that the <c>OnLinkPrefixLength</c> member is equal to the
            length of the IP address. So for a unicast IPv4 address, the <c>OnLinkPrefixLength</c> is set to 32 and the
            <c>OnLinkPrefixLength</c> is set to 128 for a unicast IPv6 address. If this would result in the incorrect subnet mask for an IPv4
            address or the incorrect link prefix for an IPv6 address, then the application should set this member to the correct value before
            calling <c>SetUnicastIpAddressEntry</c>.
            </para>
            <para>
            The <c>DadState</c>, <c>ScopeId</c>, and <c>CreationTimeStamp</c> members of the MIB_UNICASTIPADDRESS_ROW structure pointed to by
            the Row are ignored when the SetUnicastIpAddressEntry function is called. These members are set by the network stack and cannot
            be changed using the <c>SetUnicastIpAddressEntry</c> function. The <c>ScopeId</c> member is automatically determined by the
            interface on which the address was added.
            </para>
            <para>
            The SetUnicastIpAddressEntry function can only be called by a user logged on as a member of the Administrators group. If
            <c>SetUnicastIpAddressEntry</c> is called by a user that is not a member of the Administrators group, the function call will fail
            and <c>ERROR_ACCESS_DENIED</c> is returned.
            </para>
            <para>
            The SetUnicastIpAddressEntry function can also fail because of user account control (UAC) on Windows Vista and later. If an
            application that contains this function is executed by a user logged on as a member of the Administrators group other than the
            built-in Administrator, this call will fail unless the application has been marked in the manifest file with a
            <c>requestedExecutionLevel</c> set to requireAdministrator. If the application lacks this manifest file, a user logged on as a
            member of the Administrators group other than the built-in Administrator must then be executing the application in an enhanced
            shell as the built-in Administrator (RunAs administrator) for this function to succeed.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.IP_ADDRESS_PREFIX">
            <summary>
            <para>The <c>IP_ADDRESS_PREFIX</c> structure stores an IP address prefix.</para>
            </summary>
            <remarks>
            <para>The <c>IP_ADDRESS_PREFIX</c> structure is defined on Windows Vista and later.</para>
            <para>
            The <c>IP_ADDRESS_PREFIX</c> structure is the data type of the <c>DestinationPrefix</c> member in the MIB_IPFORWARD_ROW2
            structure. A number of functions use the <c>MIB_IPFORWARD_ROW2</c> structure including CreateIpForwardEntry2,
            DeleteIpForwardEntry2, GetBestRoute2, GetIpForwardEntry2, GetIpForwardTable2, InitializeIpForwardEntry, NotifyRouteChange2, and SetIpForwardEntry2.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADDRESS_PREFIX.Prefix">
            <summary>
            <para>The prefix or network part of IP the address represented as an IP address.</para>
            <para>The SOCKADDR_INET union is defined in the Ws2ipdef.h header.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.IP_ADDRESS_PREFIX.PrefixLength">
            <summary>
            The length, in bits, of the prefix or network part of the IP address. For a unicast IPv4 address, any value greater than 32
            is an illegal value. For a unicast IPv6 address, any value greater than 128 is an illegal value. A value of 255 is commonly
            used to represent an illegal value.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADDRESS_PREFIX.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_INET,System.Byte)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.IP_ADDRESS_PREFIX"/> struct.</summary>
            <param name="prefix">The prefix or network part of IP the address represented as an IP address.</param>
            <param name="prefixLength">The length, in bits, of the prefix or network part of the IP address.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.IP_ADDRESS_PREFIX.Equals(Vanara.PInvoke.IpHlpApi.IP_ADDRESS_PREFIX)">
            <summary>Determines whether the specified value is equal to this instance.</summary>
            <param name="other">The value to compare with this instance.</param>
            <returns><see langword="true"/> if the specified value is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW">
            <summary>
            <para>The <c>MIB_ANYCASTIPADDRESS_ROW</c> structure stores information about an anycast IP address.</para>
            </summary>
            <remarks>
            <para>The <c>MIB_ANYCASTIPADDRESS_ROW</c> structure is defined on Windows Vista and later.</para>
            <para>
            Note that the Netioapi.h header file is automatically included in the Iphlpapi.h header file. The Netioapi.h header file should
            never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW.Address">
            <summary>The anycast IP address. This member can be an IPv6 address or an IPv4 address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW.InterfaceLuid">
            <summary>The locally unique identifier (LUID) for the network interface associated with this IP address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW.InterfaceIndex">
            <summary>
            The local index value for the network interface associated with this IP address. This index value may change when a network
            adapter is disabled and then enabled, or under other circumstances, and should not be considered persistent.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW.ScopeId">
            <summary>
            The scope ID of the anycast IP address. This member is applicable only to an IPv6 address. This member cannot be set. It is
            automatically determined by the interface on which the address was added.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN,Vanara.PInvoke.IpHlpApi.NET_LUID)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW"/> struct.</summary>
            <param name="ipv4">The ipv4 address.</param>
            <param name="interfaceLuid">The interface luid.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN,System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW"/> struct.</summary>
            <param name="ipv4">The ipv4 address.</param>
            <param name="interfaceIndex">Index of the interface.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN6,Vanara.PInvoke.IpHlpApi.NET_LUID)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW"/> struct.</summary>
            <param name="ipv6">The ipv6 address.</param>
            <param name="interfaceLuid">The interface luid.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN6,System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW"/> struct.</summary>
            <param name="ipv6">The ipv6 address.</param>
            <param name="interfaceIndex">Index of the interface.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW.Equals(Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_ROW)">
            <summary>Determines whether the specified value is equal to this instance.</summary>
            <param name="other">The value to compare with this instance.</param>
            <returns><see langword="true"/> if the specified value is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2">
            <summary>
            <para>The <c>MIB_IF_ROW2</c> structure stores information about a particular interface.</para>
            </summary>
            <remarks>
            <para>The <c>MIB_IF_ROW2</c> structure is defined on Windows Vista and later.</para>
            <para>
            The values for the <c>Type</c> field are defined in the Ipifcons.h header file. Only the possible values listed in the
            description of the <c>Type</c> member are currently supported.
            </para>
            <para>
            Note that the Netioapi.h header file is automatically included in the Iphlpapi.h header file. The Netioapi.h header file should
            never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.InterfaceLuid">
            <summary>The locally unique identifier (LUID) for the network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.InterfaceIndex">
            <summary>
            The index that identifies the network interface. This index value may change when a network adapter is disabled and then
            enabled, and should not be considered persistent.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.InterfaceGuid">
            <summary>The GUID for the network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.Alias">
            <summary>A NULL-terminated Unicode string that contains the alias name of the network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.Description">
            <summary>A NULL-terminated Unicode string that contains a description of the network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.physicalAddressLength">
            <summary>The length, in bytes, of the physical hardware address specified by the PhysicalAddress member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.PhysicalAddress">
            <summary>The physical hardware address of the adapter for this network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.PermanentPhysicalAddress">
            <summary>The permanent physical hardware address of the adapter for this network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.Mtu">
            <summary>The maximum transmission unit (MTU) size, in bytes, for this network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.Type">
            <summary>
            The interface type as defined by the Internet Assigned Names Authority (IANA). For more information, see
            http://www.iana.org/assignments/ianaiftype-mib. Possible values for the interface type are listed in the Ipifcons.h header file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.TunnelType">
            <summary>
            The encapsulation method used by a tunnel if the Type member is IF_TYPE_TUNNEL. The tunnel type is defined by the Internet
            Assigned Names Authority (IANA). For more information, see http://www.iana.org/assignments/ianaiftype-mib. This member can be
            one of the values from the TUNNEL_TYPE enumeration type defined in the Ifdef.h header file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.MediaType">
            <summary>
            The NDIS media type for the interface. This member can be one of the values from the NDIS_MEDIUM enumeration type defined in
            the Ntddndis.h header file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.PhysicalMediumType">
            <summary>
            The NDIS physical medium type. This member can be one of the values from the NDIS_PHYSICAL_MEDIUM enumeration type defined in
            the Ntddndis.h header file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.AccessType">
            <summary>
            The interface access type. This member can be one of the values from the NET_IF_ACCESS_TYPE enumeration type defined in the
            Ifdef.h header file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.DirectionType">
            <summary>
            The interface direction type. This member can be one of the values from the NET_IF_DIRECTION_TYPE enumeration type defined in
            the Ifdef.h header file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.InterfaceAndOperStatusFlags">
            <summary>
            A set of flags that provide information about the interface. These flags are combined with a bitwise OR operation. If none of
            the flags applies, then this member is set to zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.OperStatus">
            <summary>
            The operational status for the interface as defined in RFC 2863 as IfOperStatus. For more information, see
            http://www.ietf.org/rfc/rfc2863.txt. This member can be one of the values from the IF_OPER_STATUS enumeration type defined in
            the Ifdef.h header file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.AdminStatus">
            <summary>
            The administrative status for the interface as defined in RFC 2863. For more information, see
            http://www.ietf.org/rfc/rfc2863.txt. This member can be one of the values from the NET_IF_ADMIN_STATUS enumeration type
            defined in the Ifdef.h header file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.MediaConnectState">
            <summary>
            The connection state of the interface. This member can be one of the values from the NET_IF_MEDIA_CONNECT_STATE enumeration
            type defined in the Ifdef.h header file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.NetworkGuid">
            <summary>The GUID that is associated with the network that the interface belongs to.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.ConnectionType">
            <summary>
            The NDIS network interface connection type. This member can be one of the values from the NET_IF_CONNECTION_TYPE enumeration
            type defined in the Ifdef.h header file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.TransmitLinkSpeed">
            <summary>The speed in bits per second of the transmit link.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.ReceiveLinkSpeed">
            <summary>The speed in bits per second of the receive link.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.InOctets">
            <summary>
            The number of octets of data received without errors through this interface. This value includes octets in unicast,
            broadcast, and multicast packets.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.InUcastPkts">
            <summary>The number of unicast packets received without errors through this interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.InNUcastPkts">
            <summary>
            The number of non-unicast packets received without errors through this interface. This value includes broadcast and multicast packets.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.InDiscards">
            <summary>
            The number of inbound packets which were chosen to be discarded even though no errors were detected to prevent the packets
            from being deliverable to a higher-layer protocol.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.InErrors">
            <summary>The number of incoming packets that were discarded because of errors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.InUnknownProtos">
            <summary>The number of incoming packets that were discarded because the protocol was unknown.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.InUcastOctets">
            <summary>The number of octets of data received without errors in unicast packets through this interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.InMulticastOctets">
            <summary>The number of octets of data received without errors in multicast packets through this interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.InBroadcastOctets">
            <summary>The number of octets of data received without errors in broadcast packets through this interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.OutOctets">
            <summary>
            The number of octets of data transmitted without errors through this interface. This value includes octets in unicast,
            broadcast, and multicast packets.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.OutUcastPkts">
            <summary>The number of unicast packets transmitted without errors through this interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.OutNUcastPkts">
            <summary>
            The number of non-unicast packets transmitted without errors through this interface. This value includes broadcast and
            multicast packets.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.OutDiscards">
            <summary>The number of outgoing packets that were discarded even though they did not have errors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.OutErrors">
            <summary>The number of outgoing packets that were discarded because of errors.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.OutUcastOctets">
            <summary>The number of octets of data transmitted without errors in unicast packets through this interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.OutMulticastOctets">
            <summary>The number of octets of data transmitted without errors in multicast packets through this interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.OutBroadcastOctets">
            <summary>The number of octets of data transmitted without errors in broadcast packets through this interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.OutQLen">
            <summary>The transmit queue length. This field is not currently used.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2"/> struct.</summary>
            <param name="interfaceIndex">Index of the interface.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2.#ctor(Vanara.PInvoke.IpHlpApi.NET_LUID)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IF_ROW2"/> struct.</summary>
            <param name="interfaceLuid">The interface luid.</param>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IFSTACK_ROW">
            <summary>The MIB_IFSTACK_ROW structure represents the relationship between two network interfaces.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFSTACK_ROW.HigherLayerInterfaceIndex">
            <summary>The network interface index for the interface that is higher in the interface stack table.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IFSTACK_ROW.LowerLayerInterfaceIndex">
            <summary>The network interface index for the interface that is lower in the interface stack table.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_INVERTEDIFSTACK_ROW">
            <summary>The MIB_INVERTEDIFSTACK_ROW structure represents the relationship between two network interfaces.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_INVERTEDIFSTACK_ROW.LowerLayerInterfaceIndex">
            <summary>The network interface index for the interface that is lower in the interface stack table.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_INVERTEDIFSTACK_ROW.HigherLayerInterfaceIndex">
            <summary>The network interface index for the interface that is higher in the interface stack table.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES">
            <summary>
            <para>
            The <c>MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES</c> structure contains read-only information for the bandwidth estimates
            computed by the TCP/IP stack for a network connection.
            </para>
            </summary>
            <remarks>
            <para>
            The <c>MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES</c> structure provides bandwidth estimates computed by the TCP/IP stack for
            a network connection. These bandwidth estimates are for the point of attachment of the host system to the underlying IP network.
            </para>
            <para>
            The <c>MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES</c> structure is used with the GetIpNetworkConnectionBandwidthEstimates
            function to return bandwidth estimates obtained for the point of attachment to the IP network. It is possible to have asymmetric
            deployments and network conditions where the estimates observed inbound and outbound differ from each other.
            </para>
            <para>
            The <c>MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES</c> structure is defined in the Netioapi.h header file which is
            automatically included in the Iphlpapi.h header file. The Netioapi.h header file should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES.InboundBandwidthInformation">
            <summary>
            <para>Bandwidth estimates for the data being received by the host from the IP network.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES.OutboundBandwidthInformation">
            <summary>
            <para>Bandwidth estimates for the data being sent from the host to the IP network.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2">
            <summary>
            <para>The <c>MIB_IPFORWARD_ROW2</c> structure stores information about an IP route entry.</para>
            </summary>
            <remarks>
            <para>The <c>MIB_IPFORWARD_ROW2</c> structure is defined on Windows Vista and later.</para>
            <para>
            The <c>GetIpForwardTable2</c> function enumerates the IP route entries on a local system and returns this information in a
            MIB_IPFORWARD_TABLE2 structure as an array of <c>MIB_IPFORWARD_ROW2</c> entries.
            </para>
            <para>
            The <c>GetIpForwardEntry2</c> function retrieves a single IP route entry and returns this information in a
            <c>MIB_IPFORWARD_ROW2</c> structure.
            </para>
            <para>
            An entry with the <c>Prefix</c> and the <c>PrefixLength</c> members of the IP_ADDRESS_PREFIX set to zero in the
            <c>DestinationPrefix</c> member in the <c>MIB_IPFORWARD_ROW2</c> structure is considered a default route. The
            MIB_IPFORWARD_TABLE2 may contain multiple <c>MIB_IPFORWARD_ROW2</c> entries with the <c>Prefix</c> and the <c>PrefixLength</c>
            members of the <c>IP_ADDRESS_PREFIX</c> set to zero in the <c>DestinationPrefix</c> member when there are multiple network
            adapters installed.
            </para>
            <para>
            The <c>Metric</c> member of a <c>MIB_IPFORWARD_ROW2</c> entry is a value that is assigned to an IP route for a particular network
            interface that identifies the cost that is associated with using that route. For example, the metric can be valued in terms of
            link speed, hop count, or time delay. Automatic metric is a feature on Windows XP and later that automatically configures the
            metric for the local routes that are based on link speed. The automatic metric feature is enabled by default (the
            <c>UseAutomaticMetric</c> member of the MIB_IPINTERFACE_ROW structure is set to <c>TRUE</c>) on Windows XP and later. It can also
            be manually configured to assign a specific metric to an IP route.
            </para>
            <para>
            The route metric specified in the <c>Metric</c> member of the <c>MIB_IPFORWARD_ROW2</c> structure represents just the route
            metric offset. The complete metric is a combination of this route metric offset added to the interface metric specified in the
            <c>Metric</c> member of the MIB_IPINTERFACE_ROW structure of the associated interface. An application can retrieve the interface
            metric by calling the GetIpInterfaceEntry function.
            </para>
            <para>
            Note that the Netioapi.h header file is automatically included in the Iphlpapi.h header file. The Netioapi.h header file should
            never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.InterfaceLuid">
            <summary>
            <para>Type: <c>NET_LUID</c></para>
            <para>The locally unique identifier (LUID) for the network interface associated with this IP route entry.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.InterfaceIndex">
            <summary>
            <para>Type: <c>NET_IFINDEX</c></para>
            <para>
            The local index value for the network interface associated with this IP route entry. This index value may change when a
            network adapter is disabled and then enabled, or under other circumstances, and should not be considered persistent.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.DestinationPrefix">
            <summary>
            <para>Type: <c>IP_ADDRESS_PREFIX</c></para>
            <para>The IP address prefix for the destination IP address for this route.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.NextHop">
            <summary>
            <para>Type: <c>SOCKADDR_INET</c></para>
            <para>
            For a remote route, the IP address of the next system or gateway en route. If the route is to a local loopback address or an
            IP address on the local link, the next hop is unspecified (all zeros). For a local loopback route, this member should be an
            IPv4 address of 0.0.0.0 for an IPv4 route entry or an IPv6 address of 0::0 for an IPv6 route entry.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.SitePrefixLength">
            <summary>
            <para>Type: <c>UCHAR</c></para>
            <para>
            The length, in bits, of the site prefix or network part of the IP address for this route. For an IPv4 route entry, any value
            greater than 32 is an illegal value. For an IPv6 route entry, any value greater than 128 is an illegal value. A value of 255
            is commonly used to represent an illegal value.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.ValidLifetime">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The maximum time, in seconds, that the IP route entry is valid. A value of 0xffffffff is considered to be infinite.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.PreferredLifetime">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The preferred time, in seconds, that the IP route entry is valid. A value of 0xffffffff is considered to be infinite.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.Metric">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The route metric offset value for this IP route entry. Note the actual route metric used to compute the route preference is
            the summation of interface metric specified in the <c>Metric</c> member of the MIB_IPINTERFACE_ROW structure and the route
            metric offset specified in this member. The semantics of this metric are determined by the routing protocol specified in the
            <c>Protocol</c> member. If this metric is not used, its value should be set to -1. This value is documented in RFC 4292. For
            more information, see http://www.ietf.org/rfc/rfc4292.txt.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.Protocol">
            <summary>
            <para>Type: <c>NL_ROUTE_PROTOCOL</c></para>
            <para>
            The routing mechanism how this IP route was added. This member can be one of the values from the <c>NL_ROUTE_PROTOCOL</c>
            enumeration type defined in the Nldef.h header file. The member is described in RFC 4292. For more information, see http://www.ietf.org/rfc/rfc4292.txt.
            </para>
            <para>
            Note that the Nldef.h header is automatically included by the Ipmib.h header file which is automatically included by the
            Iprtrmib.h header. The Iphlpapi.h header automatically includes the Iprtrmib.h header file. The Iprtrmib.h, Ipmib.h, and
            Nldef.h header files should never be used directly.
            </para>
            <para>The following list shows the possible values for this member.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MIB_IPPROTO_OTHER 1</term>
            <term>The routing mechanism was not specified.</term>
            </item>
            <item>
            <term>MIB_IPPROTO_LOCAL 2</term>
            <term>A local interface.</term>
            </item>
            <item>
            <term>MIB_IPPROTO_NETMGMT 3</term>
            <term>
            A static route. This value is used to identify route information for IP routing set through network management such as the
            Dynamic Host Configuration Protocol (DCHP), the Simple Network Management Protocol (SNMP), or by calls to the
            CreateIpForwardEntry2, DeleteIpForwardEntry2, or SetIpForwardEntry2 functions.
            </term>
            </item>
            <item>
            <term>MIB_IPPROTO_ICMP 4</term>
            <term>The result of an ICMP redirect.</term>
            </item>
            <item>
            <term>MIB_IPPROTO_EGP 5</term>
            <term>The Exterior Gateway Protocol (EGP), a dynamic routing protocol.</term>
            </item>
            <item>
            <term>MIB_IPPROTO_GGP 6</term>
            <term>The Gateway-to-Gateway Protocol (GGP), a dynamic routing protocol.</term>
            </item>
            <item>
            <term>MIB_IPPROTO_HELLO 7</term>
            <term>
            The Hellospeak protocol, a dynamic routing protocol. This is a historical entry no longer in use and was an early routing
            protocol used by the original ARPANET routers that ran special software called the Fuzzball routing protocol, sometimes
            called Hellospeak, as described in RFC 891 and RFC 1305. For more information, see http://www.ietf.org/rfc/rfc891.txt and http://www.ietf.org/rfc/rfc1305.txt.
            </term>
            </item>
            <item>
            <term>MIB_IPPROTO_RIP 8</term>
            <term>The Berkeley Routing Information Protocol (RIP) or RIP-II, a dynamic routing protocol.</term>
            </item>
            <item>
            <term>MIB_IPPROTO_IS_IS 9</term>
            <term>
            The Intermediate System-to-Intermediate System (IS-IS) protocol, a dynamic routing protocol. The IS-IS protocol was developed
            for use in the Open Systems Interconnection (OSI) protocol suite.
            </term>
            </item>
            <item>
            <term>MIB_IPPROTO_ES_IS 10</term>
            <term>
            The End System-to-Intermediate System (ES-IS) protocol, a dynamic routing protocol. The ES-IS protocol was developed for use
            in the Open Systems Interconnection (OSI) protocol suite.
            </term>
            </item>
            <item>
            <term>MIB_IPPROTO_CISCO 11</term>
            <term>The Cisco Interior Gateway Routing Protocol (IGRP), a dynamic routing protocol.</term>
            </item>
            <item>
            <term>MIB_IPPROTO_BBN 12</term>
            <term>
            The Bolt, Beranek, and Newman (BBN) Interior Gateway Protocol (IGP) that used the Shortest Path First (SPF) algorithm. This
            was an early dynamic routing protocol.
            </term>
            </item>
            <item>
            <term>MIB_IPPROTO_OSPF 13</term>
            <term>The Open Shortest Path First (OSPF) protocol, a dynamic routing protocol.</term>
            </item>
            <item>
            <term>MIB_IPPROTO_BGP 14</term>
            <term>The Border Gateway Protocol (BGP), a dynamic routing protocol.</term>
            </item>
            <item>
            <term>MIB_IPPROTO_NT_AUTOSTATIC 10002</term>
            <term>A Windows specific entry added originally by a routing protocol, but which is now static.</term>
            </item>
            <item>
            <term>MIB_IPPROTO_NT_STATIC 10006</term>
            <term>A Windows specific entry added as a static route from the routing user interface or a routing command.</term>
            </item>
            <item>
            <term>MIB_IPPROTO_NT_STATIC_NON_DOD 10007</term>
            <term>
            A Windows specific entry added as an static route from the routing user interface or a routing command, except these routes
            do not cause Dial On Demand (DOD).
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.Loopback">
            <summary>
            <para>Type: <c>BOOLEAN</c></para>
            <para>A value that specifies if the route is a loopback route (the gateway is on the local host).</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.AutoconfigureAddress">
            <summary>
            <para>Type: <c>BOOLEAN</c></para>
            <para>A value that specifies if the IP address is auto-configured.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.Publish">
            <summary>
            <para>Type: <c>BOOLEAN</c></para>
            <para>A value that specifies if the route is published.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.Immortal">
            <summary>
            <para>Type: <c>BOOLEAN</c></para>
            <para>A value that specifies if the route is immortal.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.Age">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of seconds since the route was added or modified in the network routing table.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.Origin">
            <summary>
            <para>Type: <c>NL_ROUTE_ORIGIN</c></para>
            <para>
            The origin of the route. This member can be one of the values from the <c>NL_ROUTE_ORIGIN</c> enumeration type defined in the
            Nldef.h header file.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NlroManual 0</term>
            <term>A result of manual configuration.</term>
            </item>
            <item>
            <term>NlroWellKnown 1</term>
            <term>A well-known route.</term>
            </item>
            <item>
            <term>NlroDHCP 2</term>
            <term>A result of DHCP configuration.</term>
            </item>
            <item>
            <term>NlroRouterAdvertisement 3</term>
            <term>The result of router advertisement.</term>
            </item>
            <item>
            <term>Nlro6to4 4</term>
            <term>A result of 6to4 tunneling.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.#ctor(Vanara.PInvoke.IpHlpApi.IP_ADDRESS_PREFIX,Vanara.PInvoke.Ws2_32.SOCKADDR_INET,Vanara.PInvoke.IpHlpApi.NET_LUID)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2"/> struct.</summary>
            <param name="destinationPrefix">The destination prefix.</param>
            <param name="nextHop">The next hop.</param>
            <param name="interfaceLuid">The interface luid.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.#ctor(Vanara.PInvoke.IpHlpApi.IP_ADDRESS_PREFIX,Vanara.PInvoke.Ws2_32.SOCKADDR_INET,System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2"/> struct.</summary>
            <param name="destinationPrefix">The destination prefix.</param>
            <param name="nextHop">The next hop.</param>
            <param name="interfaceIndex">Index of the interface.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2.Equals(Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_ROW2)">
            <summary>Determines whether the specified value is equal to this instance.</summary>
            <param name="other">The value to compare with this instance.</param>
            <returns><see langword="true"/> if the specified value is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW">
            <summary>
            The MIB_IPINTERFACE_ROW structure stores interface management information for a particular IP address family on a network interface.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.Family">
            <summary>
            <para>
            The address family. Possible values for the address family are listed in the Winsock2.h header file. Note that the values for
            the AF_ address family and PF_ protocol family constants are identical (for example, AF_INET and PF_INET), so you can use
            either constant.
            </para>
            <para>
            On Windows Vista and later versions of the Windows operating systems, possible values for this member are defined in the
            Ws2def.h header file. Note that the Ws2def.h header file is automatically included in Netioapi.h and you should never use
            Ws2def.h directly.
            </para>
            <para>The following values are currently supported:</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.InterfaceLuid">
            <summary>The locally unique identifier (LUID) for the network interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.InterfaceIndex">
            <summary>
            The local index value for the network interface. This index value might change when a network adapter is disabled and then
            enabled, or under other circumstances, and should not be considered persistent.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.MaxReassemblySize">
            <summary>
            The maximum reassembly size, in bytes, of a fragmented IP packet. This member is currently set to zero and reserved for
            future use.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.InterfaceIdentifier">
            <summary>Reserved for future use. This member is currently set to zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.MinRouterAdvertisementInterval">
            <summary>
            The minimum router advertisement interval, in milliseconds, on this IP interface. This member defaults to 200 for IPv6. This
            member is applicable only if the <c>AdvertisingEnabled</c> member is set to <c>TRUE</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.MaxRouterAdvertisementInterval">
            <summary>
            The maximum router advertisement interval, in milliseconds, on this IP interface. This member defaults to 600 for IPv6. This
            member is applicable only if the <c>AdvertisingEnabled</c> member is set to <c>TRUE</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.AdvertisingEnabled">
            <summary>
            A value that indicates if router advertising is enabled on this IP interface. The default for IPv6 is that router
            advertisement is enabled only if the interface is configured to act as a router. The default for IPv4 is that router
            advertisement is disabled.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.ForwardingEnabled">
            <summary>A value that indicates if IP forwarding is enabled on this IP interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.WeakHostSend">
            <summary>A value that indicates if weak host send mode is enabled on this IP interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.WeakHostReceive">
            <summary>A value that indicates if weak host receive mode is enabled on this IP interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.UseAutomaticMetric">
            <summary>A value that indicates if the IP interface uses automatic metric.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.UseNeighborUnreachabilityDetection">
            <summary>A value that indicates if neighbor unreachability detection is enabled on this IP interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.ManagedAddressConfigurationSupported">
            <summary>A value that indicates if the IP interface supports managed address configuration by using DHCP.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.OtherStatefulConfigurationSupported">
            <summary>A value that indicates if the IP interface supports other stateful configuration (for example, route configuration).</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.AdvertiseDefaultRoute">
            <summary>
            A value that indicates if the IP interface advertises the default route. This member is applicable only if the
            <c>AdvertisingEnabled</c> member is set to <c>TRUE</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.RouterDiscoveryBehavior">
            <summary>An <c>NL_ROUTER_DISCOVERY_BEHAVIOR</c> router discovery behavior type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.DadTransmits">
            <summary>
            The number of consecutive messages that are sent while the driver performs duplicate address detection on a tentative IP
            unicast address. A value of zero indicates that duplicate address detection is not performed on tentative IP addresses. A
            value of one indicates a single transmission with no follow up retransmissions. For IPv4, the default value for this member
            is 3. For IPv6, the default value for this member is 1. For IPv6, these messages are sent as IPv6 Neighbor Solicitation (NS)
            requests. This member is defined as DupAddrDetectTransmits in RFC 2462. For more information, see IPv6 "Stateless Address Auto-configuration".
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.BaseReachableTime">
            <summary>
            The base for random reachable time, in milliseconds. The member is described in RFC 2461. For more information, see "Neighbor
            Discovery for IP Version 6 (IPv6)".
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.RetransmitTime">
            <summary>
            The IPv6 Neighbor Solicitation (NS) time-out, in milliseconds. The member is described in RFC 2461. For more information, see
            "Neighbor Discovery for IP Version 6 (IPv6)".
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.PathMtuDiscoveryTimeout">
            <summary>The path MTU discovery time-out, in milliseconds.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.LinkLocalAddressBehavior">
            <summary>A <c>NL_LINK_LOCAL_ADDRESS_BEHAVIOR</c> link local address behavior type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.LinkLocalAddressTimeout">
            <summary>The link local IP address time-out, in milliseconds.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.ZoneIndices">
            <summary>An array that specifies the zone part of scope IDs.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.SitePrefixLength">
            <summary>
            The site prefix length, in bits, of the IP interface address. The length, in bits, of the site prefix or network part of the
            IP interface address. For an IPv4 address, any value that is greater than 32 is an illegal value. For an IPv6 address, any
            value that is greater than 128 is an illegal value. A value of 255 is typically used to represent an illegal value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.Metric">
            <summary>
            The interface metric. Note that the actual route metric that is used to compute the route preference is the summation of the
            route metric offset that is specified in the <c>Metric</c> member of the <c>MIB_IPFORWARD_ROW2</c> structure and the
            interface metric that is specified in this member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.NlMtu">
            <summary>The network layer MTU size, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.Connected">
            <summary>A value that indicates if the interface is connected to a network access point.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.SupportsWakeUpPatterns">
            <summary>A value that specifies if the network interface supports Wake on LAN.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.SupportsNeighborDiscovery">
            <summary>A value that specifies if the IP interface support neighbor discovery.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.SupportsRouterDiscovery">
            <summary>A value that specifies if the IP interface support neighbor discovery.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.ReachableTime">
            <summary>
            The base for random reachable time, in milliseconds. The member is described in RFC 2461. For more information, see Neighbor
            Discovery for IP Version 6 (IPv6).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.TransmitOffload">
            <summary>
            A set of flags that indicate the transmit offload capabilities for the IP interface. The NL_INTERFACE_OFFLOAD_ROD structure
            is defined in the Nldef.h header file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.ReceiveOffload">
            <summary>
            A set of flags that indicate the receive offload capabilities for the IP interface. The NL_INTERFACE_OFFLOAD_ROD structure is
            defined in the Nldef.h header file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.DisableDefaultRoutes">
            <summary>
            A value that indicates if using default route on the interface should be disabled. VPN clients can use this member to
            restrict split tunneling.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.#ctor(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,Vanara.PInvoke.IpHlpApi.NET_LUID)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW"/> struct.
            </summary>
            <param name="family">The family.</param>
            <param name="interfaceLuid">The interface luid.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.#ctor(Vanara.PInvoke.Ws2_32.ADDRESS_FAMILY,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW"/> struct.
            </summary>
            <param name="family">The family.</param>
            <param name="interfaceIndex">Index of the interface.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW.Equals(Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_ROW)">
            <summary>Determines whether the specified value is equal to this instance.</summary>
            <param name="other">The value to compare with this instance.</param>
            <returns><see langword="true"/> if the specified value is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2">
            <summary>
            <para>The <c>MIB_IPNET_ROW2</c> structure stores information about a neighbor IP address.</para>
            </summary>
            <remarks>
            <para>The <c>MIB_IPNET_ROW2</c> structure is defined on Windows Vista and later.</para>
            <para>
            The <c>GetIpNetTable2</c> function enumerates the neighbor IP addresses on a local system and returns this information in an
            MIB_IPNET_TABLE2 structure.
            </para>
            <para>
            For IPv4, this includes addresses determined used the Address Resolution Protocol (ARP). For IPv6, this includes addresses
            determined using the Neighbor Discovery (ND) protocol for IPv6 as specified in RFC 2461. For more information, see http://www.ietf.org/rfc/rfc2461.txt.
            </para>
            <para>
            The GetIpNetEntry2 function retrieves a single neighbor IP address and returns this information in a <c>MIB_IPNET_ROW2</c> structure.
            </para>
            <para>
            Note that the Netioapi.h header file is automatically included in the Iphlpapi.h header file. The Netioapi.h header file should
            never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2.Address">
            <summary>
            <para>Type: <c>SOCKADDR_INET</c></para>
            <para>The neighbor IP address. This member can be an IPv6 address or an IPv4 address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2.InterfaceIndex">
            <summary>
            <para>Type: <c>NET_IFINDEX</c></para>
            <para>
            The local index value for the network interface associated with this IP address. This index value may change when a network
            adapter is disabled and then enabled, or under other circumstances, and should not be considered persistent.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2.InterfaceLuid">
            <summary>
            <para>Type: <c>NET_LUID</c></para>
            <para>The locally unique identifier (LUID) for the network interface associated with this IP address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2.PhysicalAddress">
            <summary>
            <para>Type: <c>UCHAR[IF_MAX_PHYS_ADDRESS_LENGTH]</c></para>
            <para>The physical hardware address of the adapter for the network interface associated with this IP address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2.PhysicalAddressLength">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The length, in bytes, of the physical hardware address specified by the <c>PhysicalAddress</c> member. The maximum value
            supported is 32 bytes.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2.State">
            <summary>
            <para>Type: <c>NL_NEIGHBOR_STATE</c></para>
            <para>
            The state of a network neighbor IP address as defined in RFC 2461, section 7.3.2. For more information, see
            http://www.ietf.org/rfc/rfc2461.txt. This member can be one of the values from the <c>NL_NEIGHBOR_STATE</c> enumeration type
            defined in the Nldef.h header file.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NlnsUnreachable</term>
            <term>The IP address is unreachable.</term>
            </item>
            <item>
            <term>NlnsIncomplete</term>
            <term>
            Address resolution is in progress and the link-layer address of the neighbor has not yet been determined. Specifically for
            IPv6, a Neighbor Solicitation has been sent to the solicited-node multicast IP address of the target, but the corresponding
            neighbor advertisement has not yet been received.
            </term>
            </item>
            <item>
            <term>NlnsProbe</term>
            <term>
            The neighbor is no longer known to be reachable, and probes are being sent to verify reachability. For IPv6, a reachability
            confirmation is actively being sought by retransmitting unicast Neighbor Solicitation probes at regular intervals until a
            reachability confirmation is received.
            </term>
            </item>
            <item>
            <term>NlnsDelay</term>
            <term>
            The neighbor is no longer known to be reachable, and traffic has recently been sent to the neighbor. Rather than probe the
            neighbor immediately, however, delay sending probes for a short while in order to give upper layer protocols a chance to
            provide reachability confirmation. For IPv6, more time has elapsed than is specified in the ReachabilityTime.ReachableTime
            member since the last positive confirmation was received that the forward path was functioning properly and a packet was
            sent. If no reachability confirmation is received within a period of time (used to delay the first probe) of entering the
            NlnsDelay state, then a neighbor solicitation is sent and the State member is changed to NlnsProbe.
            </term>
            </item>
            <item>
            <term>NlnsStale</term>
            <term>
            The neighbor is no longer known to be reachable but until traffic is sent to the neighbor, no attempt should be made to
            verify its reachability. For IPv6, more time has elapsed than is specified in the ReachabilityTime.ReachableTime member since
            the last positive confirmation was received that the forward path was functioning properly. While the State is NlnsStale, no
            action takes place until a packet is sent. The NlnsStale state is entered upon receiving an unsolicited neighbor discovery
            message that updates the cached IP address. Receipt of such a message does not confirm reachability, and entering the
            NlnsStale state insures reachability is verified quickly if the entry is actually being used. However, reachability is not
            actually verified until the entry is actually used.
            </term>
            </item>
            <item>
            <term>NlnsReachable</term>
            <term>
            The neighbor is known to have been reachable recently (within tens of seconds ago). For IPv6, a positive confirmation was
            received within the time specified in the ReachabilityTime.ReachableTime member that the forward path to the neighbor was
            functioning properly. While the State is NlnsReachable, no special action takes place as packets are sent.
            </term>
            </item>
            <item>
            <term>NlnsPermanent</term>
            <term>The IP address is a permanent address.</term>
            </item>
            <item>
            <term>NlnsMaximum</term>
            <term>The maximum possible value for the NL_NEIGHBOR_STATE enumeration type. This is not a legal value for the State member.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2.Flags">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2.ReachabilityTime">
            <summary>
            <para>
            <c>Type: <c>ULONG</c></c> The time, in milliseconds, that a node assumes a neighbor is reachable after having received a
            reachability confirmation or is unreachable after not having received a reachability confirmation.
            </para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN,Vanara.PInvoke.IpHlpApi.NET_LUID,System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2"/> struct.</summary>
            <param name="ipV4">The neighbor IP address.</param>
            <param name="ifLuid">The locally unique identifier (LUID) for the network interface associated with this IP address.</param>
            <param name="macAddr">The physical hardware address of the adapter for the network interface associated with this IP address.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN,System.UInt32,System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2"/> struct.</summary>
            <param name="ipV4">The neighbor IP address.</param>
            <param name="ifIdx">
            The local index value for the network interface associated with this IP address. This index value may change when a network
            adapter is disabled and then enabled, or under other circumstances, and should not be considered persistent.
            </param>
            <param name="macAddr">The physical hardware address of the adapter for the network interface associated with this IP address.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN6,Vanara.PInvoke.IpHlpApi.NET_LUID,System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2"/> struct.</summary>
            <param name="ipV6">The neighbor IP address.</param>
            <param name="ifLuid">The locally unique identifier (LUID) for the network interface associated with this IP address.</param>
            <param name="macAddr">The physical hardware address of the adapter for the network interface associated with this IP address.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN6,System.UInt32,System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2"/> struct.</summary>
            <param name="ipV6">The neighbor IP address.</param>
            <param name="ifIdx">
            The local index value for the network interface associated with this IP address. This index value may change when a network
            adapter is disabled and then enabled, or under other circumstances, and should not be considered persistent.
            </param>
            <param name="macAddr">The physical hardware address of the adapter for the network interface associated with this IP address.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_Unmanaged">
            <inheritdoc cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2"/>
            <remarks>Unlike <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2"/> this structure is zero copy</remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_Unmanaged.Address">
            <summary>
            <para>Type: <c>SOCKADDR_INET</c></para>
            <para>The neighbor IP address. This member can be an IPv6 address or an IPv4 address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_Unmanaged.InterfaceIndex">
            <summary>
            <para>Type: <c>NET_IFINDEX</c></para>
            <para>
            The local index value for the network interface associated with this IP address. This index value may change when a network
            adapter is disabled and then enabled, or under other circumstances, and should not be considered persistent.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_Unmanaged.InterfaceLuid">
            <summary>
            <para>Type: <c>NET_LUID</c></para>
            <para>The locally unique identifier (LUID) for the network interface associated with this IP address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_Unmanaged.PhysicalAddress">
            <summary>
            <para>Type: <c>UCHAR[IF_MAX_PHYS_ADDRESS_LENGTH]</c></para>
            <para>The physical hardware address of the adapter for the network interface associated with this IP address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_Unmanaged.PhysicalAddressLength">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The length, in bytes, of the physical hardware address specified by the <c>PhysicalAddress</c> member. The maximum value
            supported is 32 bytes.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_Unmanaged.State">
            <summary>
            <para>Type: <c>NL_NEIGHBOR_STATE</c></para>
            <para>
            The state of a network neighbor IP address as defined in RFC 2461, section 7.3.2. For more information, see
            http://www.ietf.org/rfc/rfc2461.txt. This member can be one of the values from the <c>NL_NEIGHBOR_STATE</c> enumeration type
            defined in the Nldef.h header file.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>NlnsUnreachable</term>
            <term>The IP address is unreachable.</term>
            </item>
            <item>
            <term>NlnsIncomplete</term>
            <term>
            Address resolution is in progress and the link-layer address of the neighbor has not yet been determined. Specifically for
            IPv6, a Neighbor Solicitation has been sent to the solicited-node multicast IP address of the target, but the corresponding
            neighbor advertisement has not yet been received.
            </term>
            </item>
            <item>
            <term>NlnsProbe</term>
            <term>
            The neighbor is no longer known to be reachable, and probes are being sent to verify reachability. For IPv6, a reachability
            confirmation is actively being sought by retransmitting unicast Neighbor Solicitation probes at regular intervals until a
            reachability confirmation is received.
            </term>
            </item>
            <item>
            <term>NlnsDelay</term>
            <term>
            The neighbor is no longer known to be reachable, and traffic has recently been sent to the neighbor. Rather than probe the
            neighbor immediately, however, delay sending probes for a short while in order to give upper layer protocols a chance to
            provide reachability confirmation. For IPv6, more time has elapsed than is specified in the ReachabilityTime.ReachableTime
            member since the last positive confirmation was received that the forward path was functioning properly and a packet was
            sent. If no reachability confirmation is received within a period of time (used to delay the first probe) of entering the
            NlnsDelay state, then a neighbor solicitation is sent and the State member is changed to NlnsProbe.
            </term>
            </item>
            <item>
            <term>NlnsStale</term>
            <term>
            The neighbor is no longer known to be reachable but until traffic is sent to the neighbor, no attempt should be made to
            verify its reachability. For IPv6, more time has elapsed than is specified in the ReachabilityTime.ReachableTime member since
            the last positive confirmation was received that the forward path was functioning properly. While the State is NlnsStale, no
            action takes place until a packet is sent. The NlnsStale state is entered upon receiving an unsolicited neighbor discovery
            message that updates the cached IP address. Receipt of such a message does not confirm reachability, and entering the
            NlnsStale state insures reachability is verified quickly if the entry is actually being used. However, reachability is not
            actually verified until the entry is actually used.
            </term>
            </item>
            <item>
            <term>NlnsReachable</term>
            <term>
            The neighbor is known to have been reachable recently (within tens of seconds ago). For IPv6, a positive confirmation was
            received within the time specified in the ReachabilityTime.ReachableTime member that the forward path to the neighbor was
            functioning properly. While the State is NlnsReachable, no special action takes place as packets are sent.
            </term>
            </item>
            <item>
            <term>NlnsPermanent</term>
            <term>The IP address is a permanent address.</term>
            </item>
            <item>
            <term>NlnsMaximum</term>
            <term>The maximum possible value for the NL_NEIGHBOR_STATE enumeration type. This is not a legal value for the State member.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_Unmanaged.Flags">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_Unmanaged.ReachabilityTime">
            <summary>
            <para>
            <c>Type: <c>ULONG</c></c> The time, in milliseconds, that a node assumes a neighbor is reachable after having received a
            reachability confirmation or is unreachable after not having received a reachability confirmation.
            </para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_Unmanaged.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN,Vanara.PInvoke.IpHlpApi.NET_LUID,System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2"/> struct.</summary>
            <param name="ipV4">The neighbor IP address.</param>
            <param name="ifLuid">The locally unique identifier (LUID) for the network interface associated with this IP address.</param>
            <param name="macAddr">The physical hardware address of the adapter for the network interface associated with this IP address.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_Unmanaged.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN,System.UInt32,System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_Unmanaged"/> struct.</summary>
            <param name="ipV4">The neighbor IP address.</param>
            <param name="ifIdx">
            The local index value for the network interface associated with this IP address. This index value may change when a network
            adapter is disabled and then enabled, or under other circumstances, and should not be considered persistent.
            </param>
            <param name="macAddr">The physical hardware address of the adapter for the network interface associated with this IP address.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_Unmanaged.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN6,Vanara.PInvoke.IpHlpApi.NET_LUID,System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_Unmanaged"/> struct.</summary>
            <param name="ipV6">The neighbor IP address.</param>
            <param name="ifLuid">The locally unique identifier (LUID) for the network interface associated with this IP address.</param>
            <param name="macAddr">The physical hardware address of the adapter for the network interface associated with this IP address.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_Unmanaged.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN6,System.UInt32,System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_Unmanaged"/> struct.</summary>
            <param name="ipV6">The neighbor IP address.</param>
            <param name="ifIdx">
            The local index value for the network interface associated with this IP address. This index value may change when a network
            adapter is disabled and then enabled, or under other circumstances, and should not be considered persistent.
            </param>
            <param name="macAddr">The physical hardware address of the adapter for the network interface associated with this IP address.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_IPNET_ROW2_Unmanaged.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPPATH_ROW">
            <summary>
            <para>The <c>MIB_IPPATH_ROW</c> structure stores information about an IP path entry.</para>
            </summary>
            <remarks>
            <para>The <c>MIB_IPPATH_ROW</c> structure is defined on Windows Vista and later.</para>
            <para>
            The GetIpPathTable function enumerates the IP path entries on a local system and returns this information in a MIB_IPPATH_TABLE
            structure as an array of <c>MIB_IPPATH_ROW</c> entries.
            </para>
            <para>The GetIpPathEntry function retrieves a single IP path entry and returns this information in a MIB_IPPATH_TABLE structure.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPPATH_ROW.Source">
            <summary>
            <para>Type: <c>SOCKADDR_INET</c></para>
            <para>The source IP address for this IP path entry.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPPATH_ROW.Destination">
            <summary>
            <para>Type: <c>SOCKADDR_INET</c></para>
            <para>The destination IP address for this IP path entry.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPPATH_ROW.InterfaceLuid">
            <summary>
            <para>Type: <c>NET_LUID</c></para>
            <para>The locally unique identifier (LUID) for the network interface associated with this IP path entry.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPPATH_ROW.InterfaceIndex">
            <summary>
            <para>Type: <c>NET_IFINDEX</c></para>
            <para>
            The local index value for the network interface associated with this IP path entry. This index value may change when a
            network adapter is disabled and then enabled, or under other circumstances, and should not be considered persistent.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPPATH_ROW.CurrentNextHop">
            <summary>
            <para>Type: <c>SOCKADDR_INET</c></para>
            <para>The current IP address of the next system or gateway en route. This member can change over the lifetime of a path.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPPATH_ROW.PathMtu">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The maximum transmission unit (MTU) size, in bytes, to the destination IP address for this IP path entry.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPPATH_ROW.RttMean">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The estimated mean round-trip time (RTT), in milliseconds, to the destination IP address for this IP path entry.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPPATH_ROW.RttDeviation">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The estimated mean deviation for the round-trip time (RTT), in milliseconds, to the destination IP address for this IP path entry.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPPATH_ROW.LastReachableOrUnreachable">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The time, in milliseconds, that a node assumes that the destination IP address is reachable after having received OR
            unreachable after not having received a reachability confirmation.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPPATH_ROW.IsReachable">
            <summary>
            <para>Type: <c>BOOLEAN</c></para>
            <para>A value that indicates if the destination IP address is reachable for this IP path entry.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPPATH_ROW.LinkTransmitSpeed">
            <summary>
            <para>Type: <c>ULONG64</c></para>
            <para>The estimated speed in bits per second of the transmit link to the destination IP address for this IP path entry.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_IPPATH_ROW.LinkReceiveSpeed">
            <summary>
            <para>Type: <c>ULONG64</c></para>
            <para>The estimated speed in bits per second of the receive link from the destination IP address for this IP path entry.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_ROW">
            <summary>The MIB_MULTICASTIPADDRESS_ROW structure stores information about a multicast IP address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_ROW.Address">
            <summary>The multicast IP address. This member can be an IPv6 address or an IPv4 address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_ROW.InterfaceIndex">
            <summary>
            The local index value for the network interface that is associated with this IP address. This index value might change when a
            network adapter is disabled and then enabled, or under other circumstances, and should not be considered persistent.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_ROW.InterfaceLuid">
            <summary>The locally unique identifier (LUID) for the network interface that is associated with this IP address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_ROW.ScopeId">
            <summary>
            The scope ID of the multicast IP address. This member is applicable only to an IPv6 address. Your driver cannot set this
            member. This member is automatically determined by the interface that the address was added on.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_ROW.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN,Vanara.PInvoke.IpHlpApi.NET_LUID)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_ROW"/> struct.
            </summary>
            <param name="ipv4">The ipv4.</param>
            <param name="interfaceLuid">The interface luid.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_ROW.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_ROW"/> struct.
            </summary>
            <param name="ipv4">The ipv4.</param>
            <param name="interfaceIndex">Index of the interface.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_ROW.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN6,Vanara.PInvoke.IpHlpApi.NET_LUID)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_ROW"/> struct.
            </summary>
            <param name="ipv6">The ipv6.</param>
            <param name="interfaceLuid">The interface luid.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_ROW.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN6,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_ROW"/> struct.
            </summary>
            <param name="ipv6">The ipv6.</param>
            <param name="interfaceIndex">Index of the interface.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_ROW.Equals(Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_ROW)">
            <summary>Determines whether the specified value is equal to this instance.</summary>
            <param name="other">The value to compare with this instance.</param>
            <returns><see langword="true"/> if the specified value is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW">
            <summary>
            <para>The <c>MIB_UNICASTIPADDRESS_ROW</c> structure stores information about a unicast IP address.</para>
            </summary>
            <remarks>
            <para>The <c>MIB_UNICASTIPADDRESS_ROW</c> structure is defined on Windows Vista and later.</para>
            <para>
            The <c>SkipAsSource</c> member of the <c>MIB_UNICASTIPADDRESS_ROW</c> structure affects the operation of the getaddrinfo,
            GetAddrInfoW, and GetAddrInfoEx functions in Windows sockets. If the pNodeName parameter passed to the <c>getaddrinfo</c> or
            <c>GetAddrInfoW</c> functions or the pName parameter passed to the <c>GetAddrInfoEx</c> function points to a computer name, all
            permanent addresses for the computer that can be used as a source address are returned. On Windows Vista and later, these
            addresses would include all unicast IP addresses returned by the GetUnicastIpAddressTable or GetUnicastIpAddressEntry functions
            in which the <c>SkipAsSource</c> member is set to false in the <c>MIB_UNICASTIPADDRESS_ROW</c> structure.
            </para>
            <para>
            If the pNodeName or pName parameter refers to a cluster virtual server name, only virtual server addresses are returned. On
            Windows Vista and later, these addresses would include all unicast IP addresses returned by the GetUnicastIpAddressTable or
            GetUnicastIpAddressEntry functions in which the <c>SkipAsSource</c> member is set to true in the <c>MIB_UNICASTIPADDRESS_ROW</c>
            structure. See Windows Clustering for more information about clustering.
            </para>
            <para>
            Windows 7 with Service Pack 1 (SP1) and Windows Server 2008 R2 with Service Pack 1 (SP1) add support to Netsh.exe for setting the
            SkipAsSource attribute on an IP address. This hotfix also changes the behavior such that if the <c>SkipAsSource</c> member in the
            <c>MIB_UNICASTIPADDRESS_ROW</c> structure is set to false, the IP address will be registered in DNS. If the <c>SkipAsSource</c>
            member is set to true, the IP address is not registered in DNS.
            </para>
            <para>
            A hotfix is available for Windows 7 and Windows Server 2008 R2 that adds support to Netsh.exe for setting the SkipAsSource
            attribute on an IP address. This hotfix also changes the behavior such that if the <c>SkipAsSource</c> member in the
            <c>MIB_UNICASTIPADDRESS_ROW</c> structure is set to false, the IP address will be registered in DNS. If the <c>SkipAsSource</c>
            member is set to true, the IP address is not registered in DNS. For more information, see Knowledge Base (KB) 2386184.
            </para>
            <para>
            A similar hotfix is also available for Windows Vista with Service Pack 2 (SP2) and Windows Server 2008 with Service Pack 2 (SP2)
            that adds support to Netsh.exe for setting the SkipAsSource attribute on an IP address. This hotfix also changes behavior such
            that if the <c>SkipAsSource</c> member in the <c>MIB_UNICASTIPADDRESS_ROW</c> structure is set to false, the IP address will be
            registered in DNS. If the <c>SkipAsSource</c> member is set to true, the IP address is not registered in DNS. For more
            information, see Knowledge Base (KB) 975808.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves a unicast IP address table and prints some values from each of the retrieved
            <c>MIB_UNICASTIPADDRESS_ROW</c> structures.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW.Address">
            <summary>
            <para>Type: <c>SOCKADDR_INET</c></para>
            <para>The unicast IP address. This member can be an IPv6 address or an IPv4 address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW.InterfaceLuid">
            <summary>
            <para>Type: <c>NET_LUID</c></para>
            <para>The locally unique identifier (LUID) for the network interface associated with this IP address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW.InterfaceIndex">
            <summary>
            <para>Type: <c>NET_IFINDEX</c></para>
            <para>
            The local index value for the network interface associated with this IP address. This index value may change when a network
            adapter is disabled and then enabled, or under other circumstances, and should not be considered persistent.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW.PrefixOrigin">
            <summary>
            <para>Type: <c>NL_PREFIX_ORIGIN</c></para>
            <para>
            The origin of the prefix or network part of IP the address. This member can be one of the values from the
            <c>NL_PREFIX_ORIGIN</c> enumeration type defined in the Nldef.h header file.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IpPrefixOriginOther 0</term>
            <term>
            The IP address prefix was configured using a source other than those defined in this enumeration. This value is applicable to
            an IPv6 or IPv4 address.
            </term>
            </item>
            <item>
            <term>IpPrefixOriginManual 1</term>
            <term>The IP address prefix was configured manually. This value is applicable to an IPv6 or IPv4 address.</term>
            </item>
            <item>
            <term>IpPrefixOriginWellKnown 2</term>
            <term>
            The IP address prefix was configured using a well-known address. This value is applicable to an IPv6 link-local address or an
            IPv6 loopback address.
            </term>
            </item>
            <item>
            <term>IpPrefixOriginDhcp 3</term>
            <term>
            The IP address prefix was configured using DHCP. This value is applicable to an IPv4 address configured using DHCP or an IPv6
            address configured using DHCPv6.
            </term>
            </item>
            <item>
            <term>IpPrefixOriginRouterAdvertisement 4</term>
            <term>
            The IP address prefix was configured using router advertisement. This value is applicable to an anonymous IPv6 address that
            was generated after receiving a router advertisement.
            </term>
            </item>
            <item>
            <term>IpPrefixOriginUnchanged 16</term>
            <term>
            The IP address prefix should be unchanged. This value is used when setting the properties for a unicast IP interface when the
            value for the IP prefix origin should be unchanged.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW.SuffixOrigin">
            <summary>
            <para>Type: <c>NL_SUFFIX_ORIGIN</c></para>
            <para>
            The origin of the suffix or host part of IP the address. This member can be one of the values from the
            <c>NL_SUFFIX_ORIGIN</c> enumeration type defined in the Nldef.h header file.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IpSuffixOriginOther 0</term>
            <term>
            The IP address suffix was configured using a source other than those defined in this enumeration. This value is applicable to
            an IPv6 or IPv4 address.
            </term>
            </item>
            <item>
            <term>IpSuffixOriginManual 1</term>
            <term>The IP address suffix was configured manually. This value is applicable to an IPv6 or IPv4 address.</term>
            </item>
            <item>
            <term>IpSuffixOriginWellKnown 2</term>
            <term>
            The IP address suffix was configured using a well-known address. This value is applicable to an IPv6 link-local address or an
            IPv6 loopback address.
            </term>
            </item>
            <item>
            <term>IpSuffixOriginDhcp 3</term>
            <term>
            The IP address suffix was configured using DHCP. This value is applicable to an IPv4 address configured using DHCP or an IPv6
            address configured using DHCPv6.
            </term>
            </item>
            <item>
            <term>IpSuffixOriginLinkLayerAddress 4</term>
            <term>
            The IP address suffix was the link local address. This value is applicable to an IPv6 link-local address or an IPv6 address
            where the network part was generated based on a router advertisement and the host part was based on the MAC hardware address.
            </term>
            </item>
            <item>
            <term>IpSuffixOriginRandom 5</term>
            <term>
            The IP address suffix was generated randomly. This value is applicable to an anonymous IPv6 address where the host part of
            the address was generated randomly from the MAC hardware address after receiving a router advertisement.
            </term>
            </item>
            <item>
            <term>IpSuffixOriginUnchanged 16</term>
            <term>
            The IP address suffix should be unchanged. This value is used when setting the properties for a unicast IP interface when the
            value for the IP suffix origin should be unchanged.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW.ValidLifetime">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The maximum time, in seconds, that the IP address is valid. A value of 0xffffffff is considered to be infinite.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW.PreferredLifetime">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The preferred time, in seconds, that the IP address is valid. A value of 0xffffffff is considered to be infinite.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW.OnLinkPrefixLength">
            <summary>
            <para>Type: <c>UINT8</c></para>
            <para>
            The length, in bits, of the prefix or network part of the IP address. For a unicast IPv4 address, any value greater than 32
            is an illegal value. For a unicast IPv6 address, any value greater than 128 is an illegal value. A value of 255 is commonly
            used to represent an illegal value.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW.SkipAsSource">
            <summary>
            <para>Type: <c>BOOLEAN</c></para>
            <para>This member specifies if the address can be used as an IP source address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW.DadState">
            <summary>
            <para>Type: <c>NL_DAD_STATE</c></para>
            <para>
            The duplicate Address detection (DAD) state. Duplicate address detection is applicable to both IPv6 and IPv4 addresses. This
            member can be one of the values from the <c>NL_DAD_STATE</c> enumeration type defined in the Nldef.h header file.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IpDadStateInvalid 0</term>
            <term>The DAD state is invalid.</term>
            </item>
            <item>
            <term>IpDadStateTentative 1</term>
            <term>The DAD state is tentative.</term>
            </item>
            <item>
            <term>IpDadStateDuplicate 2</term>
            <term>A duplicate IP address has been detected.</term>
            </item>
            <item>
            <term>IpDadStateDeprecated 3</term>
            <term>The IP address has been deprecated.</term>
            </item>
            <item>
            <term>IpDadStatePreferred 4</term>
            <term>The IP address is the preferred address.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW.ScopeId">
            <summary>
            <para>Type: <c>SCOPE_ID</c></para>
            <para>
            The scope ID of the IP address. This member is applicable only to an IPv6 address. This member cannot be set. It is
            automatically determined by the interface on which the address was added.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW.CreationTimeStamp">
            <summary>
            <para>Type: <c>LARGE_INTEGER</c></para>
            <para>The time stamp when the IP address was created.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN,Vanara.PInvoke.IpHlpApi.NET_LUID)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW"/> struct.
            </summary>
            <param name="ipv4">The ipv4.</param>
            <param name="interfaceLuid">The interface luid.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW"/> struct.
            </summary>
            <param name="ipv4">The ipv4.</param>
            <param name="interfaceIndex">Index of the interface.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN6,Vanara.PInvoke.IpHlpApi.NET_LUID)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW"/> struct.
            </summary>
            <param name="ipv6">The ipv6.</param>
            <param name="interfaceLuid">The interface luid.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW.#ctor(Vanara.PInvoke.Ws2_32.SOCKADDR_IN6,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW"/> struct.
            </summary>
            <param name="ipv6">The ipv6.</param>
            <param name="interfaceIndex">Index of the interface.</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW.Equals(Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_ROW)">
            <summary>Determines whether the specified value is equal to this instance.</summary>
            <param name="other">The value to compare with this instance.</param>
            <returns><see langword="true"/> if the specified value is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_ANYCASTIPADDRESS_TABLE">
            <summary>The MIB_ANYCASTIPADDRESS_TABLE structure contains a table of anycast IP address entries.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IF_TABLE2">
            <summary>The MIB_IF_TABLE2 structure contains a table of logical and physical interface entries.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IFSTACK_TABLE">
            <summary>
            The MIB_IFSTACK_TABLE structure contains a table of network interface stack row entries. This table specifies the relationship of
            the network interfaces on an interface stack.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_INVERTEDIFSTACK_TABLE">
            <summary>
            The MIB_INVERTEDIFSTACK_TABLE structure contains a table of inverted network interface stack row entries. This table specifies
            the relationship of the network interfaces on an interface stack in reverse order.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPFORWARD_TABLE2">
            <summary>The MIB_IPFORWARD_TABLE2 structure contains a table of IP route entries.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPINTERFACE_TABLE">
            <summary>The MIB_IPINTERFACE_TABLE structure contains a table of IP interface entries.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_TABLE2">
            <summary>The MIB_IPNET_TABLE2 structure contains a table of neighbor IP address entries.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_TABLE2_Unmanaged">
            <inheritdoc cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_TABLE2"/>
            <remarks>Unlike <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_IPNET_TABLE2"/> this provides is zero copy</remarks>///
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_IPPATH_TABLE">
            <summary>The MIB_IPPATH_TABLE structure contains a table of IP path entries.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_MULTICASTIPADDRESS_TABLE">
            <summary>
            <para>The <c>MIB_MULTICASTIPADDRESS_TABLE</c> structure contains a table of multicast IP address entries.</para>
            </summary>
            <remarks>
            <para>The <c>MIB_MULTICASTIPADDRESS_TABLE</c> structure is defined on Windows Vista and later.</para>
            <para>
            The GetMulticastIpAddressTable function enumerates the multicast IP addresses on a local system and returns this information in
            an <c>MIB_MULTICASTIPADDRESS_TABLE</c> structure.
            </para>
            <para>
            The <c>MIB_MULTICASTIPADDRESS_TABLE</c> structure may contain padding for alignment between the <c>NumEntries</c> member and the
            first MIB_MULTICASTIPADDRESS_ROW array entry in the <c>Table</c> member. Padding for alignment may also be present between the
            <c>MIB_MULTICASTIPADDRESS_ROW</c> array entries in the <c>Table</c> member. Any access to a <c>MIB_MULTICASTIPADDRESS_ROW</c>
            array entry should assume padding may exist.
            </para>
            <para>
            Note that the Netioapi.h header file is automatically included in the Iphlpapi.h header file. The Netioapi.h header file should
            never be used directly.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_UNICASTIPADDRESS_TABLE">
            <summary>
            <para>The <c>MIB_UNICASTIPADDRESS_TABLE</c> structure contains a table of unicast IP address entries.</para>
            </summary>
            <remarks>
            <para>The <c>MIB_UNICASTIPADDRESS_TABLE</c> structure is defined on Windows Vista and later.</para>
            <para>
            The GetUnicastIpAddressTable function enumerates the unicast IP addresses on a local system and returns this information in an
            <c>MIB_UNICASTIPADDRESS_TABLE</c> structure.
            </para>
            <para>
            The <c>MIB_UNICASTIPADDRESS_TABLE</c> structure may contain padding for alignment between the <c>NumEntries</c> member and the
            first MIB_UNICASTIPADDRESS_ROW array entry in the <c>Table</c> member. Padding for alignment may also be present between the
            <c>MIB_UNICASTIPADDRESS_ROW</c> array entries in the <c>Table</c> member. Any access to a <c>MIB_UNICASTIPADDRESS_ROW</c> array
            entry should assume padding may exist.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves a unicast IP address table and prints some values from each of the retrieved
            MIB_UNICASTIPADDRESS_ROW structures.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.SafeMibEntryBase`1">
            <summary>Base class for all structures that support a variable length array of structures with a count in the first field.</summary>
            <typeparam name="T">Type of the structure array.</typeparam>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.SafeMibEntryBase`1.NumEntries">
            <summary>Gets the number of interface entries in the array.</summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.SafeMibEntryBase`1.Table">
            <summary>Gets the array of <typeparamref name="T"/> structures containing interface entries.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SafeMibEntryBase`1.GetEnumerator">
            <summary>Gets the enumerator.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SafeMibEntryBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets the enumerator.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.SafeUnmanagedMibEntryBase`1">
            <summary>Base class for all structures that support a variable length array of structures with a count in the first field.</summary>
            <typeparam name="T">Type of the structure array.</typeparam>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.SafeUnmanagedMibEntryBase`1.NumEntries">
            <summary>Gets the number of interface entries in the array.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SafeUnmanagedMibEntryBase`1.AsUnmanagedArrayPointer">
            <summary>Exposes the pointer to the array of structures.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SafeUnmanagedMibEntryBase`1.GetEnumerator">
            <summary>Gets the enumerator.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.SafeMibTableHandle">
            <summary>SafeHandle for all objects that must be freed with FreeMibTable.</summary>
            <seealso cref="T:Vanara.InteropServices.GenericSafeHandle"/>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SafeMibTableHandle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.SafeMibTableHandle"/> class.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SafeMibTableHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.SafeMibTableHandle"/> class.</summary>
            <param name="bufferPtr">The buffer PTR.</param>
            <param name="own">if set to <c>true</c> [own].</param>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.SafeMibTableHandle.ToArray``1(System.Int32,System.Int32)">
            <summary>Extracts the array from the pointer.</summary>
            <typeparam name="T">The structure type of the array.</typeparam>
            <param name="count">The number of items.</param>
            <param name="prefixBytes">The number of bytes to skip before processing the array.</param>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NL_DAD_STATE">
            <summary>The NL_DAD_STATE enumeration type defines the duplicate address detection (DAD) state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_DAD_STATE.IpDadStateInvalid">
            <summary>The DAD state is invalid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_DAD_STATE.IpDadStateTentative">
            <summary>The DAD state is tentative.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_DAD_STATE.IpDadStateDuplicate">
            <summary>A duplicate IP address has been detected.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_DAD_STATE.IpDadStateDeprecated">
            <summary>The IP address has been deprecated.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_DAD_STATE.IpDadStatePreferred">
            <summary>The IP address is the preferred address.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NL_LINK_LOCAL_ADDRESS_BEHAVIOR">
            <summary>
            <para>The NL_LINK_LOCAL_ADDRESS_BEHAVIOR enumeration type defines the link local address behavior.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_LINK_LOCAL_ADDRESS_BEHAVIOR.LinkLocalAlwaysOff">
            <summary>A link local IP address should never be used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_LINK_LOCAL_ADDRESS_BEHAVIOR.LinkLocalDelayed">
            <summary>
            A link local IP address should be used only if no other address is available. This setting is the default setting for an
            IPv4 interface.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_LINK_LOCAL_ADDRESS_BEHAVIOR.LinkLocalAlwaysOn">
            <summary>A link local IP address should always be used. This setting is the default setting for an IPv6 interface.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_LINK_LOCAL_ADDRESS_BEHAVIOR.LinkLocalUnchanged">
            <summary>When the properties of an IP interface are being set, the value for link local address behavior should be unchanged.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NL_NEIGHBOR_STATE">
            <summary>
            <para>
            The NL_NEIGHBOR_STATE enumeration type defines the state of a network layer neighbor IP address, as described in RFC 2461,
            section 7.3.2.
            </para>
            </summary>
            <remarks>
            <para>
            For more information about RFC 2461, section 7.3.2, see the Neighbor Discovery for IP Version 6 (IPv6) memo from Network Working Group.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NEIGHBOR_STATE.NlnsUnreachable">
            <summary>The IP address is unreachable.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NEIGHBOR_STATE.NlnsIncomplete">
            <summary>
            Address resolution is in progress and the link-layer address of the neighbor has not yet been determined. Specifically for
            IPv6, a Neighbor Solicitation message has been sent to the solicited-node multicast IP address of the target, but the
            corresponding neighbor advertisement has not yet been received.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NEIGHBOR_STATE.NlnsProbe">
            <summary>
            The neighbor is no longer known to be reachable, and probes are being sent to verify reachability. For IPv6, a reachability
            confirmation is actively being sought by regularly retransmitting unicast Neighbor Solicitation probes until a reachability
            confirmation is received.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NEIGHBOR_STATE.NlnsDelay">
            <summary>
            The neighbor is no longer known to be reachable, and traffic has recently been sent to the neighbor. However, instead of
            probing the neighbor immediately, sending probes is delayed for a short time to give upper layer protocols an opportunity to
            provide reachability confirmation. For IPv6, more time has elapsed than is specified in the ReachabilityTime.ReachableTime
            member of the MIB_IPNET_ROW2 structure since the last positive confirmation was received that the forward path was
            functioning properly and a packet was sent. If no reachability confirmation is received within a period of time (used to
            delay the first probe) of entering the NlnsDelay state, a IPv6 Neighbor Solicitation (NS) message is sent, and the State
            member of MIB_IPNET_ROW2 is changed to NlnsProbe.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NEIGHBOR_STATE.NlnsStale">
            <summary>
            The neighbor is no longer known to be reachable, but until traffic is sent to the neighbor, no attempt should be made to
            verify its reachability. For IPv6, more time has elapsed than is specified in the ReachabilityTime.ReachableTime member of
            the MIB_IPNET_ROW2 structure since the last positive confirmation was received that the forward path was functioning
            properly. While the State member of MIB_IPNET_ROW2 is NlnsStale, no action occurs until a packet is sent. The NlnsStale
            state is entered upon receiving an unsolicited neighbor discovery message that updates the cached IP address. Receipt of
            such a message does not confirm reachability, and entering the NlnsStale state insures reachability is verified quickly if
            the entry is actually being used. However, reachability is not actually verified until the entry is actually used.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NEIGHBOR_STATE.NlnsReachable">
            <summary>
            The neighbor is known to have been reachable recently (within tens of seconds ago). For IPv6, a positive confirmation was
            received within the time that is specified in the ReachabilityTime.ReachableTime member of the MIB_IPNET_ROW2 structure that
            the forward path to the neighbor was functioning properly. While the State member of MIB_IPNET_ROW2 is NlnsReachable, no
            special action occurs as packets are sent.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NEIGHBOR_STATE.NlnsPermanent">
            <summary>The IP address is a permanent address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NEIGHBOR_STATE.NlnsMaximum">
            <summary>A maximum value for testing purposes.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_COST_HINT">
            <summary>Defines constants that specify hints about the usage charge for a network connection.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_COST_HINT.NetworkConnectivityCostHintUnknown">
            <summary>Specifies a hint that cost information is not available.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_COST_HINT.NetworkConnectivityCostHintUnrestricted">
            <summary>Specifies a hint that the connection is unlimited, and has unrestricted usage charges and capacity constraints.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_COST_HINT.NetworkConnectivityCostHintFixed">
            <summary>Specifies a hint that the use of the connection is unrestricted up to a specific limit.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_COST_HINT.NetworkConnectivityCostHintVariable">
            <summary>Specifies a hint that the connection is charged on a per-byte basis.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_LEVEL_HINT">
            <summary>Defines constants that specify hints about a level of network connectivity.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_LEVEL_HINT.NetworkConnectivityLevelHintUnknown">
            <summary>
            Specifies a hint for an unknown level of connectivity. There is a short window of time during Windows (or application
            container) boot when this value might be returned.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_LEVEL_HINT.NetworkConnectivityLevelHintNone">
            <summary>Specifies a hint for no connectivity.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_LEVEL_HINT.NetworkConnectivityLevelHintLocalAccess">
            <summary>Specifies a hint for local and internet access.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_LEVEL_HINT.NetworkConnectivityLevelHintInternetAccess">
            <summary>Specifies a hint for local network access only.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_LEVEL_HINT.NetworkConnectivityLevelHintConstrainedInternetAccess">
            <summary>
            Specifies a hint for limited internet access.This value indicates captive portal connectivity, where local access to a web
            portal is provided, but access to the internet requires that specific credentials are provided via the portal. This level of
            connectivity is generally encountered when using connections hosted in public locations (for example, coffee shops and book
            stores).This doesn't guarantee detection of a captive portal. You should be aware that when Windows reports the connectivity
            level hint as NetworkConnectivityLevelHintLocalAccess, your application's network requests might be redirected, and thus
            receive a different response than expected. Other protocols might also be impacted; for example, HTTPS might be redirected,
            and fail authentication.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_LEVEL_HINT.NetworkConnectivityLevelHintHidden">
            <summary>
            Specifies a hint for a network interface that's hidden from normal connectivity (and is not, by default, accessible to
            applications). This could be because no packets are allowed at all over that network (for example, the adapter flags itself
            NCF_HIDDEN), or (by default) routes are ignored on that interface (for example, a cellular network is hidden when WiFi is connected).
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NL_PREFIX_ORIGIN">
            <summary>The NL_PREFIX_ORIGIN enumeration type defines the origin of the prefix or network part of the IP address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_PREFIX_ORIGIN.IpPrefixOriginOther">
            <summary>
            The IP address prefix was configured by using a source other than those that are defined in this enumeration. This value
            applies to an IPv6 or IPv4 address.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_PREFIX_ORIGIN.IpPrefixOriginManual">
            <summary>The IP address prefix was configured manually. This value applies to an IPv6 or IPv4 address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_PREFIX_ORIGIN.IpPrefixOriginWellKnown">
            <summary>
            The IP address prefix was configured by using a well-known address. This value applies to an IPv6 link-local address or an
            IPv6 loopback address.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_PREFIX_ORIGIN.IpPrefixOriginDhcp">
            <summary>
            The IP address prefix was configured by using DHCP. This value applies to an IPv4 address configured by using DHCP or an
            IPv6 address configured by using DHCPv6.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_PREFIX_ORIGIN.IpPrefixOriginRouterAdvertisement">
            <summary>
            The IP address prefix was configured by using router advertisement. This value applies to an anonymous IPv6 address that was
            generated after receiving a router advertisement.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_PREFIX_ORIGIN.IpPrefixOriginUnchanged">
            <summary>
            The IP address prefix should be unchanged. This value is used when setting the properties for a unicast IP interface when
            the value for the IP prefix origin should be unchanged.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NL_ROUTE_ORIGIN">
            <summary>
            <para>The NL_ROUTE_ORIGIN enumeration type defines the origin of the IP route.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_ROUTE_ORIGIN.NlroManual">
            <summary>The route is a result of manual configuration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_ROUTE_ORIGIN.NlroWellKnown">
            <summary>The route is a well-known route.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_ROUTE_ORIGIN.NlroDHCP">
            <summary>The route is a result of DHCP configuration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_ROUTE_ORIGIN.NlroRouterAdvertisement">
            <summary>The route is a result of router advertisement.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_ROUTE_ORIGIN.Nlro6to4">
            <summary>The route is a result of 6to4 tunneling.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NL_ROUTER_DISCOVERY_BEHAVIOR">
            <summary>
            <para>The NL_ROUTER_DISCOVERY_BEHAVIOR enumeration type defines the router discovery behavior, as described in RFC 2461.</para>
            </summary>
            <remarks>
            <para>For more information about RFC 2461, see the Neighbor Discovery for IP Version 6 (IPv6) memo by the Network Working Group.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_ROUTER_DISCOVERY_BEHAVIOR.RouterDiscoveryDisabled">
            <summary>Router discovery is disabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_ROUTER_DISCOVERY_BEHAVIOR.RouterDiscoveryEnabled">
            <summary>Router discovery is enabled. This setting is the default value for IPv6.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_ROUTER_DISCOVERY_BEHAVIOR.RouterDiscoveryDhcp">
            <summary>Router discovery is configured based on DHCP. This setting is the default value for IPv4.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_ROUTER_DISCOVERY_BEHAVIOR.RouterDiscoveryUnchanged">
            <summary>When the properties of an IP interface are being set, the value for router discovery should be unchanged.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NL_SUFFIX_ORIGIN">
            <summary>
            <para>
            The <c>IP_SUFFIX_ORIGIN</c> enumeration specifies the origin of an IPv4 or IPv6 address suffix, and is used with the
            IP_ADAPTER_UNICAST_ADDRESS structure.
            </para>
            </summary>
            <remarks>
            <para>The <c>IP_SUFFIX_ORIGIN</c> enumeration is used in the <c>SuffixOrigin</c> member of the IP_ADAPTER_UNICAST_ADDRESS structure.</para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the <c>IP_SUFFIX_ORIGIN</c> enumeration is defined in the Nldef.h header file which is automatically included by
            the Iptypes.h header file. In order to use the <c>IP_SUFFIX_ORIGIN</c> enumeration, the Winsock2.h header file must be included
            before the Iptypes.h header file.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_SUFFIX_ORIGIN.IpSuffixOriginOther">
            <summary>The IP address suffix was provided by a source other than those defined in this enumeration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_SUFFIX_ORIGIN.IpSuffixOriginManual">
            <summary>The IP address suffix was manually specified.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_SUFFIX_ORIGIN.IpSuffixOriginWellKnown">
            <summary>The IP address suffix is from a well-known source.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_SUFFIX_ORIGIN.IpSuffixOriginDhcp">
            <summary>The IP address suffix was provided by DHCP settings.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_SUFFIX_ORIGIN.IpSuffixOriginLinkLayerAddress">
            <summary>The IP address suffix was obtained from the link-layer address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_SUFFIX_ORIGIN.IpSuffixOriginRandom">
            <summary>The IP address suffix was obtained from a random source.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_SUFFIX_ORIGIN.IpSuffixOriginUnchanged">
            <summary>
            The IP address suffix should be unchanged. This value is used when setting the properties for a unicast IP interface when
            the value for the IP suffix origin should be left unchanged.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NL_BANDWIDTH_INFORMATION">
            <summary>
            <para>
            The <c>NL_BANDWIDTH_INFORMATION</c> structure contains read-only information on the available bandwidth estimates and associated
            variance as determined by the TCP/IP stack.
            </para>
            </summary>
            <remarks>
            <para>
            The <c>NL_BANDWIDTH_INFORMATION</c> structure is defined in the Nldef.h header file which is automatically included by the
            Iptypes.h header file which is automatically included in the Iphlpapi.h header file. The Nldef.h and Iptypes.h header files
            should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_BANDWIDTH_INFORMATION.Bandwidth">
            <summary>
            <para>The estimated maximum available bandwidth, in bits per second.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_BANDWIDTH_INFORMATION.Instability">
            <summary>
            <para>A measure of the variation based on recent bandwidth samples, in bits per second.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_BANDWIDTH_INFORMATION.BandwidthPeaked">
            <summary>
            <para>
            A value that indicates if the bandwidth estimate in the <c>Bandwidth</c> member has peaked and reached its maximum value for
            the given network conditions.
            </para>
            <para>
            The TCP/IP stack uses a heuristic to set this variable. Until this variable is set, there is no guarantee that the true
            available maximum bandwidth is not higher than the estimated bandwidth in the <c>Bandwidth</c> member. However, it is safe
            to assume that maximum available bandwidth is not lower than the estimate reported in the <c>Bandwidth</c> member.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NL_INTERFACE_OFFLOAD_ROD">
            <summary>
            <para>
            The <c>NL_INTERFACE_OFFLOAD_ROD</c> structure specifies a set of flags that indicate the offload capabilities for an IP interface.
            </para>
            </summary>
            <remarks>
            <para>The <c>NL_INTERFACE_OFFLOAD_ROD</c> structure is defined on Windows Vista and later.</para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_INTERFACE_OFFLOAD_ROD.Flags">
            <summary>The flags.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.NL_INTERFACE_OFFLOAD_ROD.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NL_INTERFACE_OFFLOAD_ROD.SupportedFlags">
            <summary>The flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_INTERFACE_OFFLOAD_ROD.SupportedFlags.NlChecksumSupported">
            <summary>
            <para>The network adapter for this network interface supports the offload of IP checksum calculations.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_INTERFACE_OFFLOAD_ROD.SupportedFlags.NlOptionsSupported">
            <summary>
            <para>
            The network adapter for this network interface supports the offload of IP checksum calculations for IPv4 packets with IP options.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_INTERFACE_OFFLOAD_ROD.SupportedFlags.TlDatagramChecksumSupported">
            <summary>
            <para>The network adapter for this network interface supports the offload of UDP checksum calculations.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_INTERFACE_OFFLOAD_ROD.SupportedFlags.TlStreamChecksumSupported">
            <summary>
            <para>The network adapter for this network interface supports the offload of TCP checksum calculations.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_INTERFACE_OFFLOAD_ROD.SupportedFlags.TlStreamOptionsSupported">
            <summary>
            <para>
            The network adapter for this network interface supports the offload of TCP checksum calculations for IPv4 packets
            containing IP options.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_INTERFACE_OFFLOAD_ROD.SupportedFlags.FastPathCompatible">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_INTERFACE_OFFLOAD_ROD.SupportedFlags.TlLargeSendOffloadSupported">
            <summary>
            <para>
            The network adapter for this network interface supports TCP Large Send Offload Version 1. With this capability, TCP can
            pass a buffer to be transmitted that is bigger than the maximum transmission unit (MTU) supported by the medium. Version
            1 allows TCP to pass a buffer up to 64K to be transmitted.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_INTERFACE_OFFLOAD_ROD.SupportedFlags.TlGiantSendOffloadSupported">
            <summary>
            <para>
            The network adapter for this network interface supports TCP Large Send Offload Version 2. With this capability, TCP can
            pass a buffer to be transmitted that is bigger than the maximum transmission unit (MTU) supported by the medium. Version
            2 allows TCP to pass a buffer up to 256K to be transmitted.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_HINT">
            <summary>
            <para>
            Describes a level of network connectivity, the usage charge for a network connection, and other members reflecting cost factors.
            </para>
            <para>
            The last four members of <c>NL_NETWORK_CONNECTIVITY_HINT</c> collectively work together to allow you to resolve the cost of
            using a connection. See the guidelines in How to manage metered network cost constraints.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_HINT.ConnectivityLevel">
            <summary>
            <para>Type: <c>NL_NETWORK_CONNECTIVITY_LEVEL_HINT</c></para>
            <para>The level of network connectivity.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_HINT.ConnectivityCost">
            <summary>
            <para>Type: <c>NL_NETWORK_CONNECTIVITY_COST_HINT</c></para>
            <para>The usage charge for the network connection.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_HINT.ApproachingDataLimit">
            <summary><see langword="true"/> if the connection is approaching its data limit, otherwise <see langword="false"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_HINT.OverDataLimit">
            <summary><see langword="true"/> if the connection has exceeded its data limit, otherwise <see langword="false"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.NL_NETWORK_CONNECTIVITY_HINT.Roaming">
            <summary><see langword="true"/> if the connection is roaming, otherwise <see langword="false"/>.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_BOOLEAN_OPTIONAL">
            <summary>
            The <c>TCP_BOOLEAN_OPTIONAL</c> enumeration defines the states that a caller can specify when updating a member in the read/write
            information for a TCP connection.
            </summary>
            <remarks>
            <para>The <c>TCP_BOOLEAN_OPTIONAL</c> enumeration is defined on Windows Vista and later.</para>
            <para>
            The collection of extended statistics on a TCP connection are enabled and disabled using calls to the SetPerTcp6ConnectionEStats
            and SetPerTcpConnectionEStats functions where the type of extended statistics specified is one of values from the TCP_ESTATS_TYPE
            enumeration type. A value from the <c>TCP_BOOLEAN_OPTIONAL</c> enumeration is used to specify how a member in the
            TCP_ESTATS_BANDWIDTH_RW_v0 structure should be updated to enable or disable extended statistics on a TCP connection for bandwidth estimation.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_BOOLEAN_OPTIONAL.TcpBoolOptDisabled">
            <summary>The option should be disabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_BOOLEAN_OPTIONAL.TcpBoolOptEnabled">
            <summary>The option should be enabled.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_BOOLEAN_OPTIONAL.TcpBoolOptUnchanged">
            <summary>The option should be unchanged.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE">
            <summary>
            The <c>TCP_ESTATS_TYPE</c> enumeration defines the type of extended statistics for a TCP connection that is requested or being set.
            </summary>
            <remarks>
            <para>The <c>TCP_ESTATS_TYPE</c> enumeration is defined on Windows Vista and later.</para>
            <para>
            The GetPerTcp6ConnectionEStats and <c>GetPerTcp6ConnectionEStats</c> functions are designed to use TCP to diagnose performance
            problems in both the network and the application. If a network based application is performing poorly, TCP can determine if the
            bottleneck is in the sender, the receiver or the network itself. If the bottleneck is in the network, TCP can provide specific
            information about its nature.
            </para>
            <para>
            The GetPerTcp6ConnectionEStats and <c>GetPerTcp6ConnectionEStats</c> functions are used to retrieve extended statistics for a TCP
            connection based on the type of extended statistics specified using one of values from the <c>TCP_ESTATS_TYPE</c> enumeration
            type. The collection of extended statistics on a TCP connection are enabled and disabled using calls to the
            SetPerTcp6ConnectionEStats and SetPerTcpConnectionEStats functions where the type of extended statistics specified is one of
            values from the <c>TCP_ESTATS_TYPE</c> enumeration type.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE.TcpConnectionEstatsSynOpts">
            <summary>
            This value specifies SYN exchange information for a TCP connection. Only read-only static information is available for this
            enumeration value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE.TcpConnectionEstatsData">
            <summary>
            This value specifies extended data transfer information for a TCP connection. Only read-only dynamic information and
            read/write information are available for this enumeration value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE.TcpConnectionEstatsSndCong">
            <summary>
            This value specifies sender congestion for a TCP connection. All three types of information (read-only static, read-only
            dynamic, and read/write information) are available for this enumeration value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE.TcpConnectionEstatsPath">
            <summary>This value specifies extended path measurement information for a TCP connection. This information is used to infer segment reordering on the path from the local sender to the remote receiver. Only read-only dynamic information and read/write information are available for this enumeration value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE.TcpConnectionEstatsSendBuff">
            <summary>
            This value specifies extended output-queuing information for a TCP connection. Only read-only dynamic information and
            read/write information are available for this enumeration value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE.TcpConnectionEstatsRec">
            <summary>This value specifies extended local-receiver information for a TCP connection. Only read-only dynamic information and read/write information are available for this enumeration value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE.TcpConnectionEstatsObsRec">
            <summary>
            This value specifies extended remote-receiver information for a TCP connection. Only read-only dynamic information and
            read/write information are available for this enumeration value.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE.TcpConnectionEstatsBandwidth">
            <summary>This value specifies bandwidth estimation statistics for a TCP connection on bandwidth. Only read-only dynamic information and read/write information are available for this enumeration value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_TYPE.TcpConnectionEstatsFineRtt">
            <summary>
            This value specifies fine-grained round-trip time (RTT) estimation statistics for a TCP connection. Only read-only dynamic
            information and read/write information are available for this enumeration value.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_SOFT_ERROR">
            <summary>The <c>TCP_SOFT_ERROR</c> enumeration defines the reason for non-fatal or soft errors recorded on a TCP connection.</summary>
            <remarks>
            <para>The <c>TCP_SOFT_ERROR</c> enumeration is defined on Windows Vista and later.</para>
            <para>
            The values in this enumeration are defined in the IETF draft RFC on the TCP Extended Statistics MIB. For more information, see http://www.ietf.org/rfc/rfc4898.txt.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_SOFT_ERROR.TcpErrorNone">
            <summary>No soft errors have occurred.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_SOFT_ERROR.TcpErrorBelowDataWindow">
            <summary>
            All data in the segment is below the send unacknowledged (SND.UNA) sequence number. This soft error is normal for keep-alives
            and zero window probes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_SOFT_ERROR.TcpErrorAboveDataWindow">
            <summary>
            Some data in the segment is above send window (SND.WND) size. This soft error indicates an implementation bug or possible attack.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_SOFT_ERROR.TcpErrorBelowAckWindow">
            <summary>
            An ACK was received below the SND.UNA sequence number. This soft error indicates that the return path is reordering ACKs.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_SOFT_ERROR.TcpErrorAboveAckWindow">
            <summary>
            An ACK was received for data that we have not sent. This soft error indicates an implementation bug or possible attack.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_SOFT_ERROR.TcpErrorBelowTsWindow">
            <summary>
            The Time-stamp Echo Reply (TSecr) on the segment is older than the current TS.Recent (a time-stamp to be echoed in TSecr
            whenever a segment is sent). This error is applicable to TCP connections that use the TCP Timestamps option (TSopt) defined
            by the IETF in RFC 1323. For more information, see http://www.ietf.org/rfc/rfc1323.txt. This soft error is normal for the
            rare case where the Protect Against Wrapped Sequences numbers (PAWS) mechanism detects data reordered by the network.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_SOFT_ERROR.TcpErrorAboveTsWindow">
            <summary>
            The TSecr on the segment is newer than the current TS.Recent. This soft error indicates an implementation bug or possible attack.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_SOFT_ERROR.TcpErrorDataChecksumError">
            <summary>
            An incorrect TCP checksum was received. Note that this value is intrinsically fragile, because the header fields used to
            identify the connection may have been corrupted.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_SOFT_ERROR.TcpErrorDataLengthError">
            <summary>
            A data length error occurred. This value is not defined in the IETF draft RFC on the TCP Extended Statistics MIB.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_SOFT_ERROR.TcpErrorMaxSoftError">
            <summary>
            The maximum possible value for the TCP_SOFT_ERROR_STATE enumeration type. This is not a legal value for the reason for a soft
            error for a TCP connection.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_BANDWIDTH_ROD_v0">
            <summary>
            The <c>TCP_ESTATS_BANDWIDTH_ROD_v0</c> structure contains read-only dynamic information for extended TCP statistics on bandwidth
            estimation for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_BANDWIDTH_ROD_v0</c> structure is used as part of the TCP extended statistics feature available on Windows
            Vista and later.
            </para>
            <para>
            The <c>TCP_ESTATS_BANDWIDTH_ROD_v0</c> is defined as version 0 of the structure for read-only dynamic information for extended
            TCP statistics on bandwidth estimation for a TCP connection. This information is available after the connection has been established.
            </para>
            <para>
            The <c>TCP_ESTATS_BANDWIDTH_ROD_v0</c> structure is retrieved by calls to the GetPerTcp6ConnectionEStats or
            GetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsBandwidth</c> is passed in the EstatsType parameter. Extended TCP
            statistics need to be enabled to retrieve this structure.
            </para>
            <para>
            The members of this structure are not defined in the IETF RFC on the TCP Extended Statistics MIB. For more information on this
            RFC, see http://www.ietf.org/rfc/rfc4898.txt.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_BANDWIDTH_ROD_v0.OutboundBandwidth">
            <summary>
            <para>Type: <c>ULONG64</c></para>
            <para>The computed outbound bandwidth estimate, in bits per second, for the network path for the TCP connection.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_BANDWIDTH_ROD_v0.InboundBandwidth">
            <summary>
            <para>Type: <c>ULONG64</c></para>
            <para>The computed inbound bandwidth estimate, in bits per second, for the network path for the TCP connection.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_BANDWIDTH_ROD_v0.OutboundInstability">
            <summary>
            <para>Type: <c>ULONG64</c></para>
            <para>
            A measure, in bits per second, of the instability of the outbound bandwidth estimate for the network path for the TCP connection.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_BANDWIDTH_ROD_v0.InboundInstability">
            <summary>
            <para>Type: <c>ULONG64</c></para>
            <para>
            A measure, in bits per second, of the instability of the inbound bandwidth estimate for the network path for the TCP connection.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_BANDWIDTH_ROD_v0.OutboundBandwidthPeaked">
            <summary>
            <para>Type: <c>BOOLEAN</c></para>
            <para>
            A boolean value that indicates if the computed outbound bandwidth estimate for the network path for the TCP connection has
            reached its peak value.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_BANDWIDTH_ROD_v0.InboundBandwidthPeaked">
            <summary>
            <para>Type: <c>BOOLEAN</c></para>
            <para>
            A boolean value that indicates if the computed inbound bandwidth estimate for the network path for the TCP connection has
            reached its peak value.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_BANDWIDTH_RW_v0">
            <summary>
            The <c>TCP_ESTATS_BANDWIDTH_RW_v0</c> structure contains read/write configuration information for extended TCP statistics on
            bandwidth estimation for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_BANDWIDTH_RW_v0</c> structure is used as part of the TCP extended statistics feature available on Windows Vista
            and later.
            </para>
            <para>
            The <c>TCP_ESTATS_BANDWIDTH_RW_v0</c> is defined as version 0 of the structure for read/write configuration information on
            bandwidth estimation for a TCP connection.
            </para>
            <para>
            Extended TCP statistics on bandwidth estimation for a TCP connection are enabled and disabled using this structure and the
            SetPerTcp6ConnectionEStats and SetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsBandwidth</c> is passed in the
            EstatsType parameter.
            </para>
            <para>
            The Offset parameter passed to the SetPerTcp6ConnectionEStats and SetPerTcpConnectionEStats functions is currently unused and
            must be set to 0. Consequently, the <c>TCP_ESTATS_BANDWIDTH_RW_v0</c> structure pointed to by the Rw parameter when the
            EstatsType parameter is set to <c>TcpConnectionEstatsBandwidth</c> must have both the <c>EnableCollectionOutbound</c> and
            <c>EnableCollectionInbound</c> structure members set to the preferred values in a single call to the
            <c>SetPerTcp6ConnectionEStats</c> and <c>SetPerTcpConnectionEStats</c> functions.
            </para>
            <para>
            The <c>TCP_ESTATS_BANDWIDTH_RW_v0</c> structure is retrieved by calls to the GetPerTcp6ConnectionEStats or
            GetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsBandwidth</c> is passed in the EstatsType parameter.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_BANDWIDTH_RW_v0.EnableCollectionOutbound">
            <summary>
            <para>A value that indicates if extended statistics on a TCP connection should be collected for outbound bandwidth estimation.</para>
            <para>
            If this member is set to <c>TcpBoolOptEnabled</c>, extended statistics on the TCP connection for outbound bandwidth
            estimation are enabled. If this member is set to <c>TcpBoolOptDisabled</c>, extended statistics on the TCP connection for
            outbound bandwidth estimation are disabled. If this member is set to <c>TcpBoolOptUnchanged</c>, extended statistics on the
            TCP connection for outbound bandwidth estimation are left unchanged.
            </para>
            <para>The default state for this member when not set is disabled.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_BANDWIDTH_RW_v0.EnableCollectionInbound">
            <summary>
            <para>A value that indicates if extended statistics on a TCP connection should be collected for inbound bandwidth estimation.</para>
            <para>
            If this member is set to <c>TcpBoolOptEnabled</c>, extended statistics on the TCP connection for inbound bandwidth estimation
            are enabled. If this member is set to <c>TcpBoolOptDisabled</c>, extended statistics on the TCP connection for inbound
            bandwidth estimation are disabled. If this member is set to <c>TcpBoolOptUnchanged</c>, extended statistics on the TCP
            connection for inbound bandwidth estimation are unchanged.
            </para>
            <para>The default state for this member when not set is disabled.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_DATA_ROD_v0">
            <summary>
            The <c>TCP_ESTATS_DATA_ROD_v0</c> structure contains read-only dynamic information for extended TCP statistics on data transfer
            for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_DATA_ROD_v0</c> structure is used as part of the TCP extended statistics feature available on Windows Vista and later.
            </para>
            <para>
            The <c>TCP_ESTATS_DATA_ROD_v0</c> is defined as version 0 of the structure for read-only dynamic information for extended TCP
            statistics on data transfer for a TCP connection. This information is available after the connection has been established.
            </para>
            <para>
            The <c>TCP_ESTATS_DATA_ROD_v0</c> structure is retrieved by calls to the GetPerTcp6ConnectionEStats or GetPerTcpConnectionEStats
            functions when <c>TcpConnectionEstatsData</c> is passed in the EstatsType parameter. Extended TCP statistics need to be enabled
            to retrieve this structure.
            </para>
            <para>
            The members of this structure are defined in the IETF RFC on the TCP Extended Statistics MIB. For more information, see http://www.ietf.org/rfc/rfc4898.txt.
            </para>
            <para>
            The following is the mapping of the members in the <c>TCP_ESTATS_DATA_ROD_v0</c> structure to the entries defined in RFC 4898 for
            extended TCP statistics:
            </para>
            <list type="table">
            <listheader>
            <term>Term</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>DataBytesOut</term>
            <term>tcpEStatsPerfDataOctetsOut</term>
            </item>
            <item>
            <term>DataSegsOut</term>
            <term>tcpEStatsPerfDataSegsOut</term>
            </item>
            <item>
            <term>DataBytesIn</term>
            <term>tcpEStatsPerfDataOctetsIn</term>
            </item>
            <item>
            <term>DataSegsIn</term>
            <term>tcpEStatsPerfDataSegsIn</term>
            </item>
            <item>
            <term>SegsOut</term>
            <term>tcpEStatsPerfSegsOut</term>
            </item>
            <item>
            <term>SegsIn</term>
            <term>tcpEStatsPerfSegsIn</term>
            </item>
            <item>
            <term>SoftErrors</term>
            <term>tcpEStatsStackSoftErrors</term>
            </item>
            <item>
            <term>SoftErrorReason</term>
            <term>tcpEStatsStackSoftErrorReason</term>
            </item>
            <item>
            <term>SndUna</term>
            <term>tcpEStatsAppSndUna</term>
            </item>
            <item>
            <term>SndNxt</term>
            <term>tcpEStatsAppSndNxt</term>
            </item>
            <item>
            <term>SndMax</term>
            <term>tcpEStatsAppSndMax</term>
            </item>
            <item>
            <term>ThruBytesAcked</term>
            <term>tcpEStatsAppThruOctetsAcked</term>
            </item>
            <item>
            <term>RcvNxt</term>
            <term>tcpEStatsAppRcvNxt</term>
            </item>
            <item>
            <term>ThruBytesReceived</term>
            <term>tcpEStatsAppThruOctetsReceived</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_DATA_ROD_v0.DataBytesOut">
            <summary>
            <para>Type: <c>ULONG64</c></para>
            <para>
            The number of octets of data contained in transmitted segments, including retransmitted data. Note that this does not include
            TCP headers.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_DATA_ROD_v0.DataSegsOut">
            <summary>
            <para>Type: <c>ULONG64</c></para>
            <para>The number of segments sent containing a positive length data segment.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_DATA_ROD_v0.DataBytesIn">
            <summary>
            <para>Type: <c>ULONG64</c></para>
            <para>
            The number of octets contained in received data segments, including retransmitted data. Note that this does not include TCP headers.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_DATA_ROD_v0.DataSegsIn">
            <summary>
            <para>Type: <c>ULONG64</c></para>
            <para>The number of segments received containing a positive length data segment.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_DATA_ROD_v0.SegsOut">
            <summary>
            <para>Type: <c>ULONG64</c></para>
            <para>The total number of segments sent.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_DATA_ROD_v0.SegsIn">
            <summary>
            <para>Type: <c></c></para>
            <para>The total number of segments received.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_DATA_ROD_v0.SoftErrors">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The number of segments that fail various consistency tests during TCP input processing. Soft errors might cause the segment
            to be discarded but some do not. Some of these soft errors cause the generation of a TCP acknowledgment, while others are
            silently discarded.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_DATA_ROD_v0.SoftErrorReason">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            A value that identifies which consistency test most recently failed during TCP input processing. This object is set every
            time the <c>SoftErrors</c> member is incremented.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_DATA_ROD_v0.SndUna">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The value of the oldest unacknowledged sequence number. Note that this member is a TCP state variable.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_DATA_ROD_v0.SndNxt">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The next sequence number to be sent. Note that this member is not monotonic (and thus not a counter), because TCP sometimes
            retransmits lost data by pulling the member back to the missing data.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_DATA_ROD_v0.SndMax">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The farthest forward (right most or largest) sequence number to be sent. Note that this will be equal to the <c>SndNxt</c>
            member except when the <c>SndNxt</c> member is pulled back during recovery.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_DATA_ROD_v0.ThruBytesAcked">
            <summary>
            <para>Type: <c>ULONG64</c></para>
            <para>
            The number of octets for which cumulative acknowledgments have been received. Note that this will be the sum of changes to
            the <c>SndNxt</c> member.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_DATA_ROD_v0.RcvNxt">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The next sequence number to be received. Note that this member is not monotonic (and thus not a counter), because TCP
            sometimes retransmits lost data by pulling the member back to the missing data.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_DATA_ROD_v0.ThruBytesReceived">
            <summary>
            <para>Type: <c>ULONG64</c></para>
            <para>
            The number of octets for which cumulative acknowledgments have been sent. Note that this will be the sum of changes to the
            <c>RcvNxt</c> member.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_DATA_RW_v0">
            <summary>
            The <c>TCP_ESTATS_DATA_RW_v0</c> structure contains read/write configuration information for extended TCP statistics on data
            transfer for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_DATA_RW_v0</c> structure is used as part of the TCP extended statistics feature available on Windows Vista and later.
            </para>
            <para>
            The <c>TCP_ESTATS_DATA_RW_v0</c> is defined as version 0 of the structure for read/write configuration information on extended
            data transfer for a TCP connection.
            </para>
            <para>
            Extended TCP statistics on extended data transfer information for a TCP connection are enabled and disabled using this structure
            and the SetPerTcp6ConnectionEStats and SetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsData</c> is passed in the
            EstatsType parameter.
            </para>
            <para>
            The <c>TCP_ESTATS_DATA_RW_v0</c> structure is retrieved by calls to the GetPerTcp6ConnectionEStats or GetPerTcpConnectionEStats
            functions when <c>TcpConnectionEstatsData</c> is passed in the EstatsType parameter.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_DATA_RW_v0.EnableCollection">
            <summary>
            <para>A value that indicates if extended statistics on a TCP connection should be collected for data transfer information.</para>
            <para>
            If this member is set to <c>TRUE</c>, extended statistics on the TCP connection are enabled. If this member is set to
            <c>FALSE</c>, extended statistics on the TCP connection are disabled.
            </para>
            <para>The default state for this member when not set is disabled.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_FINE_RTT_ROD_v0">
            <summary>
            The <c>TCP_ESTATS_FINE_RTT_ROD_v0</c> structure contains read-only dynamic information for extended TCP statistics on
            fine-grained round-trip time (RTT) estimation for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_FINE_RTT_ROD_v0</c> structure is used as part of the TCP extended statistics feature available on Windows Vista
            and later.
            </para>
            <para>
            The <c>TCP_ESTATS_FINE_RTT_ROD_v0</c> is defined as version 0 of the structure for read-only dynamic information for extended TCP
            statistics on fine-grained round-trip time estimation for a TCP connection. This information is available after the connection
            has been established.
            </para>
            <para>
            The <c>TCP_ESTATS_FINE_RTT_ROD_v0</c> structure is retrieved by calls to the GetPerTcp6ConnectionEStats or
            GetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsFineRtt</c> is passed in the EstatsType parameter. Extended TCP
            statistics need to be enabled to retrieve this structure.
            </para>
            <para>
            The TCP retransmission timer is discussed in detail in the IETF RFC 2988 on Computing TCP's Retransmission Timer For more
            information, see http://www.ietf.org/rfc/rfc2988.txt.
            </para>
            <para>
            The members of this structure are not defined in the IETF RFC on the TCP Extended Statistics MIB. However, there are members in
            the TCP_ESTATS_PATH_ROD_v0 structure that provide similar time measurements in milliseconds. For more information, see the
            <c>TCP_ESTATS_PATH_ROD_v0</c> structure and http://www.ietf.org/rfc/rfc4898.txt.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_FINE_RTT_ROD_v0.RttVar">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The round trip time variation, in microseconds, used in receive window auto-tuning when the TCP extended statistics feature
            is enabled.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_FINE_RTT_ROD_v0.MaxRtt">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The maximum sampled round trip time, in microseconds.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_FINE_RTT_ROD_v0.MinRtt">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The minimum sampled round trip time, in microseconds.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_FINE_RTT_ROD_v0.SumRtt">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            A smoothed value round trip time, in microseconds, computed from all sampled round trip times. The smoothing is a weighted
            additive function that uses the <c>RttVar</c> member.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_FINE_RTT_RW_v0">
            <summary>
            The <c>TCP_ESTATS_FINE_RTT_RW_v0</c> structure contains read/write configuration information for extended TCP statistics on
            fine-grained round-trip time (RTT) estimation statistics for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_FINE_RTT_RW_v0</c> structure is used as part of the TCP extended statistics feature available on Windows Vista
            and later.
            </para>
            <para>
            The <c>TCP_ESTATS_FINE_RTT_RW_v0</c> is defined as version 0 of the structure for read/write configuration information on
            fine-grained round-trip time estimation statistics for a TCP connection.
            </para>
            <para>
            Extended TCP statistics on extended path measurement information for a TCP connection are enabled and disabled using this
            structure and the SetPerTcp6ConnectionEStats and SetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsFineRtt</c> is
            passed in the EstatsType parameter.
            </para>
            <para>
            The <c>TCP_ESTATS_FINE_RTT_RW_v0</c> structure is retrieved by calls to the GetPerTcp6ConnectionEStats or
            GetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsFineRtt</c> is passed in the EstatsType parameter.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_FINE_RTT_RW_v0.EnableCollection">
            <summary>
            <para>
            A value that indicates if extended statistics on a TCP connection should be collected for fine-grained RTT estimation statistics.
            </para>
            <para>
            If this member is set to <c>TRUE</c>, extended statistics on the TCP connection are enabled. If this member is set to
            <c>FALSE</c>, extended statistics on the TCP connection are disabled.
            </para>
            <para>The default state for this member when not set is disabled.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_OBS_REC_ROD_v0">
            <summary>
            The <c>TCP_ESTATS_OBS_REC_ROD_v0</c> structure contains read-only dynamic information for extended TCP statistics observed on the
            remote receiver for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_OBS_REC_ROD_v0</c> structure is used as part of the TCP extended statistics feature available on Windows Vista
            and later.
            </para>
            <para>
            The <c>TCP_ESTATS_OBS_REC_ROD_v0</c> is defined as version 0 of the structure for read-only dynamic information for extended TCP
            statistics on the local receiver for a TCP connection. This information is available after the connection has been established.
            </para>
            <para>
            The <c>TCP_ESTATS_OBS_REC_ROD_v0</c> structure is retrieved by calls to the GetPerTcp6ConnectionEStats or
            GetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsObsRec</c> is passed in the EstatsType parameter. Extended TCP
            statistics need to be enabled to retrieve this structure.
            </para>
            <para>
            The members of this structure are defined in the IETF RFC on the TCP Extended Statistics MIB. For more information, see http://www.ietf.org/rfc/rfc4898.txt.
            </para>
            <para>
            The following is the mapping of the members in the <c>TCP_ESTATS_OBS_REC_ROD_v0</c> structure to the entries defined in RFC 4898
            for extended TCP statistics:
            </para>
            <list type="table">
            <listheader>
            <term>Term</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CurRwinRcvd</term>
            <term>tcpEStatsPerfCurRwinRcvd</term>
            </item>
            <item>
            <term>MaxRwinRcvd</term>
            <term>tcpEStatsPerfMaxRwinRcvd</term>
            </item>
            <item>
            <term>MinRwinRcvd</term>
            <term>No mapping to this member.</term>
            </item>
            <item>
            <term>WinScaleRcvd</term>
            <term>tcpEStatsStackWinScaleRcvd</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_OBS_REC_ROD_v0.CurRwinRcvd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The most recent window advertisement, in bytes, received from the remote receiver.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_OBS_REC_ROD_v0.MaxRwinRcvd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The maximum window advertisement, in bytes, received from the remote receiver.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_OBS_REC_ROD_v0.MinRwinRcvd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The minimum window advertisement, in bytes, received from the remote receiver.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_OBS_REC_ROD_v0.WinScaleRcvd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The value of the received window scale option if one was received from the remote receiver; otherwise, a value of -1.
            </para>
            <para>
            Note that if both the <c>WinScaleSent</c> member of the TCP_ESTATS_REC_ROD_v0 structure and the <c>WinScaleRcvd</c> member
            are not -1, then Snd.Wind.Scale will be the same as this value and used to scale receiver window announcements from the
            remote host to the local host.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_OBS_REC_RW_v0">
            <summary>
            The <c>TCP_ESTATS_OBS_REC_RW_v0</c> structure contains read/write configuration information for extended TCP statistics observed
            on the remote receiver for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_OBS_REC_RW_v0</c> structure is used as part of the TCP extended statistics feature available on Windows Vista
            and later.
            </para>
            <para>
            The <c>TCP_ESTATS_OBS_REC_RW_v0</c> is defined as version 0 of the structure for read/write configuration information observed on
            the remote receiver for a TCP connection.
            </para>
            <para>
            Extended TCP statistics on remote-receiver information for a TCP connection are enabled and disabled using this structure and the
            SetPerTcp6ConnectionEStats and SetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsObsRec</c> is passed in the
            EstatsType parameter.
            </para>
            <para>
            The TCP_ESTATS_REC_RW_v0 structure is retrieved by calls to the GetPerTcp6ConnectionEStats or GetPerTcpConnectionEStats functions
            when <c>TcpConnectionEstatsObsRec</c> is passed in the EstatsType parameter.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_OBS_REC_RW_v0.EnableCollection">
            <summary>
            <para>A value that indicates if extended statistics on a TCP connection should be collected for remote-receiver information.</para>
            <para>
            If this member is set to <c>TRUE</c>, extended statistics on the TCP connection are enabled. If this member is set to
            <c>FALSE</c>, extended statistics on the TCP connection are disabled.
            </para>
            <para>The default state for this member when not set is disabled.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0">
            <summary>
            The <c>TCP_ESTATS_PATH_ROD_v0</c> structure contains read-only dynamic information for extended TCP statistics on network path
            measurement for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_PATH_ROD_v0</c> structure is used as part of the TCP extended statistics feature available on Windows Vista and later.
            </para>
            <para>
            The <c>TCP_ESTATS_PATH_ROD_v0</c> is defined as version 0 of the structure for read-only dynamic information on network path
            measurement for a TCP connection. This information is available after the connection has been established.
            </para>
            <para>
            The <c>TCP_ESTATS_PATH_ROD_v0</c> structure is retrieved by calls to the GetPerTcp6ConnectionEStats or GetPerTcpConnectionEStats
            functions when <c>TcpConnectionEstatsPath</c> is passed in the EstatsType parameter. Extended TCP statistics need to be enabled
            to retrieve this structure.
            </para>
            <para>
            The path MTU discovery and maximum segment size are discussed in detail in the IETF RFC 1191 on Path MTU discovery. For more
            information, see http://www.ietf.org/rfc/rfc1191.txt.
            </para>
            <para>
            TCP congestion control and congestion control algorithms are discussed in detail in the IETF RFC 2581 on TCP Congestion Control.
            For more information, see http://www.ietf.org/rfc/rfc2581.txt.
            </para>
            <para>
            SACK and an extension to the SACK option are discussed in detail in the IETF RFC 2883 on An Extension to the Selective
            Acknowledgment (SACK) Option for TCP. For more information, see http://www.ietf.org/rfc/rfc2883.txt.
            </para>
            <para>
            The TCP retransmission timer (RTO) and the smoothed round-trip-time (RTT) are discussed in detail in the IETF RFC 2988 on
            Computing TCP's Retransmission Timer. For more information, see http://www.ietf.org/rfc/rfc2988.txt.
            </para>
            <para>
            Explicit Congestion Notification in IP is discussed in detail in the IETF RFC 2581 on The Addition of Explicit Congestion
            Notification (ECN) to IP. For more information, see http://www.ietf.org/rfc/rfc3168.txt.
            </para>
            <para>
            The members of this structure are defined in the IETF RFC on the TCP Extended Statistics MIB. For more information, see http://www.ietf.org/rfc/rfc4898.txt.
            </para>
            <para>
            The following is the mapping of the members in the <c>TCP_ESTATS_PATH_ROD_v0</c> structure to the entries defined in RFC 4898 for
            extended TCP statistics:
            </para>
            <list type="table">
            <listheader>
            <term>Term</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>FastRetran</term>
            <term>tcpEStatsStackFastRetran</term>
            </item>
            <item>
            <term>Timeouts</term>
            <term>tcpEStatsPerfTimeouts</term>
            </item>
            <item>
            <term>SubsequentTimeouts</term>
            <term>tcpEStatsStackSubsequentTimeouts</term>
            </item>
            <item>
            <term>CurTimeoutCount</term>
            <term>tcpEStatsStackCurTimeoutCount</term>
            </item>
            <item>
            <term>AbruptTimeouts</term>
            <term>tcpEStatsStackAbruptTimeouts</term>
            </item>
            <item>
            <term>PktsRetrans</term>
            <term>tcpEStatsPerfSegsRetrans</term>
            </item>
            <item>
            <term>BytesRetrans</term>
            <term>tcpEStatsPerfOctetsRetrans</term>
            </item>
            <item>
            <term>DupAcksIn</term>
            <term>tcpEStatsStackDupAcksIn</term>
            </item>
            <item>
            <term>SacksRcvd</term>
            <term>tcpEStatsStackSACKsRcvd</term>
            </item>
            <item>
            <term>SackBlocksRcvd</term>
            <term>tcpEStatsStackSACKBlocksRcvd</term>
            </item>
            <item>
            <term>CongSignals</term>
            <term>tcpEStatsPerfCongSignals</term>
            </item>
            <item>
            <term>PreCongSumCwnd</term>
            <term>tcpEStatsPathPreCongSumCwnd</term>
            </item>
            <item>
            <term>PreCongSumRtt</term>
            <term>tcpEStatsPathPreCongSumRTT</term>
            </item>
            <item>
            <term>PostCongSumRtt</term>
            <term>tcpEStatsPathPostCongSumRTT</term>
            </item>
            <item>
            <term>PostCongCountRtt</term>
            <term>tcpEStatsPathPostCongCountRTT</term>
            </item>
            <item>
            <term>EcnSignals</term>
            <term>tcpEStatsPathECNsignals</term>
            </item>
            <item>
            <term>EceRcvd</term>
            <term>tcpEStatsPathCERcvd</term>
            </item>
            <item>
            <term>SendStall</term>
            <term>tcpEStatsStackSendStall</term>
            </item>
            <item>
            <term>QuenchRcvd</term>
            <term>No mapping to this member.</term>
            </item>
            <item>
            <term>RetranThresh</term>
            <term>tcpEStatsPathRetranThresh</term>
            </item>
            <item>
            <term>SndDupAckEpisodes</term>
            <term>tcpEStatsPathDupAckEpisodes</term>
            </item>
            <item>
            <term>SumBytesReordered</term>
            <term>tcpEStatsPathSumOctetsReordered</term>
            </item>
            <item>
            <term>NonRecovDa</term>
            <term>tcpEStatsPathNonRecovDA</term>
            </item>
            <item>
            <term>NonRecovDaEpisodes</term>
            <term>tcpEStatsPathNonRecovDAEpisodes</term>
            </item>
            <item>
            <term>AckAfterFr</term>
            <term>No mapping to this member.</term>
            </item>
            <item>
            <term>DsackDups</term>
            <term>tcpEStatsStackDSACKDups</term>
            </item>
            <item>
            <term>SampleRtt</term>
            <term>tcpEStatsPathSampleRTT</term>
            </item>
            <item>
            <term>SmoothedRtt</term>
            <term>tcpEStatsPerfSmoothedRTT</term>
            </item>
            <item>
            <term>RttVar</term>
            <term>tcpEStatsPathRTTVar</term>
            </item>
            <item>
            <term>MaxRtt</term>
            <term>tcpEStatsPathMaxRTT</term>
            </item>
            <item>
            <term>MinRtt</term>
            <term>tcpEStatsPathMinRTT</term>
            </item>
            <item>
            <term>SumRtt</term>
            <term>tcpEStatsPathSumRTT</term>
            </item>
            <item>
            <term>CountRtt</term>
            <term>tcpEStatsPathCountRTT</term>
            </item>
            <item>
            <term>CurRto</term>
            <term>tcpEStatsPerfCurRTO</term>
            </item>
            <item>
            <term>MaxRto</term>
            <term>tcpEStatsPathMaxRTO</term>
            </item>
            <item>
            <term>MinRto</term>
            <term>tcpEStatsPathMinRTO</term>
            </item>
            <item>
            <term>CurMss</term>
            <term>tcpEStatsPerfCurMSS</term>
            </item>
            <item>
            <term>MaxMss</term>
            <term>tcpEStatsStackMaxMSS</term>
            </item>
            <item>
            <term>MinMss</term>
            <term>tcpEStatsStackMinMSS</term>
            </item>
            <item>
            <term>SpuriousRtoDetections</term>
            <term>tcpEStatsStackSpuriousRtoDetected</term>
            </item>
            </list>
            <para>
            The TCP_ESTATS_FINE_RTT_ROD_v0 structure has members that provide similar data to the <c>RttVar</c>, <c>MaxRtt</c>,
            <c>MinRtt</c>, and <c>SumRtt</c> members of the <c>TCP_ESTATS_PATH_ROD_v0</c> structure. However, the time is reported in
            microseconds for the similar members of the <c>TCP_ESTATS_FINE_RTT_ROD_v0</c> structure.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.FastRetran">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of invocations of the Fast Retransmit algorithm.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.Timeouts">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The number of times the retransmit timeout has expired when the retransmission timer back-off multiplier is equal to one.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.SubsequentTimeouts">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of times the retransmit timeout has expired after the retransmission timer has been doubled.</para>
            <para>For more information, see section 5.5 of RFC 2988 discussed in the Remarks below.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.CurTimeoutCount">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The current number of times the retransmit timeout has expired without receiving an acknowledgment for new data.</para>
            <para>
            The <c>CurTimeoutCount</c> member is reset to zero when new data is acknowledged and incremented for each invocation of
            Section 5.5 of RFC 2988.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.AbruptTimeouts">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The number of timeouts that occurred without any immediately preceding duplicate acknowledgments or other indications of
            congestion. Abrupt timeouts indicate that the path lost an entire window of data or acknowledgments.
            </para>
            <para>
            Timeouts that are preceded by duplicate acknowledgments or other congestion signals (Explicit Congestion Notification, for
            example) are not counted as abrupt, and might have been avoided by a more sophisticated Fast Retransmit algorithm.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.PktsRetrans">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of segments transmitted containing at least some retransmitted data.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.BytesRetrans">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of bytes retransmitted.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.DupAcksIn">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of duplicate ACKs received.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.SacksRcvd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of Selective Acknowledgment (SACK) options received.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.SackBlocksRcvd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of SACK blocks received (within SACK options).</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.CongSignals">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The number of multiplicative downward congestion window adjustments due to all forms of congestion signals, including Fast
            Retransmit, Explicit Congestion Notification (ECN), and timeouts. This member summarizes all events that invoke the
            Multiplicative Decrease (MD) portion of Additive Increase Multiplicative Decrease (AIMD) congestion control, and as such is
            the best indicator of how a congestion windows is being affected by congestion.
            </para>
            <para>
            Note that retransmission timeouts multiplicatively reduce the window implicitly by setting the slow start threshold size, and
            are included in the value stored in the <c>CongSignals</c> member. In order to minimize spurious congestion indications due
            to out-of-order segments, the <c>CongSignals</c> member is incremented in association with the Fast Retransmit algorithm.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.PreCongSumCwnd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The sum of the values of the congestion window, in bytes, captured each time a congestion signal is received.</para>
            <para>
            This member is updated each time the <c>CongSignals</c> member is incremented, such that the change in the
            <c>PreCongSumCwnd</c> member divided by the change in the <c>CongSignals</c> member is the average window (over some
            interval) just prior to a congestion signal.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.PreCongSumRtt">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The sum, in milliseconds, of the last sample of the network round-trip-time (RTT) prior to the received congestion signals.
            The last sample of the RTT is stored in the <c>SampleRtt</c> member.
            </para>
            <para>
            The <c>PreCongSumRtt</c> member is updated each time the <c>CongSignals</c> member is incremented, such that the change in
            the <c>PreCongSumRtt</c> divided by the change in the <c>CongSignals</c> member is the average RTT (over some interval) just
            prior to a congestion signal.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.PostCongSumRtt">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The sum, in milliseconds, of the first sample of the network RTT (stored in the <c>SampleRtt</c> member) following each
            congestion signal.
            </para>
            <para>
            The change in the <c>PostCongSumRtt</c> member divided by the change in the <c>PostCongCountRtt</c> member is the average RTT
            (over some interval) just after a congestion signal.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.PostCongCountRtt">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of RTT samples, in bytes, included in the <c>PostCongSumRtt</c> member.</para>
            <para>
            The change in the <c>PostCongSumRtt</c> member divided by the change in the <c>PostCongCountRtt</c> member is the average RTT
            (over some interval) just after a congestion signal.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.EcnSignals">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of congestion signals delivered to the TCP sender via ECN.</para>
            <para>This is typically the number of segments bearing Echo Congestion</para>
            <para>Experienced (ECE) bits, but also includes segments failing the ECN nonce check or other explicit congestion signals.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.EceRcvd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of segments received with IP headers bearing Congestion Experienced (CE) markings.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.SendStall">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of interface stalls or other sender local resource limitations that are treated as congestion signals.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.QuenchRcvd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>Reserved for future use. This member is always set to zero.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.RetranThresh">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of duplicate acknowledgments required to trigger Fast Retransmit.</para>
            <para>Note that although this is constant in traditional Reno TCP implementations, it is adaptive in many newer TCP implementations.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.SndDupAckEpisodes">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The number of Duplicate Acks Sent when prior Ack was not duplicate. This is the number of times that a contiguous series of
            duplicate acknowledgments have been sent.
            </para>
            <para>
            This is an indication of the number of data segments lost or reordered on the path from the remote TCP endpoint to the near
            TCP endpoint.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.SumBytesReordered">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The sum of the amounts SND.UNA advances on the acknowledgment which ends a dup-ack episode without a retransmission.</para>
            <para>
            Note the change in the <c>SumBytesReordered</c> member divided by the change in the <c>NonRecovDaEpisodes</c> member is an
            estimate of the average reordering distance, over some interval.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.NonRecovDa">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The number of duplicate acks (or SACKS) that did not trigger a Fast Retransmit because ACK advanced prior to the number of
            duplicate acknowledgments reaching the <c>RetranThresh</c>.
            </para>
            <para>
            Note that the change in the <c>NonRecovDa</c> member divided by the change in the <c>NonRecovDaEpisodes</c> member is an
            estimate of the average reordering distance in segments over some interval.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.NonRecovDaEpisodes">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The number of duplicate acknowledgment episodes that did not trigger a Fast Retransmit because ACK advanced prior to the
            number of duplicate acknowledgments reaching the <c>RetranThresh</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.AckAfterFr">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>Reserved for future use. This member is always set to zero.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.DsackDups">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of duplicate segments reported to the local host by D-SACK blocks.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.SampleRtt">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The most recent raw network round trip time measurement, in milliseconds, used in calculation of the retransmission timer (RTO).
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.SmoothedRtt">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The smoothed round trip time, in milliseconds, used in calculation of the RTO.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.RttVar">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The round trip time variation, in milliseconds, used in calculation of the RTO.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.MaxRtt">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The maximum sampled round trip time in milliseconds.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.MinRtt">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The minimum sampled round trip time in milliseconds.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.SumRtt">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The sum of all sampled round trip times in milliseconds.</para>
            <para>
            Note that the change in the <c>SumRtt</c> member divided by the change in the <c>CountRtt</c> member is the mean RTT,
            uniformly averaged over an enter interval.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.CountRtt">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of round trip time samples included in the <c>SumRtt</c> member.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.CurRto">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The current value, in milliseconds, of the retransmit timer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.MaxRto">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The maximum value, in milliseconds, of the retransmit timer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.MinRto">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The minimum value, in milliseconds, of the retransmit timer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.CurMss">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The current maximum segment size (MSS), in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.MaxMss">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The maximum MSS, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.MinMss">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The minimum MSS, in bytes.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_ROD_v0.SpuriousRtoDetections">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of acknowledgments reporting segments that have already been retransmitted due to a Retransmission Timeout.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_RW_v0">
            <summary>
            The <c>TCP_ESTATS_PATH_RW_v0</c> structure contains read/write configuration information for extended TCP statistics on path
            measurement for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_PATH_RW_v0</c> structure is used as part of the TCP extended statistics feature available on Windows Vista and later.
            </para>
            <para>
            The <c>TCP_ESTATS_PATH_RW_v0</c> is defined as version 0 of the structure for read/write configuration information on extended
            path measurement for a TCP connection. This information is used to infer segment reordering on the path from the local sender to
            the remote receiver.
            </para>
            <para>
            Extended TCP statistics on extended path measurement information for a TCP connection are enabled and disabled using this
            structure and the SetPerTcp6ConnectionEStats and SetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsPath</c> is
            passed in the EstatsType parameter.
            </para>
            <para>
            The <c>TCP_ESTATS_PATH_RW_v0</c> structure is retrieved by calls to the GetPerTcp6ConnectionEStats or GetPerTcpConnectionEStats
            functions when <c>TcpConnectionEstatsPath</c> is passed in the EstatsType parameter.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_PATH_RW_v0.EnableCollection">
            <summary>
            <para>A value that indicates if extended statistics on a TCP connection should be collected for path measurement information.</para>
            <para>
            If this member is set to <c>TRUE</c>, extended statistics on the TCP connection are enabled. If this member is set to
            <c>FALSE</c>, extended statistics on the TCP connection are disabled.
            </para>
            <para>The default state for this member when not set is disabled.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_REC_ROD_v0">
            <summary>
            The <c>TCP_ESTATS_REC_ROD_v0</c> structure contains read-only dynamic information for extended TCP statistics on the local
            receiver for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_REC_ROD_v0</c> structure is used as part of the TCP extended statistics feature available on Windows Vista and later.
            </para>
            <para>
            The <c>TCP_ESTATS_REC_ROD_v0</c> is defined as version 0 of the structure for read-only dynamic information for extended TCP
            statistics on the local receiver for a TCP connection. This information is available after the connection has been established.
            </para>
            <para>
            The <c>TCP_ESTATS_REC_ROD_v0</c> structure is retrieved by calls to the GetPerTcp6ConnectionEStats or GetPerTcpConnectionEStats
            functions when <c>TcpConnectionEstatsRec</c> is passed in the EstatsType parameter. Extended TCP statistics need to be enabled to
            retrieve this structure.
            </para>
            <para>
            TCP congestion control and congestion control algorithms are discussed in detail in the IETF RFC 2581 on TCP Congestion Control.
            For more information, see http://www.ietf.org/rfc/rfc2581.txt.
            </para>
            <para>
            Explicit Congestion Notification in IP is discussed in detail in the IETF RFC 2581 on The Addition of Explicit Congestion
            Notification (ECN) to IP. For more information, see http://www.ietf.org/rfc/rfc3168.txt.
            </para>
            <para>
            The members of this structure are defined in the IETF RFC on the TCP Extended Statistics MIB. For more information, see http://www.ietf.org/rfc/rfc4898.txt.
            </para>
            <para>
            The following is the mapping of the members in the <c>TCP_ESTATS_REC_ROD_v0</c> structure to the entries defined in RFC 4898 for
            extended TCP statistics:
            </para>
            <list type="table">
            <listheader>
            <term>Term</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CurRwinSent</term>
            <term>tcpEStatsPerfCurRwinSent</term>
            </item>
            <item>
            <term>MaxRwinSent</term>
            <term>tcpEStatsPerfMaxRwinSent</term>
            </item>
            <item>
            <term>MinRwinSent</term>
            <term>No mapping to this member.</term>
            </item>
            <item>
            <term>LimRwin</term>
            <term>tcpEStatsTuneLimRwin</term>
            </item>
            <item>
            <term>DupAckEpisodes</term>
            <term>tcpEStatsPathDupAckEpisodes</term>
            </item>
            <item>
            <term>DupAcksOut</term>
            <term>tcpEStatsPathDupAcksOut</term>
            </item>
            <item>
            <term>CeRcvd</term>
            <term>tcpEStatsPathCERcvd</term>
            </item>
            <item>
            <term>EcnSent</term>
            <term>No mapping to this member.</term>
            </item>
            <item>
            <term>EcnNoncesRcvd</term>
            <term>No mapping to this member.</term>
            </item>
            <item>
            <term>CurReasmQueue</term>
            <term>tcpEStatsStackCurReasmQueue</term>
            </item>
            <item>
            <term>MaxReasmQueue</term>
            <term>tcpEStatsStackMaxReasmQueue</term>
            </item>
            <item>
            <term>CurAppRQueue</term>
            <term>tcpEStatsAppCurAppRQueue</term>
            </item>
            <item>
            <term>MaxAppRQueue</term>
            <term>tcpEStatsAppMaxAppRQueue</term>
            </item>
            <item>
            <term>WinScaleSent</term>
            <term>tcpEStatsStackWinScaleSent</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_REC_ROD_v0.CurRwinSent">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The most recent window advertisement, in bytes, that has been sent.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_REC_ROD_v0.MaxRwinSent">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The maximum window advertisement, in bytes, that has been sent.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_REC_ROD_v0.MinRwinSent">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The minimum window advertisement, in bytes, that has been sent.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_REC_ROD_v0.LimRwin">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The maximum window advertisement, in bytes, that may be sent.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_REC_ROD_v0.DupAckEpisodes">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The number of Duplicate Acks Sent when prior Ack was not duplicate. This is the number of times that a contiguous series of
            duplicate acknowledgments have been sent.
            </para>
            <para>
            This is an indication of the number of data segments lost or reordered on the path from the remote TCP endpoint to the near
            TCP endpoint.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_REC_ROD_v0.DupAcksOut">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of duplicate ACKs sent.</para>
            <para>
            The ratio of the change in the <c>DupAcksOut</c> member to the change in the <c>DupAckEpisodes</c> member is an indication of
            reorder or recovery distance over some interval.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_REC_ROD_v0.CeRcvd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of segments received with IP headers bearing Congestion Experienced (CE) markings.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_REC_ROD_v0.EcnSent">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>Reserved for future use. This member is always set to zero.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_REC_ROD_v0.EcnNoncesRcvd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>Reserved for future use. This member is always set to zero.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_REC_ROD_v0.CurReasmQueue">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The current number of bytes of sequence space spanned by the reassembly queue.</para>
            <para>
            This is generally the difference between rcv.nxt and the sequence number of the right most edge of the reassembly queue.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_REC_ROD_v0.MaxReasmQueue">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The maximum number of bytes of sequence space spanned by the reassembly queue.</para>
            <para>This is the maximum value of the <c>CurReasmQueue</c> member.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_REC_ROD_v0.CurAppRQueue">
            <summary>
            <para>Type: <c>SIZE_T</c></para>
            <para>The current number of bytes of application data that has been acknowledged by TCP but not yet delivered to the application.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_REC_ROD_v0.MaxAppRQueue">
            <summary>
            <para>Type: <c>SIZE_T</c></para>
            <para>The maximum number of bytes of application data that has been acknowledged by TCP but not yet delivered to the application.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_REC_ROD_v0.WinScaleSent">
            <summary>
            <para>Type: <c>UCHAR</c></para>
            <para>The value of the transmitted window scale option if one was sent; otherwise, a value of -1.</para>
            <para>
            Note that if both the <c>WinScaleSent</c> member and the <c>WinScaleRcvd</c> member of the TCP_ESTATS_OBS_REC_ROD_v0
            structure are not -1, then Rcv.Wind.Scale will be the same as this value and used to scale receiver window announcements from
            the local host to the remote host.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_REC_RW_v0">
            <summary>
            The <c>TCP_ESTATS_REC_RW_v0</c> structure contains read/write configuration information for extended TCP statistics on the local
            receiver for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_REC_RW_v0</c> structure is used as part of the TCP extended statistics feature available on Windows Vista and later.
            </para>
            <para>
            The <c>TCP_ESTATS_REC_RW_v0</c> is defined as version 0 of the structure for read/write configuration information on the local
            receiver for a TCP connection.
            </para>
            <para>
            Extended TCP statistics on local-receiver information for a TCP connection are enabled and disabled using this structure and the
            SetPerTcp6ConnectionEStats and SetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsRec</c> is passed in the EstatsType parameter.
            </para>
            <para>
            The <c>TCP_ESTATS_REC_RW_v0</c> structure is retrieved by calls to the GetPerTcp6ConnectionEStats or GetPerTcpConnectionEStats
            functions when <c>TcpConnectionEstatsRec</c> is passed in the EstatsType parameter.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_REC_RW_v0.EnableCollection">
            <summary>
            <para>A value that indicates if extended statistics on a TCP connection should be collected for local-receiver information.</para>
            <para>
            If this member is set to <c>TRUE</c>, extended statistics on the TCP connection are enabled. If this member is set to
            <c>FALSE</c>, extended statistics on the TCP connection are disabled.
            </para>
            <para>The default state for this member when not set is disabled.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SEND_BUFF_ROD_v0">
            <summary>
            The <c>TCP_ESTATS_SEND_BUFF_ROD_v0</c> structure contains read-only dynamic information for extended TCP statistics on output
            queuing for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_SEND_BUFF_ROD_v0</c> structure is used as part of the TCP extended statistics feature available on Windows
            Vista and later.
            </para>
            <para>
            The <c>TCP_ESTATS_SEND_BUFF_ROD_v0</c> is defined as version 0 of the structure for read-only dynamic information for extended
            TCP statistics on output queuing for a TCP connection. This information is available after the connection has been established.
            </para>
            <para>
            The <c>TCP_ESTATS_SEND_BUFF_ROD_v0</c> structure is retrieved by calls to the GetPerTcp6ConnectionEStats or
            GetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsSendBuff</c> is passed in the EstatsType parameter. Extended TCP
            statistics need to be enabled to retrieve this structure.
            </para>
            <para>
            The members of this structure are defined in the IETF RFC on the TCP Extended Statistics MIB. For more information, see http://www.ietf.org/rfc/rfc4898.txt.
            </para>
            <para>
            The following is the mapping of the members in the <c>TCP_ESTATS_SEND_BUFF_ROD_v0</c> structure to the entries defined in RFC
            4898 for extended TCP statistics:
            </para>
            <list type="table">
            <listheader>
            <term>Term</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CurRetxQueue</term>
            <term>tcpEStatsStackCurRetxQueue</term>
            </item>
            <item>
            <term>MaxRetxQueue</term>
            <term>tcpEStatsStackMaxRetxQueue</term>
            </item>
            <item>
            <term>CurAppWQueue</term>
            <term>tcpEStatsAppCurAppWQueue</term>
            </item>
            <item>
            <term>MaxAppWQueue</term>
            <term>tcpEStatsAppMaxAppWQueue</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SEND_BUFF_ROD_v0.CurRetxQueue">
            <summary>
            <para>Type: <c>SIZE_T</c></para>
            <para>The current number of bytes of data occupying the retransmit queue.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SEND_BUFF_ROD_v0.MaxRetxQueue">
            <summary>
            <para>Type: <c>SIZE_T</c></para>
            <para>The maximum number of bytes of data occupying the retransmit queue.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SEND_BUFF_ROD_v0.CurAppWQueue">
            <summary>
            <para>Type: <c>SIZE_T</c></para>
            <para>
            The current number of bytes of application data buffered by TCP, pending the first transmission (to the left of SND.NXT or SndMax).
            </para>
            <para>
            This data will generally be transmitted (and SND.NXT advanced to the left) as soon as there is an available congestion window
            or receiver window. This is the amount of data readily available for transmission, without scheduling the application. TCP
            performance may suffer if there is insufficient queued write data.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SEND_BUFF_ROD_v0.MaxAppWQueue">
            <summary>
            <para>Type: <c>SIZE_T</c></para>
            <para>The maximum number of bytes of application data buffered by TCP, pending the first transmission.</para>
            <para>
            This is the maximum value of the <c>CurAppWQueue</c> member. The <c>MaxAppWQueue</c> and <c>CurAppWQueue</c> members can be
            used to determine if insufficient queued data is steady state (suggesting insufficient queue space) or transient (suggesting
            insufficient application performance or excessive CPU load or scheduler latency).
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SEND_BUFF_RW_v0">
            <summary>
            The <c>TCP_ESTATS_SEND_BUFF_RW_v0</c> structure contains read/write configuration information for extended TCP statistics on
            output queuing for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_SEND_BUFF_RW_v0</c> structure is used as part of the TCP extended statistics feature available on Windows Vista
            and later.
            </para>
            <para>
            The <c>TCP_ESTATS_SEND_BUFF_RW_v0</c> is defined as version 0 of the structure for read/write configuration information on output
            queuing for a TCP connection.
            </para>
            <para>
            Extended TCP statistics on output queuing for a TCP connection are enabled and disabled using this structure and the
            SetPerTcp6ConnectionEStats and SetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsSendBuff</c> is passed in the
            EstatsType parameter.
            </para>
            <para>
            The <c>TCP_ESTATS_SEND_BUFF_RW_v0</c> structure is retrieved by calls to the GetPerTcp6ConnectionEStats or
            GetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsSendBuff</c> is passed in the EstatsType parameter.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SEND_BUFF_RW_v0.EnableCollection">
            <summary>
            <para>A value that indicates if extended statistics on a TCP connection should be collected on output queuing.</para>
            <para>
            If this member is set to <c>TRUE</c>, extended statistics on the TCP connection are enabled. If this member is set to
            <c>FALSE</c>, extended statistics on the TCP connection are disabled.
            </para>
            <para>The default state for this member when not set is disabled.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0">
            <summary>
            The <c>TCP_ESTATS_SND_CONG_ROD_v0</c> structure contains read-only dynamic information for extended TCP statistics on sender
            congestion related data for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_SND_CONG_ROD_v0</c> structure is used as part of the TCP extended statistics feature available on Windows Vista
            and later.
            </para>
            <para>
            The <c>TCP_ESTATS_SND_CONG_ROD_v0</c> is defined as version 0 of the structure for read-only dynamic information on sender
            congestion related data for a TCP connection. This information is available after the connection has been established.
            </para>
            <para>
            The <c>TCP_ESTATS_SND_CONG_ROD_v0</c> structure is retrieved by calls to the GetPerTcp6ConnectionEStats or
            GetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsSndCong</c> is passed in the EstatsType parameter. Extended TCP
            statistics need to be enabled to retrieve this structure.
            </para>
            <para>
            TCP congestion control and congestion control algorithms are discussed in detail in the IETF RFC on TCP Congestion Control. For
            more information, see http://www.ietf.org/rfc/rfc2581.txt.
            </para>
            <para>
            The members of this structure are defined in the IETF RFC on the TCP Extended Statistics MIB. For more information, see http://www.ietf.org/rfc/rfc4898.txt.
            </para>
            <para>
            The following is the mapping of the members in the <c>TCP_ESTATS_SND_CONG_ROD_v0</c> structure to the entries defined in RFC 4898
            for extended TCP statistics:
            </para>
            <list type="table">
            <listheader>
            <term>Term</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>SndLimTransRwin</term>
            <term>tcpEStatsPerfSndLimTransRwin</term>
            </item>
            <item>
            <term>SndLimTimeRwin</term>
            <term>tcpEStatsPerfSndLimTimeRwin</term>
            </item>
            <item>
            <term>SndLimBytesRwin</term>
            <term>No mapping to this member.</term>
            </item>
            <item>
            <term>SndLimTransCwnd</term>
            <term>tcpEStatsPerfSndLimTransCwnd</term>
            </item>
            <item>
            <term>SndLimTimeCwnd</term>
            <term>tcpEStatsPerfSndLimTimeCwnd</term>
            </item>
            <item>
            <term>SndLimBytesCwnd</term>
            <term>No mapping to this member.</term>
            </item>
            <item>
            <term>SndLimTransSnd</term>
            <term>tcpEStatsPerfSndLimTransSnd</term>
            </item>
            <item>
            <term>SndLimTimeSnd</term>
            <term>tcpEStatsPerfSndLimTimeSnd</term>
            </item>
            <item>
            <term>SndLimBytesSnd</term>
            <term>No mapping to this member.</term>
            </item>
            <item>
            <term>SlowStart</term>
            <term>tcpEStatsStackSlowStart</term>
            </item>
            <item>
            <term>CongAvoid</term>
            <term>tcpEStatsStackCongAvoid</term>
            </item>
            <item>
            <term>OtherReductions</term>
            <term>tcpEStatsStackOtherReductions</term>
            </item>
            <item>
            <term>CurCwnd</term>
            <term>tcpEStatsPerfCurCwnd</term>
            </item>
            <item>
            <term>MaxSsCwnd</term>
            <term>tcpEStatsStackMaxSsCwnd</term>
            </item>
            <item>
            <term>MaxCaCwnd</term>
            <term>tcpEStatsStackMaxCaCwnd</term>
            </item>
            <item>
            <term>CurSsthresh</term>
            <term>tcpEStatsPerfCurSsthresh</term>
            </item>
            <item>
            <term>MaxSsthresh</term>
            <term>tcpEStatsStackMaxSsthresh</term>
            </item>
            <item>
            <term>MinSsthresh</term>
            <term>tcpEStatsStackMinSsthresh</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.SndLimTransRwin">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The number of transitions into the "Receiver Limited" state from either the "Congestion Limited" or "Sender Limited" states.
            This state is entered whenever TCP transmission stops because the sender has filled the announced receiver window.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.SndLimTimeRwin">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The cumulative time, in milliseconds, spent in the "Receiver Limited" state where TCP transmission stops because the sender
            has filled the announced receiver window.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.SndLimBytesRwin">
            <summary>
            <para>Type: <c>SIZE_T</c></para>
            <para>The total number of bytes sent in the "Receiver Limited" state.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.SndLimTransCwnd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The number of transitions into the "Congestion Limited" state from either the "Receiver Limited" or "Sender Limited" states.
            This state is entered whenever TCP transmission stops because the sender has reached some limit defined by TCP congestion
            control (the congestion window, for example) or other algorithms (retransmission timeouts) designed to control network traffic.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.SndLimTimeCwnd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The cumulative time, in milliseconds, spent in the "Congestion Limited" state. When there is a retransmission timeout, it is
            counted in this member and not the cumulative time for some other state.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.SndLimBytesCwnd">
            <summary>
            <para>Type: <c>SIZE_T</c></para>
            <para>The total number of bytes sent in the "Congestion Limited" state.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.SndLimTransSnd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The number of transitions into the "Sender Limited" state from either the "Receiver Limited" or "Congestion Limited" states.
            This state is entered whenever TCP transmission stops due to some sender limit such as running out of application data or
            other resources and the Karn algorithm. When TCP stops sending data for any reason, which cannot be classified as "Receiver
            Limited" or "Congestion Limited", it is treated as "Sender Limited".
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.SndLimTimeSnd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The cumulative time, in milliseconds, spent in the "Sender Limited" state.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.SndLimBytesSnd">
            <summary>
            <para>Type: <c>SIZE_T</c></para>
            <para>The total number of bytes sent in the "Sender Limited" state.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.SlowStart">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of times the congestion window has been increased by the "Slow Start" algorithm.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.CongAvoid">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The number of times the congestion window has been increased by the "Congestion Avoidance" algorithm.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.OtherReductions">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>
            The number of congestion window reductions made as a result of anything other than congestion control algorithms other than
            "Slow Start" and "Congestion Avoidance" algorithms.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.CurCwnd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The size, in bytes, of the current congestion window.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.MaxSsCwnd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The maximum size, in bytes, of the congestion window size used during "Slow Start."</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.MaxCaCwnd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The maximum size, in bytes, of the congestion window used during "Congestion Avoidance."</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.CurSsthresh">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The current size, in bytes, of the slow start threshold.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.MaxSsthresh">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The maximum size, in bytes, of the slow start threshold, excluding the initial value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROD_v0.MinSsthresh">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The minimum size, in bytes, of the slow start threshold.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROS_v0">
            <summary>
            The <c>TCP_ESTATS_SND_CONG_ROS_v0</c> structure contains read-only static information for extended TCP statistics on the maximum
            congestion window for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_SND_CONG_ROS_v0</c> structure is used as part of the TCP extended statistics feature available on Windows Vista
            and later.
            </para>
            <para>
            The <c>TCP_ESTATS_SND_CONG_ROS_v0</c> is defined as version 0 of the structure for read-only dynamic information on basic sender
            congestion data for a TCP connection. This information is available after the connection has been established.
            </para>
            <para>
            The <c>TCP_ESTATS_SND_CONG_ROS_v0</c> structure is retrieved by calls to the GetPerTcp6ConnectionEStats or
            GetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsSndCong</c> is passed in the EstatsType parameter. Extended TCP
            statistics need to be enabled to retrieve this structure.
            </para>
            <para>
            TCP congestion control and congestion control algorithms are discussed in detail in the IETF RFC on TCP Congestion Control. For
            more information, see http://www.ietf.org/rfc/rfc2581.txt.
            </para>
            <para>
            The members of this structure are defined in the IETF RFC on the TCP Extended Statistics MIB. For more information, see http://www.ietf.org/rfc/rfc4898.txt.
            </para>
            <para>
            The following is the mapping of the members in the <c>TCP_ESTATS_SND_CONG_ROS_v0</c> structure to the entries defined in RFC 4898
            for extended TCP statistics:
            </para>
            <list type="table">
            <listheader>
            <term>Term</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>LimCwnd</term>
            <term>tcpEStatsTuneLimCwnd</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_ROS_v0.LimCwnd">
            <summary>The maximum size, in bytes, of the congestion window that may be used.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_RW_v0">
            <summary>
            The <c>TCP_ESTATS_SND_CONG_RW_v0</c> structure contains read/write configuration information for extended TCP statistics on
            sender congestion for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_SND_CONG_RW_v0</c> structure is used as part of the TCP extended statistics feature available on Windows Vista
            and later.
            </para>
            <para>
            The <c>TCP_ESTATS_SND_CONG_RW_v0</c> is defined as version 0 of the structure for read/write configuration information on sender
            congestion for a TCP connection.
            </para>
            <para>
            Extended TCP statistics on sender congestion for a TCP connection are enabled and disabled using this structure and the
            SetPerTcp6ConnectionEStats and SetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsSndCongs</c> is passed in the
            EstatsType parameter.
            </para>
            <para>
            The <c>TCP_ESTATS_SND_CONG_RW_v0</c> structure is retrieved by calls to the GetPerTcp6ConnectionEStats or
            GetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsSndCong</c> is passed in the EstatsType parameter.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SND_CONG_RW_v0.EnableCollection">
            <summary>
            <para>A value that indicates if extended statistics on a TCP connection should be collected for sender congestion.</para>
            <para>
            If this member is set to <c>TRUE</c>, extended statistics on the TCP connection are enabled. If this member is set to
            <c>FALSE</c>, extended statistics on the TCP connection are disabled.
            </para>
            <para>The default state for this member when not set is disabled.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SYN_OPTS_ROS_v0">
            <summary>
            The <c>TCP_ESTATS_SYN_OPTS_ROS_v0</c> structure contains read-only static information for extended TCP statistics on SYN exchange
            for a TCP connection.
            </summary>
            <remarks>
            <para>
            The <c>TCP_ESTATS_SYN_OPTS_ROS_v0</c> structure is used as part of the TCP extended statistics feature available on Windows Vista
            and later.
            </para>
            <para>
            The <c>TCP_ESTATS_SYN_OPTS_ROS_v0</c> is defined as version 0 of the structure for read-only static information on SYN exchange
            for a TCP connection. The TCP protocol does not permit the members of this structure to change after the SYN exchange. This
            information is available after the SYN exchange has completed.
            </para>
            <para>
            The <c>TCP_ESTATS_SYN_OPTS_ROS_v0</c> structure is retrieved by calls to the GetPerTcp6ConnectionEStats or
            GetPerTcpConnectionEStats functions when <c>TcpConnectionEstatsSynOpts</c> is passed in the EstatsType parameter. Extended TCP
            statistics do not need to be enabled to retrieve this structure.
            </para>
            <para>
            The MSS in the <c>MssRcvd</c> and <c>MssSent</c> members is the maximum data in a single TCP datagram. The MSS can be a very
            large value.
            </para>
            <para>
            The members of this structure are defined in the IETF RFC on the TCP Extended Statistics MIB. For more information, see http://www.ietf.org/rfc/rfc4898.txt.
            </para>
            <para>
            The following is the mapping of the members in the <c>TCP_ESTATS_SYN_OPTS_ROS_v0</c> structure to the entries defined in RFC 4898
            for extended TCP statistics:
            </para>
            <list type="table">
            <listheader>
            <term>Term</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>ActiveOpen</term>
            <term>tcpEStatsStackActiveOpen</term>
            </item>
            <item>
            <term>MssRcvd</term>
            <term>tcpEStatsStackMSSRcvd</term>
            </item>
            <item>
            <term>MssSent</term>
            <term>tcpEStatsStackMSSSent</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SYN_OPTS_ROS_v0.ActiveOpen">
            <summary>
            <para>Type: <c>BOOLEAN</c></para>
            <para>A value that indicates if the TCP connection was an active open.</para>
            <para>
            If the local connection traversed the SYN-SENT state, then this member is set to <c>TRUE</c>. Otherwise, this member is set
            to <c>FALSE</c>.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SYN_OPTS_ROS_v0.MssRcvd">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The value received in an Maximum Segment Size (MSS) option during the SYN exchange, or zero if no MSS option was received.</para>
            <para>This value is the maximum data in a single TCP datagram that the remote host can receive.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_ESTATS_SYN_OPTS_ROS_v0.MssSent">
            <summary>
            <para>Type: <c>ULONG</c></para>
            <para>The value sent in an MSS option during the SYN exchange, or zero if no MSS option was sent.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_CONNECTION_OFFLOAD_STATE">
            <summary>
            <para>The <c>TCP_CONNECTION_OFFLOAD_STATE</c> enumeration defines the possible TCP offload states for a TCP connection.</para>
            </summary>
            <remarks>
            <para>The <c>TCP_CONNECTION_OFFLOAD_STATE</c> enumeration is defined on Windows Server 2003 and later.</para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed and the <c>TCP_CONNECTION_OFFLOAD_STATE</c> enumeration is defined in the Tcpmib.h header file not in the Iprtrmib.h
            header file. Note that the Tcpmib.h header file is automatically included in Iprtrmib.h which is automatically included in the
            Iphlpapi.h header file. The Tcpmib.h and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_CONNECTION_OFFLOAD_STATE.TcpConnectionOffloadStateInHost">
            <summary>The TCP connection is currently owned by the network stack on the local computer, and is not offloaded</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_CONNECTION_OFFLOAD_STATE.TcpConnectionOffloadStateOffloading">
            <summary>The TCP connection is in the process of being offloaded, but the offload has not been completed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_CONNECTION_OFFLOAD_STATE.TcpConnectionOffloadStateOffloaded">
            <summary>The TCP connection is offloaded to the network interface controller.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_CONNECTION_OFFLOAD_STATE.TcpConnectionOffloadStateUploading">
            <summary>
            The TCP connection is in the process of being uploaded back to the network stack on the local computer, but the
            reinstate-to-host process has not completed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_CONNECTION_OFFLOAD_STATE.TcpConnectionOffloadStateMax">
            <summary>
            The maximum possible value for the TCP_CONNECTION_OFFLOAD_STATE enumeration type. This is not a legal value for the possible
            TCP connection offload state.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.TCP_RTO_ALGORITHM">
            <summary>The TCP_RTO_ALGORITHM enumerates different TCP retransmission time-out algorithms.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_RTO_ALGORITHM.TcpRtoAlgorithmOther">
            <summary>Other.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_RTO_ALGORITHM.TcpRtoAlgorithmConstant">
            <summary>Constant time-out.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_RTO_ALGORITHM.TcpRtoAlgorithmRsre">
            <summary>MIL-STD-1778. See [RFC4022].</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_RTO_ALGORITHM.TcpRtoAlgorithmVanj">
            <summary>Van Jacobson's algorithm. See [RFC1144].</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_RTO_ALGORITHM.MIB_TCP_RTO_OTHER">
            <summary>Other.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_RTO_ALGORITHM.MIB_TCP_RTO_CONSTANT">
            <summary>Constant time-out.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_RTO_ALGORITHM.MIB_TCP_RTO_RSRE">
            <summary>MIL-STD-1778. See [RFC4022].</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.TCP_RTO_ALGORITHM.MIB_TCP_RTO_VANJ">
            <summary>Van Jacobson's algorithm. See [RFC1144].</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW">
            <summary>
            <para>The <c>MIB_TCP6ROW</c> structure contains information that describes an IPv6 TCP connection.</para>
            </summary>
            <remarks>
            <para>The <c>MIB_TCP6ROW</c> structure is defined on Windows Vista and later.</para>
            <para>
            The GetTcp6Table function retrieves the IPv6 TCP connection table on the local computer and returns this information in a
            MIB_TCP6TABLE structure.
            </para>
            <para>An array of <c>MIB_TCP6ROW</c> structures are contained in the <c>MIB_TCP6TABLE</c> structure.</para>
            <para>
            The <c>State</c> member indicates the state of the TCP entry in a TCP state diagram. A TCP connection progresses through a series
            of states during its lifetime. The states are: LISTEN, SYN-SENT, SYN-RECEIVED, ESTABLISHED, FIN-WAIT-1, FIN-WAIT-2, CLOSE-WAIT,
            CLOSING, LAST-ACK, TIME-WAIT, and the fictional state CLOSED. The CLOSED state is fictional because it represents the state when
            there is no Transmission Control Block, and therefore, no connection. The TCP protocol is described in RFC 793. For more
            information, see http://www.ietf.org/rfc/rfc793.txt.
            </para>
            <para>
            The <c>dwLocalPort</c>, and <c>dwRemotePort</c> members are in network byte order. In order to use the <c>dwLocalPort</c> or
            <c>dwRemotePort</c> members, the ntohs or inet_ntoa functions in Windows Sockets or similar functions may be needed.
            </para>
            <para>
            The <c>dwLocalScopeId</c>, and <c>dwRemoteScopeId</c> members are in network byte order. In order to use the
            <c>dwLocalScopeId</c> or <c>dwRemoteScopeId</c> members, the ntohl or inet_ntoa functions in Windows Sockets or similar functions
            may be needed.
            </para>
            <para>
            The <c>LocalAddr</c> and <c>RemoteAddr</c> members are stored in in6_addr structures. The RtlIpv6AddressToString or
            RtlIpv6AddressToStringEx functions may be used to convert the IPv6 address in the <c>LocalAddr</c> or <c>RemoteAddr</c> members
            to a string without loading the Windows Sockets DLL.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves the TCP connection table for IPv6 and prints the state of each connection represented as a
            <c>MIB_TCP6ROW</c> structure.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW.dwState">
            <summary>
            <para>Type: <c>MIB_TCP_STATE</c></para>
            <para>
            The state of the TCP connection. This member can be one of the values from the <c>MIB_TCP_STATE</c> enumeration type defined
            in the Tcpmib.h header file.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MIB_TCP_STATE_CLOSED 1</term>
            <term>The TCP connection is in the CLOSED state that represents no connection state at all.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_LISTEN 2</term>
            <term>The TCP connection is in the LISTEN state waiting for a connection request from any remote TCP and port.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_SYN_SENT 3</term>
            <term>
            The TCP connection is in the SYN-SENT state waiting for a matching connection request after having sent a connection request
            (SYN packet).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_SYN_RCVD 4</term>
            <term>
            The TCP connection is in the SYN-RECEIVED state waiting for a confirming connection request acknowledgment after having both
            received and sent a connection request (SYN packet).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_ESTAB 5</term>
            <term>
            The TCP connection is in the ESTABLISHED state that represents an open connection, data received can be delivered to the
            user. This is the normal state for the data transfer phase of the TCP connection.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_FIN_WAIT1 6</term>
            <term>
            The TCP connection is FIN-WAIT-1 state waiting for a connection termination request from the remote TCP, or an acknowledgment
            of the connection termination request previously sent.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_FIN_WAIT2 7</term>
            <term>The TCP connection is FIN-WAIT-1 state waiting for a connection termination request from the remote TCP.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_CLOSE_WAIT 8</term>
            <term>The TCP connection is in the CLOSE-WAIT state waiting for a connection termination request from the local user.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_CLOSING 9</term>
            <term>
            The TCP connection is in the CLOSING state waiting for a connection termination request acknowledgment from the remote TCP.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_LAST_ACK 10</term>
            <term>
            The TCP connection is in the LAST-ACK state waiting for an acknowledgment of the connection termination request previously
            sent to the remote TCP (which includes an acknowledgment of its connection termination request).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_TIME_WAIT 11</term>
            <term>
            The TCP connection is in the TIME-WAIT state waiting for enough time to pass to be sure the remote TCP received the
            acknowledgment of its connection termination request.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_DELETE_TCB 12</term>
            <term>
            The TCP connection is in the delete TCB state that represents the deletion of the Transmission Control Block (TCB), a data
            structure used to maintain information on each TCP entry.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW.LocalAddr">
            <summary>
            <para>Type: <c>IN6_ADDR</c></para>
            <para>
            The local IPv6 address for the TCP connection on the local computer. A value of zero indicates the listener can accept a
            connection on any interface.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW.dwLocalScopeId">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The local scope ID for the TCP connection on the local computer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW.dwLocalPort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The local port number in network byte order for the TCP connection on the local computer.</para>
            <para>
            The maximum size of an IP port number is 16 bits, so only the lower 16 bits should be used. The upper 16 bits may contain
            uninitialized data.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW.RemoteAddr">
            <summary>
            <para>Type: <c>IN6_ADDR</c></para>
            <para>
            The IPv6 address for the TCP connection on the remote computer. When the <c>State</c> member is <c>MIB_TCP_STATE_LISTEN</c>,
            this value has no meaning.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW.dwRemoteScopeId">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The remote scope ID for the TCP connection on the remote computer. When the <c>State</c> member is
            <c>MIB_TCP_STATE_LISTEN</c>, this value has no meaning.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW.dwRemotePort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The remote port number in network byte order for the TCP connection on the remote computer. When the <c>State</c> member is
            <c>MIB_TCP_STATE_LISTEN</c>, this value has no meaning.
            </para>
            <para>
            The maximum size of an IP port number is 16 bits, so only the lower 16 bits should be used. The upper 16 bits may contain
            uninitialized data.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_MODULE">
            <summary>
            <para>
            The <c>MIB_TCP6ROW_OWNER_MODULE</c> structure contains information that describes an IPv6 TCP connection bound to a specific
            process ID (PID) with ownership data.
            </para>
            </summary>
            <remarks>
            <para>
            The MIB_TCP6TABLE_OWNER_MODULE structure is returned by a call to GetExtendedTcpTable with the TableClass parameter set to a
            <c>TCP_TABLE_OWNER_MODULE_LISTENER</c>, <c>TCP_TABLE_OWNER_MODULE_CONNECTIONS</c>, or <c>TCP_TABLE_OWNER_MODULE_ALL</c> from the
            TCP_TABLE_CLASS enumeration and the ulAf parameter set to <c>AF_INET6</c>. The <c>MIB_TCP6TABLE_OWNER_MODULE</c> structure
            contains an array of <c>MIB_TCP6ROW_OWNER_MODULE</c> structures.
            </para>
            <para>
            The <c>dwState</c> member indicates the state of the TCP entry in a TCP state diagram. A TCP connection progresses through a
            series of states during its lifetime. The states are: LISTEN, SYN-SENT, SYN-RECEIVED, ESTABLISHED, FIN-WAIT-1, FIN-WAIT-2,
            CLOSE-WAIT, CLOSING, LAST-ACK, TIME-WAIT, and the fictional state CLOSED. The CLOSED state is fictional because it represents the
            state when there is no Transmission Control Block, and therefore, no connection. The TCP protocol is described in RFC 793. For
            more information, see http://www.ietf.org/rfc/rfc793.txt.
            </para>
            <para>
            The <c>ucLocalAddr</c> and <c>ucRemoteAddr</c> members are stored in a character array in network byte order. The
            RtlIpv6AddressToString or RtlIpv6AddressToStringEx functions may be used to convert the IPv6 address in the <c>ucLocalAddr</c> or
            <c>ucRemoteAddr</c> members to a string without loading the Windows Sockets DLL.
            </para>
            <para>
            The <c>dwLocalScopeId</c>, and <c>dwRemoteScopeId</c> members are in network byte order. In order to use the
            <c>dwLocalScopeId</c> or <c>dwRemoteScopeId</c> members, the ntohl or inet_ntoa functions in Windows Sockets or similar functions
            may be needed.
            </para>
            <para>
            The <c>dwLocalPort</c> and <c>dwRemotePort</c> members are in network byte order. In order to use the <c>dwLocalPort</c> or
            <c>dwRemotePort</c> members, the ntohs or inet_ntoa functions in Windows Sockets or similar functions may be needed.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Tcpmib.h header file, not in the Iprtrmib.h header file. Note that the Tcpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Tcpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_MODULE.ucLocalAddr">
            <summary>
            <para>Type: <c>UCHAR[16]</c></para>
            <para>
            The IPv6 address for the local endpoint of the TCP connection on the local computer. A value of zero indicates the listener
            can accept a connection on any interface.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_MODULE.dwLocalScopeId">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The scope ID in network byte order for the local IPv6 address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_MODULE.dwLocalPort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The port number in network byte order for the local endpoint of the TCP connection on the local computer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_MODULE.ucRemoteAddr">
            <summary>
            <para>Type: <c>UCHAR[16]</c></para>
            <para>
            The IPv6 address of the remote endpoint of the TCP connection on the remote computer. When the <c>dwState</c> member is
            <c>MIB_TCP_STATE_LISTEN</c>, this value has no meaning.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_MODULE.dwRemoteScopeId">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The scope ID in network byte order for the remote IPv6 address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_MODULE.dwRemotePort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The port number in network byte order for the remote endpoint of the TCP connection on the remote computer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_MODULE.dwState">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The state of the TCP connection. This member can be one of the values from the <c>MIB_TCP_STATE</c> enumeration defined in
            the Tcpmib.h header file. Note that the Tcpmib.h header file is automatically included in Iprtrmib.h, which is automatically
            included in the Iphlpapi.h header file. The Tcpmib.h and Iprtrmib.h header files should never be used directly.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MIB_TCP_STATE_CLOSED 1</term>
            <term>The TCP connection is in the CLOSED state that represents no connection state at all.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_LISTEN 2</term>
            <term>The TCP connection is in the LISTEN state waiting for a connection request from any remote TCP and port.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_SYN_SENT 3</term>
            <term>
            The TCP connection is in the SYN-SENT state waiting for a matching connection request after having sent a connection request
            (SYN packet).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_SYN_RCVD 4</term>
            <term>
            The TCP connection is in the SYN-RECEIVED state waiting for a confirming connection request acknowledgment after having both
            received and sent a connection request (SYN packet).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_ESTAB 5</term>
            <term>
            The TCP connection is in the ESTABLISHED state that represents an open connection, data received can be delivered to the
            user. This is the normal state for the data transfer phase of the TCP connection.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_FIN_WAIT1 6</term>
            <term>
            The TCP connection is FIN-WAIT-1 state waiting for a connection termination request from the remote TCP, or an acknowledgment
            of the connection termination request previously sent.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_FIN_WAIT2 7</term>
            <term>The TCP connection is FIN-WAIT-1 state waiting for a connection termination request from the remote TCP.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_CLOSE_WAIT 8</term>
            <term>The TCP connection is in the CLOSE-WAIT state waiting for a connection termination request from the local user.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_CLOSING 9</term>
            <term>
            The TCP connection is in the CLOSING state waiting for a connection termination request acknowledgment from the remote TCP.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_LAST_ACK 10</term>
            <term>
            The TCP connection is in the LAST-ACK state waiting for an acknowledgment of the connection termination request previously
            sent to the remote TCP (which includes an acknowledgment of its connection termination request).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_TIME_WAIT 11</term>
            <term>
            The TCP connection is in the TIME-WAIT state waiting for enough time to pass to be sure the remote TCP received the
            acknowledgment of its connection termination request.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_DELETE_TCB 12</term>
            <term>
            The TCP connection is in the delete TCB state that represents the deletion of the Transmission Control Block (TCB), a data
            structure used to maintain information on each TCP entry.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_MODULE.dwOwningPid">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The PID of the local process that issued a context bind for this TCP connection.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_MODULE.liCreateTimestamp">
            <summary>
            <para>Type: <c>LARGE_INTEGER</c></para>
            <para>A SYSTEMTIME structure that indicates when the context bind operation that created this TCP connection occurred.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_MODULE.OwningModuleInfo">
            <summary>
            <para>Type: <c>ULONGLONG[TCPIP_OWNING_MODULE_SIZE]</c></para>
            <para>An array of opaque data that contains ownership information.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_PID">
            <summary>
            <para>
            The <c>MIB_TCP6ROW_OWNER_PID</c> structure contains information that describes an IPv6 TCP connection associated with a specific
            process ID (PID).
            </para>
            </summary>
            <remarks>
            <para>
            The MIB_TCP6TABLE_OWNER_PID structure is returned by a call to GetExtendedTcpTable with the TableClass parameter set to
            <c>TCP_TABLE_OWNER_PID_LISTENER</c>, <c>TCP_TABLE_OWNER_PID_CONNECTIONS</c>, or <c>TCP_TABLE_OWNER_PID_ALL</c> from the
            TCP_TABLE_CLASS enumeration and the ulAf parameter set to <c>AF_INET6</c>. The <c>MIB_TCP6TABLE_OWNER_PID</c> structure contains
            an array of <c>MIB_TCP6ROW_OWNER_PID</c> structures.
            </para>
            <para>
            The <c>dwState</c> member indicates the state of the TCP entry in a TCP state diagram. A TCP connection progresses through a
            series of states during its lifetime. The states are: LISTEN, SYN-SENT, SYN-RECEIVED, ESTABLISHED, FIN-WAIT-1, FIN-WAIT-2,
            CLOSE-WAIT, CLOSING, LAST-ACK, TIME-WAIT, and the fictional state CLOSED. The CLOSED state is fictional because it represents the
            state when there is no Transmission Control Block, and therefore, no connection. The TCP protocol is described in RFC 793. For
            more information, see http://www.ietf.org/rfc/rfc793.txt.
            </para>
            <para>
            The <c>dwLocalPort</c>, and <c>dwRemotePort</c> members are in network byte order. In order to use the <c>dwLocalPort</c> or
            <c>dwRemotePort</c> members, the ntohs or inet_ntoa functions in Windows Sockets or similar functions may be needed.
            </para>
            <para>
            The <c>dwLocalScopeId</c>, and <c>dwRemoteScopeId</c> members are in network byte order. In order to use the
            <c>dwLocalScopeId</c> or <c>dwRemoteScopeId</c> members, the ntohl or inet_ntoa functions in Windows Sockets or similar functions
            may be needed.
            </para>
            <para>
            The <c>ucLocalAddr</c> and <c>ucRemoteAddr</c> members are stored in a character array in network byte order. The
            RtlIpv6AddressToString or RtlIpv6AddressToStringEx functions may be used to convert the IPv6 address in the <c>ucLocalAddr</c> or
            <c>ucRemoteAddr</c> members to a string without loading the Windows Sockets DLL.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Tcpmib.h header file, not in the Iprtrmib.h header file. Note that the Tcpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Tcpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_PID.ucLocalAddr">
            <summary>
            <para>Type: <c>UCHAR[16]</c></para>
            <para>
            The IPv6 address for the local endpoint of the TCP connection on the local computer. A value of zero indicates the listener
            can accept a connection on any interface.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_PID.dwLocalScopeId">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The scope ID in network byte order for the local IPv6 address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_PID.dwLocalPort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The port number in network byte order for the local endpoint of the TCP connection on the local computer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_PID.ucRemoteAddr">
            <summary>
            <para>Type: <c>UCHAR[16]</c></para>
            <para>
            The IPv6 address of the remote endpoint of the TCP connection on the remote computer. When the <c>dwState</c> member is
            <c>MIB_TCP_STATE_LISTEN</c>, this value has no meaning.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_PID.dwRemoteScopeId">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The scope ID in network byte order for the remote IPv6 address.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_PID.dwRemotePort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The port number in network byte order for the remote endpoint of the TCP connection on the remote computer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_PID.dwState">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The state of the TCP connection. This member can be one of the values from the <c>MIB_TCP_STATE</c> enumeration defined in
            the Tcpmib.h header file. Note that the Tcpmib.h header file is automatically included in Iprtrmib.h, which is automatically
            included in the Iphlpapi.h header file. The Tcpmib.h and Iprtrmib.h header files should never be used directly.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MIB_TCP_STATE_CLOSED 1</term>
            <term>The TCP connection is in the CLOSED state that represents no connection state at all.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_LISTEN 2</term>
            <term>The TCP connection is in the LISTEN state waiting for a connection request from any remote TCP and port.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_SYN_SENT 3</term>
            <term>
            The TCP connection is in the SYN-SENT state waiting for a matching connection request after having sent a connection request
            (SYN packet).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_SYN_RCVD 4</term>
            <term>
            The TCP connection is in the SYN-RECEIVED state waiting for a confirming connection request acknowledgment after having both
            received and sent a connection request (SYN packet).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_ESTAB 5</term>
            <term>
            The TCP connection is in the ESTABLISHED state that represents an open connection, data received can be delivered to the
            user. This is the normal state for the data transfer phase of the TCP connection.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_FIN_WAIT1 6</term>
            <term>
            The TCP connection is FIN-WAIT-1 state waiting for a connection termination request from the remote TCP, or an acknowledgment
            of the connection termination request previously sent.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_FIN_WAIT2 7</term>
            <term>The TCP connection is FIN-WAIT-1 state waiting for a connection termination request from the remote TCP.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_CLOSE_WAIT 8</term>
            <term>The TCP connection is in the CLOSE-WAIT state waiting for a connection termination request from the local user.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_CLOSING 9</term>
            <term>
            The TCP connection is in the CLOSING state waiting for a connection termination request acknowledgment from the remote TCP.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_LAST_ACK 10</term>
            <term>
            The TCP connection is in the LAST-ACK state waiting for an acknowledgment of the connection termination request previously
            sent to the remote TCP (which includes an acknowledgment of its connection termination request).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_TIME_WAIT 11</term>
            <term>
            The TCP connection is in the TIME-WAIT state waiting for enough time to pass to be sure the remote TCP received the
            acknowledgment of its connection termination request.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_DELETE_TCB 12</term>
            <term>
            The TCP connection is in the delete TCB state that represents the deletion of the Transmission Control Block (TCB), a data
            structure used to maintain information on each TCP entry.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW_OWNER_PID.dwOwningPid">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The PID of the local process that issued a context bind for this TCP connection.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW2">
            <summary>The <c>MIB_TCP6ROW2</c> structure contains information that describes an IPv6 TCP connection.</summary>
            <remarks>
            <para>The <c>MIB_TCP6ROW2</c> structure is defined on Windows Vista and later.</para>
            <para>
            The GetTcp6Table2function retrieves the IPv6 TCP connection table on the local computer and returns this information in a
            MIB_TCP6TABLE2 structure.
            </para>
            <para>An array of <c>MIB_TCP6ROW2</c> structures are contained in the <c>MIB_TCP6TABLE2</c> structure.</para>
            <para>
            The <c>State</c> member indicates the state of the TCP entry in a TCP state diagram. A TCP connection progresses through a series
            of states during its lifetime. The states are: LISTEN, SYN-SENT, SYN-RECEIVED, ESTABLISHED, FIN-WAIT-1, FIN-WAIT-2, CLOSE-WAIT,
            CLOSING, LAST-ACK, TIME-WAIT, and the fictional state CLOSED. The CLOSED state is fictional because it represents the state when
            there is no Transmission Control Block, and therefore, no connection. The TCP protocol is described in RFC 793. For more
            information, see http://www.ietf.org/rfc/rfc793.txt.
            </para>
            <para>
            The <c>dwLocalPort</c>, and <c>dwRemotePort</c> members are in network byte order. In order to use the <c>dwLocalPort</c> or
            <c>dwRemotePort</c> members, the ntohs or inet_ntoa functions in Windows Sockets or similar functions may be needed.
            </para>
            <para>
            The <c>dwLocalScopeId</c>, and <c>dwRemoteScopeId</c> members are in network byte order. In order to use the
            <c>dwLocalScopeId</c> or <c>dwRemoteScopeId</c> members, the ntohl or inet_ntoa functions in Windows Sockets or similar functions
            may be needed.
            </para>
            <para>
            The <c>LocalAddr</c> and <c>RemoteAddr</c> members are stored in in6_addr structures. The RtlIpv6AddressToString or
            RtlIpv6AddressToStringEx functions may be used to convert the IPv6 address in the <c>LocalAddr</c> or <c>RemoteAddr</c> members
            to a string without loading the Windows Sockets DLL.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW2.LocalAddr">
            <summary>
            <para>Type: <c>IN6_ADDR</c></para>
            <para>
            The local IPv6 address for the TCP connection on the local computer. A value of zero indicates the listener can accept a
            connection on any interface.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW2.dwLocalScopeId">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The local scope ID for the TCP connection on the local computer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW2.dwLocalPort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The local port number in network byte order for the TCP connection on the local computer.</para>
            <para>
            The maximum size of an IP port number is 16 bits, so only the lower 16 bits should be used. The upper 16 bits may contain
            uninitialized data.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW2.RemoteAddr">
            <summary>
            <para>Type: <c>IN6_ADDR</c></para>
            <para>
            The IPv6 address for the TCP connection on the remote computer. When the <c>State</c> member is <c>MIB_TCP_STATE_LISTEN</c>,
            this value has no meaning.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW2.dwRemoteScopeId">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The remote scope ID for the TCP connection on the remote computer. When the <c>State</c> member is
            <c>MIB_TCP_STATE_LISTEN</c>, this value has no meaning.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW2.dwRemotePort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The remote port number in network byte order for the TCP connection on the remote computer. When the <c>State</c> member is
            <c>MIB_TCP_STATE_LISTEN</c>, this value has no meaning.
            </para>
            <para>
            The maximum size of an IP port number is 16 bits, so only the lower 16 bits should be used. The upper 16 bits may contain
            uninitialized data.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW2.State">
            <summary>
            <para>Type: <c>MIB_TCP_STATE</c></para>
            <para>
            The state of the TCP connection. This member can be one of the values from the <c>MIB_TCP_STATE</c> enumeration type defined
            in the Tcpmib.h header file.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MIB_TCP_STATE_CLOSED 1</term>
            <term>The TCP connection is in the CLOSED state that represents no connection state at all.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_LISTEN 2</term>
            <term>The TCP connection is in the LISTEN state waiting for a connection request from any remote TCP and port.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_SYN_SENT 3</term>
            <term>
            The TCP connection is in the SYN-SENT state waiting for a matching connection request after having sent a connection request
            (SYN packet).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_SYN_RCVD 4</term>
            <term>
            The TCP connection is in the SYN-RECEIVED state waiting for a confirming connection request acknowledgment after having both
            received and sent a connection request (SYN packet).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_ESTAB 5</term>
            <term>
            The TCP connection is in the ESTABLISHED state that represents an open connection, data received can be delivered to the
            user. This is the normal state for the data transfer phase of the TCP connection.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_FIN_WAIT1 6</term>
            <term>
            The TCP connection is FIN-WAIT-1 state waiting for a connection termination request from the remote TCP, or an acknowledgment
            of the connection termination request previously sent.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_FIN_WAIT2 7</term>
            <term>The TCP connection is FIN-WAIT-1 state waiting for a connection termination request from the remote TCP.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_CLOSE_WAIT 8</term>
            <term>The TCP connection is in the CLOSE-WAIT state waiting for a connection termination request from the local user.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_CLOSING 9</term>
            <term>
            The TCP connection is in the CLOSING state waiting for a connection termination request acknowledgment from the remote TCP.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_LAST_ACK 10</term>
            <term>
            The TCP connection is in the LAST-ACK state waiting for an acknowledgment of the connection termination request previously
            sent to the remote TCP (which includes an acknowledgment of its connection termination request).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_TIME_WAIT 11</term>
            <term>
            The TCP connection is in the TIME-WAIT state waiting for enough time to pass to be sure the remote TCP received the
            acknowledgment of its connection termination request.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_DELETE_TCB 12</term>
            <term>
            The TCP connection is in the delete TCB state that represents the deletion of the Transmission Control Block (TCB), a data
            structure used to maintain information on each TCP entry.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW2.dwOwningPid">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The PID of the process that issued a context bind for this TCP connection.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCP6ROW2.dwOffloadState">
            <summary>
            <para>Type: <c>TCP_CONNECTION_OFFLOAD_STATE</c></para>
            <para>
            The offload state for this TCP connection. This parameter can be one of the enumeration values for the
            TCP_CONNECTION_OFFLOAD_STATE defined in the Tcpmib.h header.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCPROW">
            <summary>
            <para>The <c>MIB_TCPROW</c> structure contains information that descibes an IPv4 TCP connection.</para>
            </summary>
            <remarks>
            <para>
            The GetTcpTable function retrieves the IPv4 TCP connection table on the local computer and returns this information in a
            MIB_TCPTABLE structure.
            </para>
            <para>
            An array of <c>MIB_TCPROW</c> structures are contained in the <c>MIB_TCPTABLE</c> structure. The <c>MIB_TCPROW</c> structure is
            also used by the SetTcpEntry function.
            </para>
            <para>
            The <c>dwState</c> member indicates the state of the TCP entry in a TCP state diagram. A TCP connection progresses through a
            series of states during its lifetime. The states are: LISTEN, SYN-SENT, SYN-RECEIVED, ESTABLISHED, FIN-WAIT-1, FIN-WAIT-2,
            CLOSE-WAIT, CLOSING, LAST-ACK, TIME-WAIT, and the fictional state CLOSED. The CLOSED state is fictional because it represents the
            state when there is no Transmission Control Block, and therefore, no connection. The TCP protocol is described in RFC 793. For
            more information, see http://www.ietf.org/rfc/rfc793.txt.
            </para>
            <para>
            The <c>dwLocalAddr</c> and <c>dwRemoteAddr</c> members are stored as a <c>DWORD</c> in the same format as the in_addr structure.
            In order to use the <c>dwLocalAddr</c> or <c>dwRemoteAddr</c> members, the ntohl or inet_ntoa functions in Windows Sockets or
            similar functions may be needed. On Windows Vista and later, the RtlIpv4AddressToString or RtlIpv4AddressToStringEx functions may
            be used to convert the IPv4 address in the <c>dwLocalAddr</c> or <c>dwRemoteAddr</c> members to a string without loading the
            Windows Sockets DLL.
            </para>
            <para>
            The <c>dwLocalPort</c>, and <c>dwRemotePort</c> members are in network byte order. In order to use the <c>dwLocalPort</c> or
            <c>dwRemotePort</c> members, the ntohs or inet_ntoa functions in Windows Sockets or similar functions may be needed.
            </para>
            <para>
            The <c>MIB_TCPROW</c> structure changed slightly on Windows Vista and later. On Windows Vista and later, the <c>dwState</c>
            member is replaced by a union that contains the following members.
            </para>
            <list type="table">
            <listheader>
            <term>Member</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>DWORD dwState</term>
            <term>The state of the TCP connection.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE State</term>
            <term>
            The state of the TCP connection. This member can be one of the values from the MIB_TCP_STATE enumeration type defined in the
            Tcpmib.h header file. The possible values are the same as those defined for the dwState member.
            </term>
            </item>
            </list>
            <para>
            In the Windows SDK, the version of the structure for use on Windows Vista and later is defined as <c>MIB_TCPROW_LH</c>. In the
            Windows SDK, the version of this structure to be used on earlier systems including Windows 2000 and later is defined as
            <c>MIB_TCPROW_W2K</c>. When compiling an application if the target platform is Windows Vista and later (, , or ), the
            <c>MIB_TCPROW_LH</c> structure is typedefed to the <c>MIB_TCPROW</c> structure. When compiling an application if the target
            platform is not Windows Vista and later, the <c>MIB_TCPROW_W2K</c> structure is typedefed to the <c>MIB_TCPROW</c> structure.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed. This structure is defined
            in the Tcpmib.h header file, not in the Iprtrmib.h header file. Note that the Tcpmib.h header file is automatically included in
            Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Tcpmib.h and Iprtrmib.h header files should never
            be used directly.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves the TCP connection table and prints the state of each connection represented as a
            <c>MIB_TCPROW</c> structure.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW.dwState">
            <summary>The state of the TCP connection.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW.dwLocalAddr">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The local IPv4 address for the TCP connection on the local computer. A value of zero indicates the listener can accept a
            connection on any interface.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW.dwLocalPort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The local port number in network byte order for the TCP connection on the local computer.</para>
            <para>
            The maximum size of an IP port number is 16 bits, so only the lower 16 bits should be used. The upper 16 bits may contain
            uninitialized data.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW.dwRemoteAddr">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The IPv4 address for the TCP connection on the remote computer. When the <c>dwState</c> member is
            <c>MIB_TCP_STATE_LISTEN</c>, this value has no meaning.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW.dwRemotePort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The remote port number in network byte order for the TCP connection on the remote computer. When the <c>dwState</c> member is
            <c>MIB_TCP_STATE_LISTEN</c>, this member has no meaning.
            </para>
            <para>
            The maximum size of an IP port number is 16 bits, so only the lower 16 bits should be used. The upper 16 bits may contain
            uninitialized data.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_MODULE">
            <summary>
            <para>
            The <c>MIB_TCPROW_OWNER_MODULE</c> structure contains information that describes an IPv4 TCP connection with ownership data, IPv4
            addresses, ports used by the TCP connection, and the specific process ID (PID) associated with connection.
            </para>
            </summary>
            <remarks>
            <para>
            The <c>MIB_TCPROW_OWNER_MODULE</c> structure is returned by a call to GetExtendedTcpTable with the TableClass parameter set to
            <c>TCP_TABLE_OWNER_MODULE_LISTENER</c>, <c>TCP_TABLE_OWNER_MODULE_CONNECTIONS</c>, or <c>TCP_TABLE_OWNER_MODULE_ALL</c> from the
            TCP_TABLE_CLASS enumeration and the ulAf parameter set to <c>AF_INET4</c>.
            </para>
            <para>
            The <c>dwState</c> member indicates the state of the TCP entry in a TCP state diagram. A TCP connection progresses through a
            series of states during its lifetime. The states are: LISTEN, SYN-SENT, SYN-RECEIVED, ESTABLISHED, FIN-WAIT-1, FIN-WAIT-2,
            CLOSE-WAIT, CLOSING, LAST-ACK, TIME-WAIT, and the fictional state CLOSED. The CLOSED state is fictional because it represents the
            state when there is no Transmission Control Block, and therefore, no connection. The TCP protocol is described in RFC 793. For
            more information, see http://www.ietf.org/rfc/rfc793.txt.
            </para>
            <para>
            The <c>dwLocalPort</c>, and <c>dwRemotePort</c> members are in network byte order. In order to use the <c>dwLocalPort</c> or
            <c>dwRemotePort</c> members, the ntohs or inet_ntoa functions in Windows Sockets or similar functions may be needed. The
            <c>dwLocalAddr</c> and <c>dwRemoteAddr</c> members are stored as a <c>DWORD</c> in the same format as the in_addr structure. In
            order to use the <c>dwLocalAddr</c> or <c>dwRemoteAddr</c> members, the ntohl or <c>inet_ntoa</c> functions in Windows Sockets or
            similar functions may be needed. On Windows Vista and later, the RtlIpv4AddressToString or RtlIpv4AddressToStringEx functions may
            be used to convert the IPv4 address in the <c>dwLocalAddr</c> or <c>dwRemoteAddr</c> members to a string without loading the
            Windows Sockets DLL.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed. This structure is defined
            in the Tcpmib.h header file, not in the Iprtrmib.h header file. Note that the Tcpmib.h header file is automatically included in
            Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Tcpmib.h and Iprtrmib.h header files should never
            be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_MODULE.dwState">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>dwState</para>
            <para>
            <c>Type: <c>DWORD</c></c> The state of the TCP connection. This member can be one of the values defined in the Iprtrmib.h
            header file.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed. This member can be one
            of the values from the <c>MIB_TCP_STATE</c> enumeration defined in the Tcpmib.h header file, not in the Iprtrmib.h header
            file. Note that the Tcpmib.h header file is automatically included in Iprtrmib.h, which is automatically included in the
            Iphlpapi.h header file. The Tcpmib.h and Iprtrmib.h header files should never be used directly.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MIB_TCP_STATE_CLOSED 1</term>
            <term>The TCP connection is in the CLOSED state that represents no connection state at all.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_LISTEN 2</term>
            <term>The TCP connection is in the LISTEN state waiting for a connection request from any remote TCP and port.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_SYN_SENT 3</term>
            <term>
            The TCP connection is in the SYN-SENT state waiting for a matching connection request after having sent a connection request
            (SYN packet).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_SYN_RCVD 4</term>
            <term>
            The TCP connection is in the SYN-RECEIVED state waiting for a confirming connection request acknowledgment after having both
            received and sent a connection request (SYN packet).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_ESTAB 5</term>
            <term>
            The TCP connection is in the ESTABLISHED state that represents an open connection, data received can be delivered to the
            user. This is the normal state for the data transfer phase of the TCP connection.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_FIN_WAIT1 6</term>
            <term>
            The TCP connection is FIN-WAIT-1 state waiting for a connection termination request from the remote TCP, or an acknowledgment
            of the connection termination request previously sent.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_FIN_WAIT2 7</term>
            <term>The TCP connection is FIN-WAIT-1 state waiting for a connection termination request from the remote TCP.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_CLOSE_WAIT 8</term>
            <term>The TCP connection is in the CLOSE-WAIT state waiting for a connection termination request from the local user.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_CLOSING 9</term>
            <term>
            The TCP connection is in the CLOSING state waiting for a connection termination request acknowledgment from the remote TCP.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_LAST_ACK 10</term>
            <term>
            The TCP connection is in the LAST-ACK state waiting for an acknowledgment of the connection termination request previously
            sent to the remote TCP (which includes an acknowledgment of its connection termination request).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_TIME_WAIT 11</term>
            <term>
            The TCP connection is in the TIME-WAIT state waiting for enough time to pass to be sure the remote TCP received the
            acknowledgment of its connection termination request.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_DELETE_TCB 12</term>
            <term>
            The TCP connection is in the delete TCB state that represents the deletion of the Transmission Control Block (TCB), a data
            structure used to maintain information on each TCP entry.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_MODULE.dwLocalAddr">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The local IPv4 address for the TCP connection on the local computer. A value of zero indicates the listener can accept a
            connection on any interface.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_MODULE.dwLocalPort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The local port number in network byte order for the TCP connection on the local computer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_MODULE.dwRemoteAddr">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The IPv4 address for the TCP connection on the remote computer. When the <c>dwState</c> member is
            <c>MIB_TCP_STATE_LISTEN</c>, this value has no meaning.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_MODULE.dwRemotePort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The remote port number in network byte order for the TCP connection on the remote computer. When the <c>dwState</c> member is
            <c>MIB_TCP_STATE_LISTEN</c>, this member has no meaning.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_MODULE.dwOwningPid">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The PID of the process that issued a context bind for this TCP connection.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_MODULE.liCreateTimestamp">
            <summary>
            <para>Type: <c>LARGE_INTEGER</c></para>
            <para>A SYSTEMTIME structure that indicates when the context bind operation that created this TCP link occurred.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_MODULE.OwningModuleInfo">
            <summary>
            <para>Type: <c>ULONGLONG[TCPIP_OWNING_MODULE_SIZE]</c></para>
            <para>An array of opaque data that contains ownership information.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_PID">
            <summary>
            <para>
            The <c>MIB_TCPROW_OWNER_PID</c> structure contains information that describes an IPv4 TCP connection with IPv4 addresses, ports
            used by the TCP connection, and the specific process ID (PID) associated with connection.
            </para>
            </summary>
            <remarks>
            <para>
            The <c>MIB_TCPROW_OWNER_PID</c> structure is returned by a call to GetExtendedTcpTable with the TableClass parameter set to
            <c>TCP_TABLE_OWNER_PID_LISTENER</c>, <c>TCP_TABLE_OWNER_PID_CONNECTIONS</c>, or <c>TCP_TABLE_OWNER_PID_ALL</c> from the
            TCP_TABLE_CLASS enumeration and the ulAf parameter set to <c>AF_INET4</c>.
            </para>
            <para>
            The <c>dwState</c> member indicates the state of the TCP entry in a TCP state diagram. A TCP connection progresses through a
            series of states during its lifetime. The states are: LISTEN, SYN-SENT, SYN-RECEIVED, ESTABLISHED, FIN-WAIT-1, FIN-WAIT-2,
            CLOSE-WAIT, CLOSING, LAST-ACK, TIME-WAIT, and the fictional state CLOSED. The CLOSED state is fictional because it represents the
            state when there is no Transmission Control Block, and therefore, no connection. The TCP protocol is described in RFC 793. For
            more information, see http://www.ietf.org/rfc/rfc793.txt.
            </para>
            <para>
            The <c>dwLocalPort</c>, and <c>dwRemotePort</c> members are in network byte order. In order to use the <c>dwLocalPort</c> or
            <c>dwRemotePort</c> members, the ntohs or inet_ntoa functions in Windows Sockets or similar functions may be needed. The
            <c>dwLocalAddr</c> and <c>dwRemoteAddr</c> members are stored as a <c>DWORD</c> in the same format as the in_addr structure. In
            order to use the <c>dwLocalAddr</c> or <c>dwRemoteAddr</c> members, the ntohl or <c>inet_ntoa</c> functions in Windows Sockets or
            similar functions may be needed. On Windows Vista and later, the RtlIpv4AddressToString or RtlIpv4AddressToStringEx functions may
            be used to convert the IPv4 address in the <c>dwLocalAddr</c> or <c>dwRemoteAddr</c> members to a string without loading the
            Windows Sockets DLL.
            </para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed. This structure is defined
            in the Tcpmib.h header file, not in the Iprtrmib.h header file. Note that the Tcpmib.h header file is automatically included in
            Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Tcpmib.h and Iprtrmib.h header files should never
            be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_PID.dwState">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The state of the TCP connection. This member can be one of the values defined in the Iprtrmib.h header file.</para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed. This member can be one
            of the values from the <c>MIB_TCP_STATE</c> enumeration defined in the Tcpmib.h header file, not in the Iprtrmib.h header
            file. Note that the Tcpmib.h header file is automatically included in Iprtrmib.h, which is automatically included in the
            Iphlpapi.h header file. The Tcpmib.h and Iprtrmib.h header files should never be used directly.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MIB_TCP_STATE_CLOSED 1</term>
            <term>The TCP connection is in the CLOSED state that represents no connection state at all.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_LISTEN 2</term>
            <term>The TCP connection is in the LISTEN state waiting for a connection request from any remote TCP and port.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_SYN_SENT 3</term>
            <term>
            The TCP connection is in the SYN-SENT state waiting for a matching connection request after having sent a connection request
            (SYN packet).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_SYN_RCVD 4</term>
            <term>
            The TCP connection is in the SYN-RECEIVED state waiting for a confirming connection request acknowledgment after having both
            received and sent a connection request (SYN packet).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_ESTAB 5</term>
            <term>
            The TCP connection is in the ESTABLISHED state that represents an open connection, data received can be delivered to the
            user. This is the normal state for the data transfer phase of the TCP connection.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_FIN_WAIT1 6</term>
            <term>
            The TCP connection is FIN-WAIT-1 state waiting for a connection termination request from the remote TCP, or an acknowledgment
            of the connection termination request previously sent.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_FIN_WAIT2 7</term>
            <term>The TCP connection is FIN-WAIT-2 state waiting for a connection termination request from the remote TCP.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_CLOSE_WAIT 8</term>
            <term>The TCP connection is in the CLOSE-WAIT state waiting for a connection termination request from the local user.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_CLOSING 9</term>
            <term>
            The TCP connection is in the CLOSING state waiting for a connection termination request acknowledgment from the remote TCP.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_LAST_ACK 10</term>
            <term>
            The TCP connection is in the LAST-ACK state waiting for an acknowledgment of the connection termination request previously
            sent to the remote TCP (which includes an acknowledgment of its connection termination request).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_TIME_WAIT 11</term>
            <term>
            The TCP connection is in the TIME-WAIT state waiting for enough time to pass to be sure the remote TCP received the
            acknowledgment of its connection termination request.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_DELETE_TCB 12</term>
            <term>
            The TCP connection is in the delete TCB state that represents the deletion of the Transmission Control Block (TCB), a data
            structure used to maintain information on each TCP entry.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_PID.dwLocalAddr">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The local IPv4 address for the TCP connection on the local computer. A value of zero indicates the listener can accept a
            connection on any interface.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_PID.dwLocalPort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The local port number in network byte order for the TCP connection on the local computer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_PID.dwRemoteAddr">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The IPv4 address for the TCP connection on the remote computer. When the <c>dwState</c> member is
            <c>MIB_TCP_STATE_LISTEN</c>, this value has no meaning.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_PID.dwRemotePort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The remote port number in network byte order for the TCP connection on the remote computer. When the <c>dwState</c> member is
            <c>MIB_TCP_STATE_LISTEN</c>, this member has no meaning.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW_OWNER_PID.dwOwningPid">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The PID of the process that issued a context bind for this TCP connection.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCPROW2">
            <summary>
            <para>The <c>MIB_TCPROW2</c> structure contains information that describes an IPv4 TCP connection.</para>
            </summary>
            <remarks>
            <para>
            The GetTcpTable2 function retrieves the IPv4 TCP connection table on the local computer and returns this information in a
            MIB_TCPTABLE2 structure.
            </para>
            <para>An array of <c>MIB_TCPROW2</c> structures are contained in the <c>MIB_TCPTABLE2</c> structure.</para>
            <para>
            The <c>dwState</c> member indicates the state of the TCP entry in a TCP state diagram. A TCP connection progresses through a
            series of states during its lifetime. The states are: LISTEN, SYN-SENT, SYN-RECEIVED, ESTABLISHED, FIN-WAIT-1, FIN-WAIT-2,
            CLOSE-WAIT, CLOSING, LAST-ACK, TIME-WAIT, and the fictional state CLOSED. The CLOSED state is fictional because it represents the
            state when there is no Transmission Control Block, and therefore, no connection. The TCP protocol is described in RFC 793. For
            more information, see http://www.ietf.org/rfc/rfc793.txt.
            </para>
            <para>
            The <c>dwLocalPort</c>, and <c>dwRemotePort</c> members are in network byte order. In order to use the <c>dwLocalPort</c> or
            <c>dwRemotePort</c> members, the ntohs or inet_ntoa functions in Windows Sockets or similar functions may be needed. The
            <c>dwLocalAddr</c> and <c>dwRemoteAddr</c> members are stored as a <c>DWORD</c> in the same format as the in_addr structure. In
            order to use the <c>dwLocalAddr</c> or <c>dwRemoteAddr</c> members, the ntohl or <c>inet_ntoa</c> functions in Windows Sockets or
            similar functions may be needed. On Windows Vista and later, the RtlIpv4AddressToString or RtlIpv4AddressToStringEx functions may
            be used to convert the IPv4 address in the <c>dwLocalAddr</c> or <c>dwRemoteAddr</c> members to a string without loading the
            Windows Sockets DLL.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves the TCP connection table for IPv4 and prints the state of each connection represented as a
            <c>MIB_TCPROW2</c> structure.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW2.dwState">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The state of the TCP connection. This member can be one of the values defined in the Iprtrmib.h header file.</para>
            <para>
            On the Windows SDK released for Windows Vista and later, the organization of header files has changed. This member can be one
            of the values from the <c>MIB_TCP_STATE</c> enumeration defined in the Tcpmib.h header file, not in the Iprtrmib.h header
            file. Note that the Tcpmib.h header file is automatically included in Iprtrmib.h, which is automatically included in the
            Iphlpapi.h header file. The Tcpmib.h and Iprtrmib.h header files should never be used directly.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MIB_TCP_STATE_CLOSED 1</term>
            <term>The TCP connection is in the CLOSED state that represents no connection state at all.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_LISTEN 2</term>
            <term>The TCP connection is in the LISTEN state waiting for a connection request from any remote TCP and port.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_SYN_SENT 3</term>
            <term>
            The TCP connection is in the SYN-SENT state waiting for a matching connection request after having sent a connection request
            (SYN packet).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_SYN_RCVD 4</term>
            <term>
            The TCP connection is in the SYN-RECEIVED state waiting for a confirming connection request acknowledgment after having both
            received and sent a connection request (SYN packet).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_ESTAB 5</term>
            <term>
            The TCP connection is in the ESTABLISHED state that represents an open connection, data received can be delivered to the
            user. This is the normal state for the data transfer phase of the TCP connection.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_FIN_WAIT1 6</term>
            <term>
            The TCP connection is FIN-WAIT-1 state waiting for a connection termination request from the remote TCP, or an acknowledgment
            of the connection termination request previously sent.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_FIN_WAIT2 7</term>
            <term>The TCP connection is FIN-WAIT-1 state waiting for a connection termination request from the remote TCP.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_CLOSE_WAIT 8</term>
            <term>The TCP connection is in the CLOSE-WAIT state waiting for a connection termination request from the local user.</term>
            </item>
            <item>
            <term>MIB_TCP_STATE_CLOSING 9</term>
            <term>
            The TCP connection is in the CLOSING state waiting for a connection termination request acknowledgment from the remote TCP.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_LAST_ACK 10</term>
            <term>
            The TCP connection is in the LAST-ACK state waiting for an acknowledgment of the connection termination request previously
            sent to the remote TCP (which includes an acknowledgment of its connection termination request).
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_TIME_WAIT 11</term>
            <term>
            The TCP connection is in the TIME-WAIT state waiting for enough time to pass to be sure the remote TCP received the
            acknowledgment of its connection termination request.
            </term>
            </item>
            <item>
            <term>MIB_TCP_STATE_DELETE_TCB 12</term>
            <term>
            The TCP connection is in the delete TCB state that represents the deletion of the Transmission Control Block (TCB), a data
            structure used to maintain information on each TCP entry.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW2.dwLocalAddr">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The local IPv4 address for the TCP connection on the local computer. A value of zero indicates the listener can accept a
            connection on any interface.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW2.dwLocalPort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The local port number in network byte order for the TCP connection on the local computer.</para>
            <para>
            The maximum size of an IP port number is 16 bits, so only the lower 16 bits should be used. The upper 16 bits may contain
            uninitialized data.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW2.dwRemoteAddr">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The IPv4 address for the TCP connection on the remote computer. When the <c>dwState</c> member is
            <c>MIB_TCP_STATE_LISTEN</c>, this value has no meaning.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW2.dwRemotePort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The remote port number in network byte order for the TCP connection on the remote computer. When the <c>dwState</c> member is
            <c>MIB_TCP_STATE_LISTEN</c>, this member has no meaning.
            </para>
            <para>
            The maximum size of an IP port number is 16 bits, so only the lower 16 bits should be used. The upper 16 bits may contain
            uninitialized data.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW2.dwOwningPid">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The PID of the process that issued a context bind for this TCP connection.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPROW2.dwOffloadState">
            <summary>
            <para>Type: <c>TCP_CONNECTION_OFFLOAD_STATE</c></para>
            <para>
            The offload state for this TCP connection. This parameter can be one of the enumeration values for the
            TCP_CONNECTION_OFFLOAD_STATE defined in the Tcpmib.h header.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS">
            <summary>
            <para>The <c>MIB_TCPSTATS</c> structure contains statistics for the TCP protocol running on the local computer.</para>
            </summary>
            <remarks>
            <para>The GetTcpStatistics function returns a pointer to a <c>MIB_TCPSTATS</c> structure.</para>
            <para>
            The <c>MIB_TCPSTATS</c> structure changed slightly on Windows Vista and later. On Windows Vista and later, the
            <c>dwRtoAlgorithm</c> member is replaced by a union that contains the following members.
            </para>
            <list type="table">
            <listheader>
            <term>Member</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>DWORD dwRtoAlgorithm</term>
            <term>The retransmission time-out (RTO) algorithm in use.</term>
            </item>
            <item>
            <term>TCP_RTO_ALGORITHM RtoAlgorithm</term>
            <term>
            The retransmission time-out (RTO) algorithm in use. This member can be one of the values from the TCP_RTO_ALGORITHM enumeration
            type defined in the Tcpmib.h header file. The possible values are the same as those defined for the dwRtoAlgorithm member.
            </term>
            </item>
            </list>
            <para>
            In the Windows SDK, the version of the structure for use on Windows Vista and later is defined as <c>MIB_TCPSTATS_LH</c>. In the
            Windows SDK, the version of this structure to be used on earlier systems including Windows 2000 and later is defined as
            <c>MIB_TCPSTATS_W2K</c>. When compiling an application if the target platform is Windows Vista and later (, , or ), the
            <c>MIB_TCPSTATS_LH</c> structure is typedefed to the <c>MIB_TCPSTATS</c> structure. When compiling an application if the target
            platform is not Windows Vista and later, the <c>MIB_TCPSTATS_W2K</c> structure is typedefed to the <c>MIB_TCPSTATS</c> structure.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Tcpmib.h header file, not in the Iprtrmib.h header file. Note that the Tcpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Tcpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS.RtoAlgorithm">
            <summary>
            The retransmission time-out (RTO) algorithm in use. This member can be one of the values from the TCP_RTO_ALGORITHM
            enumeration type defined in the Tcpmib.h header file. The possible values are the same as those defined for the
            dwRtoAlgorithm member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS.dwRtoMin">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The minimum RTO value in milliseconds.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS.dwRtoMax">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The maximum RTO value in milliseconds.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS.dwMaxConn">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The maximum number of connections. If this member is -1, the maximum number of connections is variable.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS.dwActiveOpens">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of active opens. In an active open, the client is initiating a connection with the server.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS.dwPassiveOpens">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of passive opens. In a passive open, the server is listening for a connection request from a client.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS.dwAttemptFails">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of failed connection attempts.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS.dwEstabResets">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of established connections that were reset.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS.dwCurrEstab">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of currently established connections.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS.dwInSegs">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of segments received.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS.dwOutSegs">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of segments transmitted. This number does not include retransmitted segments.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS.dwRetransSegs">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of segments retransmitted.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS.dwInErrs">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of errors received.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS.dwOutRsts">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of segments transmitted with the reset flag set.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS.dwNumConns">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The number of connections that are currently present in the system. This total number includes connections in all states
            except listening connections.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS2">
            <summary>
            <para>
            [Some information relates to pre-released product which may be substantially modified before it's commercially released.
            Microsoft makes no warranties, express or implied, with respect to the information provided here.]
            </para>
            <para>
            The <c>MIB_TCPSTATS2</c> structure contains statistics for the TCP protocol running on the local computer. This structure is
            different from MIB_TCPSTATS structure in that it uses 64-bit counters, rather than 32-bit counters.
            </para>
            </summary>
            <remarks>
            <para>The GetTcpStatisticsEx2 function returns a pointer to a <c>MIB_TCPSTATS2</c> structure.</para>
            <para>
            This structure is defined in the Tcpmib.h header file, not in the Iprtrmib.h header file. Note that the Tcpmib.h header file is
            automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Tcpmib.h and Iprtrmib.h
            header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS2.RtoAlgorithm">
            <summary>
            The retransmission time-out (RTO) algorithm in use. This member can be one of the values from the TCP_RTO_ALGORITHM
            enumeration type defined in the Tcpmib.h header file. The possible values are the same as those defined for the
            dwRtoAlgorithm member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS2.dwRtoMin">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The minimum RTO value in milliseconds.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS2.dwRtoMax">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The maximum RTO value in milliseconds.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS2.dwMaxConn">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The maximum number of connections. If this member is -1, the maximum number of connections is variable.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS2.dwActiveOpens">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of active opens. In an active open, the client is initiating a connection with the server.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS2.dwPassiveOpens">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of passive opens. In a passive open, the server is listening for a connection request from a client.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS2.dwAttemptFails">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of failed connection attempts.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS2.dwEstabResets">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of established connections that were reset.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS2.dwCurrEstab">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of currently established connections.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS2.dw64InSegs">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of segments received.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS2.dw64OutSegs">
            <summary>
            <para>Type: <c>DWORD64</c></para>
            <para>The number of segments transmitted. This number does not include retransmitted segments.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS2.dwRetransSegs">
            <summary>
            <para>Type: <c>DWORD64</c></para>
            <para>The number of segments retransmitted.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS2.dwInErrs">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of errors received.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS2.dwOutRsts">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The number of segments transmitted with the reset flag set.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_TCPSTATS2.dwNumConns">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The number of connections that are currently present in the system. This total number includes connections in all states
            except listening connections.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE">
            <summary>The <c>MIB_TCP6TABLE</c> structure contains a table of TCP connections for IPv6 on the local computer.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE.dwNumEntries">
            <summary>A value that specifies the number of TCP connections in the array.</summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE.table">
            <summary>An array of <c>MIB_TCP6ROW</c> structures containing TCP connection entries.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The MIB_TCP6TABLE instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE_OWNER_MODULE">
            <summary>
            <para>
            The <c>MIB_TCP6TABLE_OWNER_MODULE</c> structure contains a table of process IDs (PIDs) and the IPv6 TCP links context bound to
            these PIDs with any available ownership data.
            </para>
            </summary>
            <remarks>
            <para>
            The <c>MIB_TCP6TABLE_OWNER_MODULE</c> structure is returned by a call to GetExtendedTcpTable with the TableClass parameter set to
            a <c>TCP_TABLE_OWNER_MODULE_LISTENER</c>, <c>TCP_TABLE_OWNER_MODULE_CONNECTIONS</c>, or <c>TCP_TABLE_OWNER_MODULE_ALL</c> from
            the TCP_TABLE_CLASS enumeration and the ulAf parameter set to <c>AF_INET6</c>.
            </para>
            <para>
            The <c>MIB_TCP6TABLE_OWNER_MODULE</c> structure may contain padding for alignment between the <c>dwNumEntries</c> member and the
            first MIB_TCP6ROW_OWNER_MODULE array entry in the <c>table</c> member. Padding for alignment may also be present between the
            <c>MIB_TCP6ROW_OWNER_MODULE</c> array entries in the <c>table</c> member. Any access to a <c>MIB_TCP6ROW_OWNER_MODULE</c> array
            entry should assume padding may exist.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Tcpmib.h header file, not in the Iprtrmib.h header file. Note that the Tcpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Tcpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE_OWNER_MODULE.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE_OWNER_MODULE"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE_OWNER_MODULE.dwNumEntries">
            <summary>
            <para>The number of MIB_TCP6ROW_OWNER_MODULE elements in the <c>table</c>.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE_OWNER_MODULE.table">
            <summary>
            <para>Array of MIB_TCP6ROW_OWNER_MODULE structures returned by a call to GetExtendedTcpTable.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE_OWNER_MODULE.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE_OWNER_MODULE)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE_OWNER_MODULE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The MIB_TCP6TABLE_OWNER_MODULE instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE_OWNER_PID">
            <summary>
            <para>
            The <c>MIB_TCP6TABLE_OWNER_PID</c> structure contains a table of process IDs (PIDs) and the IPv6 TCP links that are context bound
            to these PIDs.
            </para>
            </summary>
            <remarks>
            <para>
            The <c>MIB_TCP6TABLE_OWNER_PID</c> structure is returned by a call to GetExtendedTcpTable with the TableClass parameter set to
            <c>TCP_TABLE_OWNER_PID_LISTENER</c>, <c>TCP_TABLE_OWNER_PID_CONNECTIONS</c>, or <c>TCP_TABLE_OWNER_PID_ALL</c> from the
            TCP_TABLE_CLASS enumeration and the ulAf parameter set to <c>AF_INET6</c>.
            </para>
            <para>
            The <c>MIB_TCP6TABLE_OWNER_PID</c> structure may contain padding for alignment between the <c>dwNumEntries</c> member and the
            first MIB_TCP6ROW_OWNER_PID array entry in the <c>table</c> member. Padding for alignment may also be present between the
            <c>MIB_TCP6ROW_OWNER_PID</c> array entries in the <c>table</c> member. Any access to a <c>MIB_TCP6ROW_OWNER_PID</c> array entry
            should assume padding may exist.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Tcpmib.h header file, not in the Iprtrmib.h header file. Note that the Tcpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Tcpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE_OWNER_PID.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE_OWNER_PID"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE_OWNER_PID.dwNumEntries">
            <summary>
            <para>The number of MIB_TCP6ROW_OWNER_PID elements in the <c>table</c>.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE_OWNER_PID.table">
            <summary>
            <para>Array of MIB_TCP6ROW_OWNER_PID structures returned by a call to GetExtendedTcpTable.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE_OWNER_PID.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE_OWNER_PID)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE_OWNER_PID"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The MIB_TCP6TABLE_OWNER_PID instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE2">
            <summary>The <c>MIB_TCP6TABLE2</c> structure contains a table of IPv6 TCP connections on the local computer.</summary>
            <remarks>
            <para>The <c>MIB_TCP6TABLE2</c> structure is defined on Windows Vista and later.</para>
            <para>
            The GetTcp6Table2function retrieves the IPv6 TCP connection table on the local computer and returns this information in a
            <c>MIB_TCP6TABLE2</c> structure.
            </para>
            <para>An array of MIB_TCP6ROW2 structures are contained in the <c>MIB_TCP6TABLE2</c> structure.</para>
            <para>
            The <c>MIB_TCP6TABLE2</c> structure may contain padding for alignment between the <c>dwNumEntries</c> member and the first
            MIB_TCP6ROW2 array entry in the <c>table</c> member. Padding for alignment may also be present between the <c>MIB_TCP6ROW2</c>
            array entries in the <c>table</c> member. Any access to a <c>MIB_TCP6ROW2</c> array entry should assume padding may exist.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE2.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE2"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE2.dwNumEntries">
            <summary>A value that specifies the number of TCP connections in the array.</summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE2.table">
            <summary>An array of MIB_TCP6ROW2 structures containing TCP connection entries.</summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE2.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE2)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_TCP6TABLE2"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The MIB_TCP6TABLE instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE">
            <summary>
            <para>The <c>MIB_TCPTABLE</c> structure contains a table of TCP connections for IPv4 on the local computer.</para>
            </summary>
            <remarks>
            <para>
            The GetTcpTable function retrieves the IPv4 TCP connection table on the local computer and returns this information in a
            <c>MIB_TCPTABLE</c> structure. An array of MIB_TCPROW structures are contained in the <c>MIB_TCPTABLE</c> structure.
            </para>
            <para>
            The <c>MIB_TCPTABLE</c> structure may contain padding for alignment between the <c>dwNumEntries</c> member and the first
            MIB_TCPROW array entry in the <c>table</c> member. Padding for alignment may also be present between the <c>MIB_TCPROW</c> array
            entries in the <c>table</c> member. Any access to a <c>MIB_TCPROW</c> array entry should assume padding may exist.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Tcpmib.h header file, not in the Iprtrmib.h header file. Note that the Tcpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Tcpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves the TCP connection table for IPv4 as a <c>MIB_TCPTABLE</c> structure and prints the state of each
            connection represented as a MIB_TCPROW structure.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE.dwNumEntries">
            <summary>
            <para>The number of entries in the table.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE.table">
            <summary>
            <para>A pointer to a table of TCP connections implemented as an array of MIB_TCPROW structures.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The MIB_TCPTABLE instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE_OWNER_MODULE">
            <summary>
            <para>
            The <c>MIB_TCPTABLE_OWNER_MODULE</c> structure contains a table of process IDs (PIDs) and the IPv4 TCP links context bound to the
            PIDs, and any available ownership data.
            </para>
            </summary>
            <remarks>
            <para>
            This table is specifically returned by a call to GetExtendedTcpTable with the TableClass parameter set to a
            <c>TCP_TABLE_OWNER_MODULE_*</c> value from the TCP_TABLE_CLASS enumeration and the ulAf parameter set to <c>AF_INET4</c>.
            </para>
            <para>
            The <c>MIB_TCPTABLE_OWNER_MODULE</c> structure may contain padding for alignment between the <c>dwNumEntries</c> member and the
            first MIB_TCPROW_OWNER_MODULE array entry in the <c>table</c> member. Padding for alignment may also be present between the
            <c>MIB_TCPROW_OWNER_MODULE</c> array entries in the <c>table</c> member. Any access to a <c>MIB_TCPROW_OWNER_MODULE</c> array
            entry should assume padding may exist.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Tcpmib.h header file, not in the Iprtrmib.h header file. Note that the Tcpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Tcpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE_OWNER_MODULE.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE_OWNER_MODULE"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE_OWNER_MODULE.dwNumEntries">
            <summary>
            <para>The number of MIB_TCPROW_OWNER_MODULE elements in the <c>table</c>.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE_OWNER_MODULE.table">
            <summary>
            <para>Array of MIB_TCPROW_OWNER_MODULE structures returned by a call to GetExtendedTcpTable.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE_OWNER_MODULE.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE_OWNER_MODULE)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE_OWNER_MODULE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The MIB_TCPTABLE_OWNER_MODULE instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE_OWNER_PID">
            <summary>
            <para>
            The <c>MIB_TCPTABLE_OWNER_PID</c> structure contains a table of process IDs (PIDs) and the IPv4 TCP links that are context bound
            to these PIDs.
            </para>
            </summary>
            <remarks>
            <para>
            This table is specifically returned by a call to GetExtendedTcpTable with the TableClass parameter set to a
            <c>TCP_TABLE_OWNER_PID_*</c> value from the TCP_TABLE_CLASS enumeration and the ulAf parameter set to <c>AF_INET4</c>.
            </para>
            <para>
            The <c>MIB_TCPTABLE_OWNER_PID</c> structure may contain padding for alignment between the <c>dwNumEntries</c> member and the
            first MIB_TCPROW_OWNER_PID array entry in the <c>table</c> member. Padding for alignment may also be present between the
            <c>MIB_TCPROW_OWNER_PID</c> array entries in the <c>table</c> member. Any access to a <c>MIB_TCPROW_OWNER_PID</c> array entry
            should assume padding may exist.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Tcpmib.h header file, not in the Iprtrmib.h header file. Note that the Tcpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Tcpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE_OWNER_PID.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE_OWNER_PID"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE_OWNER_PID.dwNumEntries">
            <summary>
            <para>The number of MIB_TCPROW_OWNER_PID elements in the <c>table</c>.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE_OWNER_PID.table">
            <summary>
            <para>Array of MIB_TCPROW_OWNER_PID structures returned by a call to GetExtendedTcpTable.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE_OWNER_PID.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE_OWNER_PID)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE_OWNER_PID"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The MIB_TCPTABLE_OWNER_PID instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE2">
            <summary>The <c>MIB_TCPTABLE2</c> structure contains a table of IPv4 TCP connections on the local computer.</summary>
            <remarks>
            <para>
            The GetTcpTable2function retrieves the IPv4 TCP connection table on the local computer and returns this information in a
            <c>MIB_TCPTABLE2</c> structure. An array of MIB_TCPROW2 structures are contained in the <c>MIB_TCPTABLE2</c> structure.
            </para>
            <para>
            The <c>MIB_TCPTABLE2</c> structure may contain padding for alignment between the <c>dwNumEntries</c> member and the first
            MIB_TCPROW2 array entry in the <c>table</c> member. Padding for alignment may also be present between the <c>MIB_TCPROW2</c>
            array entries in the <c>table</c> member. Any access to a <c>MIB_TCPROW2</c> array entry should assume padding may exist.
            </para>
            <para>Examples</para>
            <para>
            The following example retrieves the TCP connection table for IPv4 as a <c>MIB_TCPTABLE2</c> structure prints the state of each
            connection represented as a MIB_TCPROW2 structure.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE2.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE2"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE2.dwNumEntries">
            <summary>The number of entries in the table.</summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE2.table">
            <summary>
            <para>A pointer to a table of TCP connections implemented as an array of MIB_TCPROW2 structures.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE2.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE2)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_TCPTABLE2"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The MIB_TCPTABLE instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW">
            <summary>
            <para>
            The <c>MIB_UDP6ROW</c> structure contains an entry from the User Datagram Protocol (UDP) listener table for IPv6 on the local computer.
            </para>
            </summary>
            <remarks>
            <para>The <c>MIB_UDP6ROW</c> structure is defined on Windows Vista and later.</para>
            <para>
            The GetUdp6Table function retrieves the UDP listener table for IPv6 on the local computer and returns this information in a
            MIB_UDP6TABLE structure.
            </para>
            <para>An array of <c>MIB_UDP6ROW</c> structures are contained in the <c>MIB_UDP6TABLE</c> structure.</para>
            <para>
            The <c>dwLocalAddr</c> member is stored in an in6_addr structure. The RtlIpv6AddressToString or RtlIpv6AddressToStringEx
            functions may be used to convert the IPv6 address in the <c>dwLocalAddr</c> member to a string without loading the Windows
            Sockets DLL.
            </para>
            <para>
            The <c>dwLocalScopeId</c> and <c>dwLocalPort</c> members are in network byte order. In order to use the <c>dwLocalScopeId</c> and
            <c>dwLocalPort</c> members, the ntohs or inet_ntoa functions in Windows Sockets or similar functions may be needed.
            </para>
            <para>
            The MIB_UDP6TABLE structure contains the UDP listener table for IPv6 on the local computer. The name is based on the definition
            of this table in RFC 2454 published by the IETF. For more information, see http://www.ietf.org/rfc/rfc2454.txt. This table
            contains UDP endpoints for IPv6 that have been bound to an address. It should be noted that an application can create a UDP
            socket and bind it to an address for the sole purpose of sending a UDP datagram, with no intention of receiving packets using
            this socket (functioning as a listener).
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW.dwLocalAddr">
            <summary>
            <para>
            The IPv6 address of the UDP endpoint on the local computer. This member is stored in a character array in network byte order.
            </para>
            <para>
            A value of zero indicates a UDP listener willing to accept datagrams for any IP interface associated with the local computer.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW.dwLocalScopeId">
            <summary>
            <para>
            The scope ID for the IPv6 address of the UDP endpoint on the local computer. This member is stored in network byte order.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW.dwLocalPort">
            <summary>
            <para>The port number of the UDP endpoint on the local computer. This member is stored in network byte order.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW_OWNER_MODULE">
            <summary>
            <para>
            The <c>MIB_UDP6ROW_OWNER_MODULE</c> structure contains an entry from the User Datagram Protocol (UDP) listener table for IPv6 on
            the local computer. This entry also also includes any available ownership data and the process ID (PID) that issued the call to
            the bind function for the UDP endpoint.
            </para>
            </summary>
            <remarks>
            <para>
            The MIB_UDP6TABLE_OWNER_MODULE structure is returned by a call to GetExtendedUdpTable with the TableClass parameter set to a
            <c>UDP_TABLE_OWNER_MODULE</c> from the UDP_TABLE_CLASS enumeration and the ulAf parameter set to <c>AF_INET6</c>. The
            <c>MIB_UDP6TABLE_OWNER_MODULE</c> structure contains an array of <c>MIB_UDP6ROW_OWNER_MODULE</c> structures.
            </para>
            <para>
            The <c>ucLocalAddr</c> member is stored in a character array in network byte order. On Windows Vista and later, the
            RtlIpv6AddressToString or RtlIpv6AddressToStringEx functions may be used to convert the IPv6 address in the <c>ucLocalAddr</c>
            member to a string without loading the Windows Sockets DLL.
            </para>
            <para>
            The <c>dwLocalScopeId</c> member is in network byte order. In order to use the <c>dwLocalScopeId</c> member, the ntohl or
            inet_ntoa functions in Windows Sockets or similar functions may be needed.
            </para>
            <para>
            The <c>dwLocalPort</c> member are in network byte order. In order to use the <c>dwLocalPort</c> member, the ntohs or inet_ntoa
            functions in Windows Sockets or similar functions may be needed.
            </para>
            <para>
            The MIB_UDP6TABLE_OWNER_MODULE structure contains the UDP listener table for IPv6 on the local computer. The name is based on the
            definition of this table in RFC 2454 published by the IETF. For more information, see http://www.ietf.org/rfc/rfc2454.txt. This
            table contains UDP endpoints for IPv6 that have been bound to an address. It should be noted that an application can create a UDP
            socket and bind it to an address for the sole purpose of sending a UDP datagram, with no intention of receiving packets using
            this socket (functioning as a listener).
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Udpmib.h header file, not in the Iprtrmib.h header file. Note that the Udpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Udpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW_OWNER_MODULE.ucLocalAddr">
            <summary>
            <para>Type: <c>UCHAR[16]</c></para>
            <para>
            The IPv6 address of the UDP endpoint on the local computer. This member is stored in a character array in network byte order.
            </para>
            <para>
            A value of zero indicates a UDP listener willing to accept datagrams for any IP interface associated with the local computer.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW_OWNER_MODULE.dwLocalScopeId">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The scope ID for the IPv6 address of the UDP endpoint on the local computer.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW_OWNER_MODULE.dwLocalPort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The port number for the local UDP endpoint.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW_OWNER_MODULE.dwOwningPid">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The PID of the process that issued a context bind for this endpoint. If this value is set to 0, the information for this
            endpoint is unavailable.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW_OWNER_MODULE.liCreateTimestamp">
            <summary>
            <para>Type: <c>LARGE_INTEGER</c></para>
            <para>A SYSTEMTIME structure that indicates when the context bind operation that created this endpoint occurred.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW_OWNER_MODULE.SpecificPortBind">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW_OWNER_MODULE.OwningModuleInfo">
            <summary>
            <para>Type: <c>ULONGLONG[TCPIP_OWNING_MODULE_SIZE]</c></para>
            <para>An array of opaque data that contains ownership information.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW_OWNER_PID">
            <summary>
            <para>
            The <c>MIB_UDP6ROW_OWNER_PID</c> structure contains an entry from the User Datagram Protocol (UDP) listener table for IPv6 on the
            local computer. The entry also includes the process ID (PID) that issued the call to the bind function for the UDP endpoint.
            </para>
            </summary>
            <remarks>
            <para>
            The MIB_UDP6TABLE_OWNER_PID structure is returned by a call to GetExtendedUdpTable with the TableClass parameter set to a
            <c>UDP_TABLE_OWNER_PID</c> from the UDP_TABLE_CLASS enumeration and the ulAf parameter set to <c>AF_INET6</c>. The
            <c>MIB_UDP6TABLE_OWNER_PID</c> structure contains an array of <c>MIB_UDP6ROW_OWNER_PID</c> structures.
            </para>
            <para>
            The <c>ucLocalAddr</c> member is stored in a character array in network byte order. On Windows Vista and later, the
            RtlIpv6AddressToString or RtlIpv6AddressToStringEx functions may be used to convert the IPv6 address in the <c>ucLocalAddr</c>
            member to a string without loading the Windows Sockets DLL.
            </para>
            <para>
            The <c>dwLocalScopeId</c> member is in network byte order. In order to use the <c>dwLocalScopeId</c> member, the ntohl or
            inet_ntoa functions in Windows Sockets or similar functions may be needed.
            </para>
            <para>
            The <c>dwLocalPort</c> member are in network byte order. In order to use the <c>dwLocalPort</c> member, the ntohs or inet_ntoa
            functions in Windows Sockets or similar functions may be needed.
            </para>
            <para>
            The MIB_UDP6TABLE_OWNER_PID structure contains the UDP listener table for IPv6 on the local computer. The name is based on the
            definition of this table in RFC 2454 published by the IETF. For more information, see http://www.ietf.org/rfc/rfc2454.txt. This
            table contains UDP endpoints for IPv6 that have been bound to an address. It should be noted that an application can create a UDP
            socket and bind it to an address for the sole purpose of sending a UDP datagram, with no intention of receiving packets using
            this socket (functioning as a listener).
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Udpmib.h header file, not in the Iprtrmib.h header file. Note that the Udpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Udpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW_OWNER_PID.ucLocalAddr">
            <summary>
            <para>The IPv6 address for the local UDP endpoint. This member is stored in a character array in network byte order.</para>
            <para>
            A value of zero indicates a UDP listener willing to accept datagrams for any IP interface associated with the local computer.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW_OWNER_PID.dwLocalScopeId">
            <summary>
            <para>
            The scope ID for the IPv6 address of the UDP endpoint on the local computer. This member is stored in network byte order.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW_OWNER_PID.dwLocalPort">
            <summary>
            <para>The port number of the UDP endpoint on the local computer. This member is stored in network byte order.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDP6ROW_OWNER_PID.dwOwningPid">
            <summary>
            <para>
            The PID of the process that issued a context bind for this endpoint. If this value is set to 0, the information for this
            endpoint is unavailable.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_UDPROW">
            <summary>
            <para>
            The <c>MIB_UDPROW</c> structure contains an entry from the User Datagram Protocol (UDP) listener table for IPv4 on the local computer.
            </para>
            </summary>
            <remarks>
            <para>
            The GetUdpTable function retrieves the IPv4 UDP listener table on the local computer and returns this information in a
            MIB_UDPTABLE structure.
            </para>
            <para>An array of <c>MIB_UDPROW</c> structures are contained in the <c>MIB_UDPTABLE</c> structure.</para>
            <para>
            The <c>dwLocalAddr</c> member is stored as a <c>DWORD</c> in the same format as the in_addr structure. In order to use the
            <c>dwLocalAddr</c> member, the ntohl or inet_ntoa functions in Windows Sockets or similar functions may be needed. On Windows
            Vista and later, the RtlIpv4AddressToString or RtlIpv4AddressToStringEx functions may be used to convert the IPv4 address in the
            <c>dwLocalAddr</c> member to a string without loading the Windows Sockets DLL.
            </para>
            <para>
            The <c>dwLocalPort</c> member is in network byte order. In order to use the <c>dwLocalPort</c> member, the ntohs or inet_ntoa
            functions in Windows Sockets or similar functions may be needed.
            </para>
            <para>
            The MIB_UDPTABLE structure contains the UDP listener table for IPv4 on the local computer. The name is based on the definition of
            this table in RFC 1213 published by the IETF. For more information, see http://www.ietf.org/rfc/rfc1213.txt. This table contains
            UDP endpoints for IPv4 that have been bound to an address. It should be noted that an application can create a UDP socket and
            bind it to an address for the sole purpose of sending a UDP datagram, with no intention of receiving packets using this socket
            (functioning as a listener).
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Udpmib.h header file, not in the Iprtrmib.h header file. Note that the Udpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Udpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPROW.dwLocalAddr">
            <summary>
            <para>The IPv4 address of the UDP endpoint on the local computer.</para>
            <para>
            A value of zero indicates a UDP listener willing to accept datagrams for any IP interface associated with the local computer.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPROW.dwLocalPort">
            <summary>
            <para>The port number of the UDP endpoint on the local computer. This member is stored in network byte order.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_UDPROW_OWNER_MODULE">
            <summary>
            <para>
            The <c>MIB_UDPROW_OWNER_MODULE</c> structure contains an entry from the IPv4 User Datagram Protocol (UDP) listener table on the
            local computer. This entry also also includes any available ownership data and the process ID (PID) that issued the call to the
            bind function for the UDP endpoint.
            </para>
            </summary>
            <remarks>
            <para>
            The MIB_UDPTABLE_OWNER_MODULE structure is returned by a call to GetExtendedUdpTable with the TableClass parameter set to
            <c>UDP_TABLE_OWNER_MODULE</c> from the UDP_TABLE_CLASS enumeration and the ulAf parameter set to <c>AF_INET</c>. The
            <c>MIB_UDPTABLE_OWNER_MODULE</c> structure contains an array of <c>MIB_UDPROW_OWNER_MODULE</c> structures.
            </para>
            <para>
            The <c>dwLocalAddr</c> member is stored as a <c>DWORD</c> in the same format as the in_addr structure. In order to use the
            <c>dwLocalAddr</c> member, the ntohl or inet_ntoa functions in Windows Sockets or similar functions may be needed. On Windows
            Vista and later, the RtlIpv4AddressToString or RtlIpv4AddressToStringEx functions may be used to convert the IPv4 address in the
            <c>dwLocalAddr</c> member to a string without loading the Windows Sockets DLL.
            </para>
            <para>
            The <c>dwLocalPort</c> member is in network byte order. In order to use the <c>dwLocalPort</c> member, the ntohs or inet_ntoa
            functions in Windows Sockets or similar functions may be needed.
            </para>
            <para>
            The MIB_UDPTABLE_OWNER_MODULE structure contains the UDP listener table for IPv4 on the local computer. The name is based on the
            definition of this table in RFC 1213 published by the IETF. For more information, see http://www.ietf.org/rfc/rfc1213.txt. This
            table contains UDP endpoints for IPv4 that have been bound to an address. It should be noted that an application can create a UDP
            socket and bind it to an address for the sole purpose of sending a UDP datagram, with no intention of receiving packets using
            this socket (functioning as a listener).
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Udpmib.h header file, not in the Iprtrmib.h header file. Note that the Udpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Udpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPROW_OWNER_MODULE.dwLocalAddr">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The IPv4 address of the UDP endpoint on the local computer.</para>
            <para>
            A value of zero indicates a UDP listener willing to accept datagrams for any IP interface associated with the local computer.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPROW_OWNER_MODULE.dwLocalPort">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>The port number of the UDP endpoint on the local computer. This member is stored in network byte order.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPROW_OWNER_MODULE.dwOwningPid">
            <summary>
            <para>Type: <c>DWORD</c></para>
            <para>
            The PID of the process that issued the call to the bind function for the UDP endpoint. This member is set to 0 when the PID
            is unavailable.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPROW_OWNER_MODULE.liCreateTimestamp">
            <summary>
            <para>Type: <c>LARGE_INTEGER</c></para>
            <para>A SYSTEMTIME structure that indicates when the call to the bind function for the UDP endpoint occurred.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPROW_OWNER_MODULE.SpecificPortBind">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPROW_OWNER_MODULE.OwningModuleInfo">
            <summary>
            <para>Type: <c>ULONGLONG[TCPIP_OWNING_MODULE_SIZE]</c></para>
            <para>An array of opaque data that contains ownership information.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_UDPROW_OWNER_PID">
            <summary>
            <para>
            The <c>MIB_UDPROW_OWNER_PID</c> structure contains an entry from the User Datagram Protocol (UDP) listener table for IPv4 on the
            local computer. The entry also includes the process ID (PID) that issued the call to the bind function for the UDP endpoint.
            </para>
            </summary>
            <remarks>
            <para>
            The MIB_UDPTABLE_OWNER_PID structure is returned by a call to GetExtendedUdpTable with the TableClass parameter set to
            <c>UDP_TABLE_OWNER_PID</c> and the ulAf parameter set to <c>AF_INET</c>. The <c>MIB_UDPTABLE_OWNER_PID</c> structure contains an
            array of <c>MIB_UDPROW_OWNER_PID</c> structures.
            </para>
            <para>
            The <c>dwLocalAddr</c> member is stored as a <c>DWORD</c> in the same format as the in_addr structure. In order to use the
            <c>dwLocalAddr</c> member, the ntohl or inet_ntoa functions in Windows Sockets or similar functions may be needed. On Windows
            Vista and later, the RtlIpv4AddressToString or RtlIpv4AddressToStringEx functions may be used to convert the IPv4 address in the
            <c>dwLocalAddr</c> member to a string without loading the Windows Sockets DLL.
            </para>
            <para>
            The <c>dwLocalPort</c> member is in network byte order. In order to use the <c>dwLocalPort</c> member, the ntohs or inet_ntoa
            functions in Windows Sockets or similar functions may be needed.
            </para>
            <para>
            The MIB_UDPTABLE_OWNER_PID structure contains the UDP listener table for IPv4 on the local computer. The name is based on the
            definition of this table in RFC 1213 published by the IETF. For more information, see http://www.ietf.org/rfc/rfc1213.txt. This
            table contains UDP endpoints for IPv4 that have been bound to an address. It should be noted that an application can create a UDP
            socket and bind it to an address for the sole purpose of sending a UDP datagram, with no intention of receiving packets using
            this socket (functioning as a listener).
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Udpmib.h header file, not in the Iprtrmib.h header file. Note that the Udpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Udpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPROW_OWNER_PID.dwLocalAddr">
            <summary>
            <para>The IPv4 address of the UDP endpoint on the local computer.</para>
            <para>
            A value of zero indicates a UDP listener willing to accept datagrams for any IP interface associated with the local computer.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPROW_OWNER_PID.dwLocalPort">
            <summary>
            <para>The port number of the UDP endpoint on the local computer. This member is stored in network byte order.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPROW_OWNER_PID.dwOwningPid">
            <summary>
            <para>
            The PID of the process that issued the call to the bind function for the UDP endpoint. This member is set to 0 when the PID
            is unavailable.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_UDPSTATS">
            <summary>
            The <c>MIB_UDPSTATS</c> structure contains statistics for the User Datagram Protocol (UDP) running on the local computer.
            </summary>
            <remarks>
            <para>The GetUdpStatistics function returns a pointer to a <c>MIB_UDPSTATS</c> structure.</para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Udpmib.h header file, not in the Iprtrmib.h header file. Note that the Udpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Udpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPSTATS.dwInDatagrams">
            <summary>The number of datagrams received.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPSTATS.dwNoPorts">
            <summary>The number of datagrams received that were discarded because the port specified was invalid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPSTATS.dwInErrors">
            <summary>
            The number of erroneous datagrams received. This number does not include the value contained by the <c>dwNoPorts</c> member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPSTATS.dwOutDatagrams">
            <summary>The number of datagrams transmitted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPSTATS.dwNumAddrs">
            <summary>The number of entries in the UDP listener table.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_UDPSTATS2">
            <summary>
            <para>
            [Some information relates to pre-released product which may be substantially modified before it's commercially released.
            Microsoft makes no warranties, express or implied, with respect to the information provided here.]
            </para>
            <para>
            The <c>MIB_UDPSTATS2</c> structure contains statistics for the User Datagram Protocol (UDP) running on the local computer. This
            structure is different from MIB_UDPSTATS structure in that it uses 64-bit counters, rather than 32-bit counters.
            </para>
            </summary>
            <remarks>The GetUdpStatisticsEx2 function returns a pointer to a <c>MIB_UDPSTATS2</c> structure.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPSTATS2.dw64InDatagrams">
            <summary>The number of datagrams received.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPSTATS2.dwNoPorts">
            <summary>The number of datagrams received that were discarded because the port specified was invalid.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPSTATS2.dwInErrors">
            <summary>
            The number of erroneous datagrams received. This number does not include the value contained by the <c>dwNoPorts</c> member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPSTATS2.dw64OutDatagrams">
            <summary>The number of datagrams transmitted.</summary>
        </member>
        <member name="F:Vanara.PInvoke.IpHlpApi.MIB_UDPSTATS2.dwNumAddrs">
            <summary>The number of entries in the UDP listener table.</summary>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE">
            <summary>
            <para>The <c>MIB_UDP6TABLE</c> structure contains the User Datagram Protocol (UDP) listener table for IPv6 on the local computer.</para>
            </summary>
            <remarks>
            <para>
            The GetUdp6Table function enumerates the UDP endpoints for IPv6 that have been bound to an address on the local computer and
            returns this information in a <c>MIB_UDP6TABLE</c> structure.
            </para>
            <para>
            This table includes the local IPv6 address, scope ID, and port information for sending and receiving UDP datagrams on the local
            computer. An array of MIB_UDP6ROW structures are contained in the <c>MIB_UDP6TABLE</c> structure.
            </para>
            <para>
            The <c>MIB_UDP6TABLE</c> structure may contain padding for alignment between the <c>dwNumEntries</c> member and the first
            MIB_UDP6ROW array entry in the <c>table</c> member. Padding for alignment may also be present between the <c>MIB_UDP6ROW</c>
            array entries in the <c>table</c> member. Any access to a <c>MIB_UDP6ROW</c> array entry should assume padding may exist.
            </para>
            <para>
            The <c>MIB_UDP6TABLE</c> structure contains the UDP listener table for IPv6 on the local computer. The name is based on the
            definition of this table in RFC 2454 published by the IETF. For more information, see http://www.ietf.org/rfc/rfc2454.txt. This
            table contains UDP endpoints for IPv6 that have been bound to an address. It should be noted that an application can create a UDP
            socket and bind it to an address for the sole purpose of sending a UDP datagram, with no intention of receiving packets using
            this socket (functioning as a listener).
            </para>
            <para>
            The MIB_UDP6TABLE_OWNER_MODULE structure is an enhanced version of the MIB_UDP6TABLE_OWNER_PID structure that includes any
            available ownership data for each UDP endpoint in the table. The <c>MIB_UDP6TABLE_OWNER_PID</c> is an enhanced version of the
            <c>MIB_UDP6TABLE</c> that includes the process ID (PID) that issued the call to the bind function for each UDP endpoint in the table.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE.dwNumEntries">
            <summary>
            <para>The number of entries in the table.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE.table">
            <summary>
            <para>A pointer to an array of MIB_UDP6ROW structures.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The MIB_UDP6TABLE instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE_OWNER_MODULE">
            <summary>
            <para>
            The <c>MIB_UDP6TABLE_OWNER_MODULE</c> structure contains the User Datagram Protocol (UDP) listener table for IPv6 on the local
            computer. The table also includes any available ownership data and the process ID (PID) that issued the call to the bind function
            for each UDP endpoint.
            </para>
            </summary>
            <remarks>
            <para>
            The <c>MIB_UDP6TABLE_OWNER_MODULE</c> structure is returned by a call to GetExtendedUdpTable with the TableClass parameter set to
            a <c>UDP_TABLE_OWNER_MODULE</c> from the UDP_TABLE_CLASS enumeration and the ulAf parameter set to <c>AF_INET6</c>. The
            <c>MIB_UDP6TABLE_OWNER_MODULE</c> structure contains an array of MIB_UDP6ROW_OWNER_MODULE structures.
            </para>
            <para>
            The <c>MIB_UDP6TABLE_OWNER_MODULE</c> structure may contain padding for alignment between the <c>dwNumEntries</c> member and the
            first MIB_UDP6ROW_OWNER_MODULE array entry in the <c>table</c> member. Padding for alignment may also be present between the
            <c>MIB_UDP6ROW_OWNER_MODULE</c> array entries in the <c>table</c> member. Any access to a <c>MIB_UDP6ROW_OWNER_MODULE</c> array
            entry should assume padding may exist.
            </para>
            <para>
            The <c>MIB_UDP6TABLE_OWNER_MODULE</c> structure contains the UDP listener table for IPv6 on the local computer. The name is based
            on the definition of this table in RFC 2454 published by the IETF. For more information, see http://www.ietf.org/rfc/rfc2454.txt.
            This table contains UDP endpoints for IPv6 that have been bound to an address. It should be noted that an application can create
            a UDP socket and bind it to an address for the sole purpose of sending a UDP datagram, with no intention of receiving packets
            using this socket (functioning as a listener).
            </para>
            <para>
            The <c>MIB_UDP6TABLE_OWNER_MODULE</c> structure is an enhanced version of the MIB_UDP6TABLE_OWNER_PID structure that includes any
            available ownership data for each UDP endpoint in the table. The <c>MIB_UDP6TABLE_OWNER_PID</c> is an enhanced version of the
            MIB_UDP6TABLE that includes the process ID (PID) that issued the call to the bind function for each UDP endpoint in the table.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Udpmib.h header file, not in the Iprtrmib.h header file. Note that the Udpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Udpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE_OWNER_MODULE.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE_OWNER_MODULE"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE_OWNER_MODULE.dwNumEntries">
            <summary>
            <para>The number of MIB_UDP6ROW_OWNER_MODULE elements in <c>table</c>.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE_OWNER_MODULE.table">
            <summary>
            <para>An array of MIB_UDP6ROW_OWNER_MODULE structures returned by a call to GetExtendedUdpTable.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE_OWNER_MODULE.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE_OWNER_MODULE)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE_OWNER_MODULE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The MIB_UDP6TABLE_OWNER_MODULE instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE_OWNER_PID">
            <summary>
            <para>
            The <c>MIB_UDP6TABLE_OWNER_PID</c> structure contains the User Datagram Protocol (UDP) listener table for IPv6 on the local
            computer. The table also includes the process ID (PID) that issued the call to the bind function for each UDP endpoint.
            </para>
            </summary>
            <remarks>
            <para>
            The <c>MIB_UDP6TABLE_OWNER_PID</c> structure is returned by a call to GetExtendedUdpTable with the TableClass parameter set to a
            <c>UDP_TABLE_OWNER_PID</c> from the UDP_TABLE_CLASS enumeration and the ulAf parameter set to <c>AF_INET6</c>. The
            <c>MIB_UDP6TABLE_OWNER_PID</c> structure contains an array of MIB_UDP6ROW_OWNER_PID structures.
            </para>
            <para>
            The <c>MIB_UDP6TABLE_OWNER_PID</c> structure may contain padding for alignment between the <c>dwNumEntries</c> member and the
            first MIB_UDP6ROW_OWNER_PID array entry in the <c>table</c> member. Padding for alignment may also be present between the
            <c>MIB_UDP6ROW_OWNER_PID</c> array entries in the <c>table</c> member. Any access to a <c>MIB_UDP6ROW_OWNER_PID</c> array entry
            should assume padding may exist.
            </para>
            <para>
            The <c>MIB_UDP6TABLE_OWNER_PID</c> structure contains the UDP listener table for IPv6 on the local computer. The name is based on
            the definition of this table in RFC 2454 published by the IETF. For more information, see http://www.ietf.org/rfc/rfc2454.txt.
            This table contains UDP endpoints for IPv6 that have been bound to an address. It should be noted that an application can create
            a UDP socket and bind it to an address for the sole purpose of sending a UDP datagram, with no intention of receiving packets
            using this socket (functioning as a listener).
            </para>
            <para>
            The MIB_UDP6TABLE_OWNER_MODULE structure is an enhanced version of the <c>MIB_UDP6TABLE_OWNER_PID</c> structure that includes any
            available ownership data for each UDP endpoint in the table. The <c>MIB_UDP6TABLE_OWNER_PID</c> is an enhanced version of the
            MIB_UDP6TABLE that includes the process ID (PID) that issued the call to the bind function for each UDP endpoint in the table.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Udpmib.h header file, not in the Iprtrmib.h header file. Note that the Udpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Udpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE_OWNER_PID.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE_OWNER_PID"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE_OWNER_PID.dwNumEntries">
            <summary>
            <para>The number of MIB_UDP6ROW_OWNER_PID elements in <c>table</c>.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE_OWNER_PID.table">
            <summary>
            <para>An array of MIB_UDP6ROW_OWNER_PID structures returned by a call to GetExtendedUdpTable.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE_OWNER_PID.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE_OWNER_PID)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_UDP6TABLE_OWNER_PID"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The MIB_UDP6TABLE_OWNER_PID instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE">
            <summary>
            <para>The <c>MIB_UDPTABLE</c> structure contains the User Datagram Protocol (UDP) listener table for IPv4 on the local computer.</para>
            </summary>
            <remarks>
            <para>
            The GetUdpTable function enumerates the table of UDP endpoints for IPv4 that have been bound to an address on the local computer
            and returns this information in a <c>MIB_UDPTABLE</c> structure.
            </para>
            <para>
            This table includes the local IPv4 address and port information for sending and receiving UDP datagrams on the local computer. An
            array of MIB_UDPROW structures are contained in the <c>MIB_UDPTABLE</c> structure.
            </para>
            <para>
            The <c>MIB_UDPTABLE</c> structure may contain padding for alignment between the <c>dwNumEntries</c> member and the first
            MIB_UDPROW array entry in the <c>table</c> member. Padding for alignment may also be present between the <c>MIB_UDPROW</c> array
            entries in the <c>table</c> member. Any access to a <c>MIB_UDPROW</c> array entry should assume padding may exist.
            </para>
            <para>
            The <c>MIB_UDPTABLE</c> structure contains the UDP listener table for IPv4 on the local computer. The name is based on the
            definition of this table in RFC 1213 published by the IETF. For more information, see http://www.ietf.org/rfc/rfc1213.txt. This
            table contains UDP endpoints for IPv4 that have been bound to an address. It should be noted that an application can create a UDP
            socket and bind it to an address for the sole purpose of sending a UDP datagram, with no intention of receiving packets using
            this socket (functioning as a listener).
            </para>
            <para>
            The MIB_UDPTABLE_OWNER_MODULE structure is an enhanced version of the MIB_UDPTABLE_OWNER_PID structure that includes any
            available ownership data for each UDP endpoint in the table. The <c>MIB_UDPTABLE_OWNER_PID</c> is an enhanced version of the
            <c>MIB_UDPTABLE</c> that includes the process ID (PID) that issued the call to the bind function for each UDP endpoint in the table.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Udpmib.h header file, not in the Iprtrmib.h header file. Note that the Udpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Udpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE.dwNumEntries">
            <summary>
            <para>The number of entries in the table.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE.table">
            <summary>
            <para>A pointer to an array of MIB_UDPROW structures.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The MIB_UDPTABLE instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE_OWNER_MODULE">
            <summary>
            <para>
            The <c>MIB_UDPTABLE_OWNER_MODULE</c> structure contains the User Datagram Protocol (UDP) listener table for IPv4 on the local
            computer. The table also includes any available ownership data and the process ID (PID) that issued the call to the bind function
            for each UDP endpoint.
            </para>
            </summary>
            <remarks>
            <para>
            The <c>MIB_UDPTABLE_OWNER_MODULE</c> structure is returned by a call to GetExtendedUdpTable with the TableClass parameter set to
            <c>UDP_TABLE_OWNER_MODULE</c> from the UDP_TABLE_CLASS enumeration and the ulAf parameter set to <c>AF_INET4</c>. The
            <c>MIB_UDPTABLE_OWNER_MODULE</c> structure contains an array of MIB_UDPROW_OWNER_MODULE structures.
            </para>
            <para>
            The <c>MIB_UDPTABLE_OWNER_MODULE</c> structure may contain padding for alignment between the <c>dwNumEntries</c> member and the
            first MIB_UDPROW_OWNER_MODULE array entry in the <c>table</c> member. Padding for alignment may also be present between the
            <c>MIB_UDPROW_OWNER_MODULE</c> array entries in the <c>table</c> member. Any access to a <c>MIB_UDPROW_OWNER_MODULE</c> array
            entry should assume padding may exist.
            </para>
            <para>
            The <c>MIB_UDPTABLE_OWNER_MODULE</c> structure contains the UDP listener table for IPv4 on the local computer. The name is based
            on the definition of this table in RFC 1213 published by the IETF. For more information, see http://www.ietf.org/rfc/rfc1213.txt.
            This table contains UDP endpoints for IPv4 that have been bound to an address. It should be noted that an application can create
            a UDP socket and bind it to an address for the sole purpose of sending a UDP datagram, with no intention of receiving packets
            using this socket (functioning as a listener).
            </para>
            <para>
            The <c>MIB_UDPTABLE_OWNER_MODULE</c> structure is an enhanced version of the MIB_UDPTABLE_OWNER_PID structure that includes any
            available ownership data for each UDP endpoint in the table. The <c>MIB_UDPTABLE_OWNER_PID</c> is an enhanced version of the
            MIB_UDPTABLE that includes the process ID (PID) that issued the call to the bind function for each UDP endpoint in the table.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Udpmib.h header file, not in the Iprtrmib.h header file. Note that the Udpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Udpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE_OWNER_MODULE.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE_OWNER_MODULE"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE_OWNER_MODULE.dwNumEntries">
            <summary>
            <para>The number of MIB_UDPROW_OWNER_MODULE elements in <c>table</c>.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE_OWNER_MODULE.table">
            <summary>
            <para>An array of MIB_UDPROW_OWNER_MODULE structures returned by a call to GetExtendedUdpTable.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE_OWNER_MODULE.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE_OWNER_MODULE)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE_OWNER_MODULE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The MIB_UDPTABLE_OWNER_MODULE instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE_OWNER_PID">
            <summary>
            <para>
            The <c>MIB_UDPTABLE_OWNER_PID</c> structure contains the User Datagram Protocol (UDP) listener table for IPv4 on the local
            computer. The table also includes the process ID (PID) that issued the call to the bind function for each UDP endpoint.
            </para>
            </summary>
            <remarks>
            <para>
            The <c>MIB_UDPTABLE_OWNER_PID</c> structure is returned by a call to GetExtendedUdpTable with the TableClass parameter set to
            <c>UDP_TABLE_OWNER_PID</c> from the UDP_TABLE_CLASS enumeration and the ulAf parameter set to <c>AF_INET4</c>. The
            <c>MIB_UDPTABLE_OWNER_PID</c> structure contains an array of MIB_UDPROW_OWNER_PID structures.
            </para>
            <para>
            The <c>MIB_UDPTABLE_OWNER_PID</c> structure may contain padding for alignment between the <c>dwNumEntries</c> member and the
            first MIB_UDPROW_OWNER_PID array entry in the <c>table</c> member. Padding for alignment may also be present between the
            <c>MIB_UDPROW_OWNER_PID</c> array entries in the <c>table</c> member. Any access to a <c>MIB_UDPROW_OWNER_PID</c> array entry
            should assume padding may exist.
            </para>
            <para>
            The <c>MIB_UDPTABLE_OWNER_PID</c> structure contains the UDP listener table for IPv4 on the local computer. The name is based on
            the definition of this table in RFC 1213 published by the IETF. For more information, see http://www.ietf.org/rfc/rfc1213.txt.
            This table contains UDP endpoints for IPv4 that have been bound to an address. It should be noted that an application can create
            a UDP socket and bind it to an address for the sole purpose of sending a UDP datagram, with no intention of receiving packets
            using this socket (functioning as a listener).
            </para>
            <para>
            The MIB_UDPTABLE_OWNER_MODULE structure is an enhanced version of the <c>MIB_UDPTABLE_OWNER_PID</c> structure that includes any
            available ownership data for each UDP endpoint in the table. The <c>MIB_UDPTABLE_OWNER_PID</c> is an enhanced version of the
            MIB_UDPTABLE that includes the process ID (PID) that issued the call to the bind function for each UDP endpoint in the table.
            </para>
            <para>
            On the Microsoft Windows Software Development Kit (SDK) released for Windows Vista and later, the organization of header files
            has changed. This structure is defined in the Udpmib.h header file, not in the Iprtrmib.h header file. Note that the Udpmib.h
            header file is automatically included in Iprtrmib.h, which is automatically included in the Iphlpapi.h header file. The Udpmib.h
            and Iprtrmib.h header files should never be used directly.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE_OWNER_PID.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE_OWNER_PID"/> class.</summary>
            <param name="byteSize">Amount of space, in bytes, to reserve.</param>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE_OWNER_PID.dwNumEntries">
            <summary>
            <para>The number of MIB_UDPROW_OWNER_PID elements in <c>table</c>.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE_OWNER_PID.table">
            <summary>
            <para>An array of MIB_UDPROW_OWNER_PID structures returned by a call to GetExtendedUdpTable.</para>
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE_OWNER_PID.op_Implicit(Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE_OWNER_PID)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.IpHlpApi.MIB_UDPTABLE_OWNER_PID"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="table">The MIB_UDPTABLE_OWNER_PID instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
    </members>
</doc>
